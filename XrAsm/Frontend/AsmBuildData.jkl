//
// Implements the section data building phase of the assembler.
//

#INCLUDE "<inc>/Asm.hjk"

PUBLIC AsmExternalFixupListHead : TlListEntry

FN AsmAddRelocation (
    IN element : ^AsmElement,
    IN section : ^AsmSection,
    IN symbol : ^LexSymbol,
)

    // Add a relocation to the relevant section's relocation list, or to the
    // "global" extern fixup list.

    // Create the relocation record.

    reloc : ^AsmRelocation

    status := TlBumpAlloc (
        SIZEOF AsmRelocation, // bytes
        OUT reloc, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate relocation record", 0, 0, 0 )
    END

    reloc^.Section = section
    reloc^.Offset = element^.FileOffset
    reloc^.Type = element^.RelocationType

    IF symbol^.Visibility == LABEL_EXTERN THEN
        // Add to the fixup list.

        TlInsertAtTailList (
            &AsmExternalFixupListHead, // head
            &reloc^.Entry, // entry
        )

    ELSE
        // Add to the relocation list for the *target symbol's section*, not
        // the section which contains the bytes that need to be fixed up.

        TlInsertAtTailList (
            &symbol^.Section^.RelocationListHead, // head
            &reloc^.Entry, // entry
        )
    END
END

FNPTR AsmDataEncodeF (
    IN element : ^AsmElement,
    IN section : ^AsmSection,
    IN dataptr : ^UBYTE,
)

FN (AsmDataEncodeF) AsmEncodeDb (
    IN element : ^AsmElement,
    IN section : ^AsmSection,
    IN dataptr : ^UBYTE,
)

    val : UWORD
    dumpster : ^VOID

    AsmEvaluateNodeMustWork (
        element^.Body.Data, // node
        OUT val, // value
        OUT dumpster, // refsymbol
    )

    dataptr[0] = val
END

FN (AsmDataEncodeF) AsmEncodeDi (
    IN element : ^AsmElement,
    IN section : ^AsmSection,
    IN dataptr : ^UBYTE,
)

    val : UWORD
    dumpster : ^VOID

    AsmEvaluateNodeMustWork (
        element^.Body.Data, // node
        OUT val, // value
        OUT dumpster, // refsymbol
    )

    dataptr[0] = val
    dataptr[1] = val >> 8
END

FN (AsmDataEncodeF) AsmEncodeDl (
    IN element : ^AsmElement,
    IN section : ^AsmSection,
    IN dataptr : ^UBYTE,
)

    val : UWORD
    refsymbol : ^LexSymbol

    AsmEvaluateNodeMustWork (
        element^.Body.Data, // node
        OUT val, // value
        OUT refsymbol, // refsymbol
    )

    dataptr[0] = val
    dataptr[1] = val >> 8
    dataptr[2] = val >> 16
    dataptr[3] = val >> 24

    IF element^.RelocationType AND refsymbol THEN
        // Add a relocation.

        AsmAddRelocation (
            element, // element
            section, // section
            refsymbol, // symbol
        )
    END
END

FN (AsmDataEncodeF) AsmEncodeDq (
    IN element : ^AsmElement,
    IN section : ^AsmSection,
    IN dataptr : ^UBYTE,
)

#IF ( == BITS 64 )
    val : UWORD
    refsymbol : ^LexSymbol

    AsmEvaluateNodeMustWork (
        element^.Body.Data, // node
        OUT val, // value
        OUT refsymbol, // refsymbol
    )

    dataptr[0] = val
    dataptr[1] = val >> 8
    dataptr[2] = val >> 16
    dataptr[3] = val >> 24
    dataptr[4] = val >> 32
    dataptr[5] = val >> 40
    dataptr[6] = val >> 48
    dataptr[7] = val >> 56

    IF element^.RelocationType AND refsymbol THEN
        // Add a relocation.

        AsmAddRelocation (
            element, // element
            section, // section
            refsymbol, // symbol
        )
    END

#ELSE
    LexTokenError ( &element^.ErrorToken,
        "DQ only supported on 64 bit builds", 0, 0, 0 )
#END

END

FN (AsmDataEncodeF) AsmEncodeDp (
    IN element : ^AsmElement,
    IN section : ^AsmSection,
    IN dataptr : ^UBYTE,
)

    IF AsmTargetInfo^.PointerSize == 8 THEN
        AsmEncodeDq (
            element, // element
            section, // section
            dataptr, // dataptr
        )

    ELSE
        AsmEncodeDl (
            element, // element
            section, // section
            dataptr, // dataptr
        )
    END
END

FN (AsmDataEncodeF) AsmEncodeIncBin (
    IN element : ^AsmElement,
    IN section : ^AsmSection,
    IN dataptr : ^UBYTE,
)

    // Encode a file directly into the section data.

    handle : ^VOID

    status := TlOpenSource (
        element^.Body.IncBin.Path, // filename
        OUT handle, // handle
    )

    IF status THEN
        // Note that we stat'd it earlier so this shouldn't be possible.

        TlInternalError ( "Failed to open incbin file", 0, 0, 0 )
    END

    // Now read the file contents directly into the buffer.

    TlReadFile (
        handle, // handle
        element^.Body.IncBin.Size, // bytes
        dataptr, // buffer
    )

    // Close the file.

    TlClose ( handle )
END

FN (AsmDataEncodeF) AsmEncodeBytes (
    IN element : ^AsmElement,
    IN section : ^AsmSection,
    IN dataptr : ^UBYTE,
)

    TlFillMemoryWithByte (
        dataptr, // ptr
        element^.Body.BytesChunk.Count, // sz
        element^.Body.BytesChunk.Byte, // byte
    )
END

FN (AsmDataEncodeF) AsmEncodeDs (
    IN element : ^AsmElement,
    IN section : ^AsmSection,
    IN dataptr : ^UBYTE,
)

    TlCopyMemory (
        dataptr, // dest
        element^.Body.String^.Buffer, // src
        element^.Body.String^.Count - 1, // sz
    )
END

AsmDataEncode : AsmDataEncodeF[TOKEN_SUBTYPE_MAX] = {
    [TOKEN_DB] = &AsmEncodeDb,
    [TOKEN_DI] = &AsmEncodeDi,
    [TOKEN_DL] = &AsmEncodeDl,
    [TOKEN_DQ] = &AsmEncodeDq,
    [TOKEN_DP] = &AsmEncodeDp,
    [TOKEN_INCBIN] = &AsmEncodeIncBin,
    [TOKEN_BYTES] = &AsmEncodeBytes,
    [TOKEN_DS] = &AsmEncodeDs,
}

FN AsmBuildDataForSection (
    IN section : ^AsmSection,
)

    // Check if this is a bss section.

    IF section^.SectionFlags & XLO_SECTION_ZERO THEN
        // Don't bother, there are no contents.

        LEAVE
    END

    // Allocate the buffer.

    status := TlBumpAlloc (
        section^.FileOffset, // bytes
        OUT section^.DataBuffer, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate section buffer", 0, 0, 0 )
    END

    buf := section^.DataBuffer

    // Walk the element chain.

    head := &section^.ElementListHead
    listentry := head^.Next

    WHILE listentry != head DO
        elem := CONTAINEROF listentry TO AsmElement.Entry

        // Dispatch based on the token's subtype to figure out how to encode
        // this element.

        IF elem^.ErrorToken.Type == TOKEN_DIRECTIVE THEN
            AsmDataEncode[elem^.ErrorToken.Subtype] (
                elem, // element
                section, // section
                &buf[elem^.FileOffset], // dataptr
            )

        ELSEIF elem^.ErrorToken.Type == TOKEN_INSTRUCTION THEN
            // Call the target code to encode it.

            AsmTargetInfo^.EncodeFunc (
                elem, // element
                section, // section
                &buf[elem^.FileOffset], // dataptr
            )

        ELSE
            TlInternalError ( "Unknown element type", elem^.ErrorToken.Type, 0, 0 )
        END

        listentry = listentry^.Next
    END
END

FN AsmBuildData ()

    // We basically want to iterate each section. For each section, we create a
    // buffer to contain its binary data (unless it's a bss section). Then we
    // walk the element chain and encode each element into the data buffer.

    TlInitializeList ( &AsmExternalFixupListHead )

    head := &AsmSectionListHead
    listentry := head^.Next

    WHILE listentry != head DO
        section := CONTAINEROF listentry TO AsmSection.SectionListEntry

        AsmBuildDataForSection ( section )

        listentry = listentry^.Next
    END
END