//
// Implements the generic part of parsing XR/SDK assembly.
//

#INCLUDE "<inc>/Asm.hjk"

PUBLIC AsmCurrentSection : ^AsmSection = NULLPTR

PUBLIC AsmSectionListHead : TlListEntry

AsmLastLabel : ^LexSymbol = NULLPTR

FN AsmConsumeComma ()

    // Consume a comma token.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_COMMA, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a comma", 0, 0, 0 )
    END
END

FN AsmCreateExpressionNode (
    IN type : AsmExpressionNodeType,
    IN token : ^LexToken,
) : ^AsmExpressionNode

    // Create an expression node.

    node : ^AsmExpressionNode

    status := TlBumpAlloc (
        SIZEOF AsmExpressionNode, // bytes
        OUT node, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to create expr node", 0, 0, 0 )
    END

    node^.Type = type

    LexCopyToken (
        &node^.Token, // dest
        token, // src
    )

    RETURN node
END

FN AsmCreateOperation (
    IN operator : LexTokenSubtype,
    IN left : ^AsmExpressionNode,
    IN right : ^AsmExpressionNode,
) : ^AsmExpressionNode

    // Helper function to create an expression node representing an operation
    // between two existing nodes.

    node := AsmCreateExpressionNode (
        AST_OPERATOR, // type
        &left^.Token, // token
    )

    node^.Token.Subtype = operator

    node^.Body.Operator.Left = left
    node^.Body.Operator.Right = right

    RETURN node
END

FN AsmCreateOperationWithConstant (
    IN operator : LexTokenSubtype,
    IN left : ^AsmExpressionNode,
    IN constant : UWORD,
) : ^AsmExpressionNode

    // Helper function to create an expression node representing an operation
    // between an existing node and a constant.

    constnode := AsmCreateExpressionNode (
        AST_CONSTANT, // type
        &left^.Token, // token
    )

    constnode^.Body.Constant = constant

    RETURN AsmCreateOperation (
        operator, // operator
        left, // left
        constnode, // right
    )
END

FN AsmCreateOperationLeftConstant (
    IN operator : LexTokenSubtype,
    IN constant : UWORD,
    IN right : ^AsmExpressionNode,
) : ^AsmExpressionNode

    // Helper function to create an expression node representing an operation
    // between an existing node and a constant.

    constnode := AsmCreateExpressionNode (
        AST_CONSTANT, // type
        &right^.Token, // token
    )

    constnode^.Body.Constant = constant

    RETURN AsmCreateOperation (
        operator, // operator
        constnode, // left
        right, // right
    )
END

FN AsmCreateElement (
    IN errtoken : ^LexToken,
    IN size : UWORD,
) : ^AsmElement

    // Create an element.

    AsmEnsureSection ( errtoken )

    node : ^AsmElement

    status := TlBumpAlloc (
        SIZEOF AsmElement, // bytes
        OUT node, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to create element", 0, 0, 0 )
    END

    node^.RelocationType = XLO_RELOC_NONE
    node^.FileOffset = AsmCurrentSection^.FileOffset
    node^.MemoryOffset = AsmCurrentSection^.MemoryOffset

    LexCopyToken (
        &node^.ErrorToken, // dest
        errtoken, // src
    )

    TlInsertAtTailList (
        &AsmCurrentSection^.ElementListHead, // head
        &node^.Entry, // entry
    )

    AsmAdvanceSection ( size )

    RETURN node
END

FN AsmInitializeLabel (
    IN errtoken : ^LexToken,
    IN symbol : ^LexSymbol,
    IN global : UBYTE,
    IN forward : UBYTE,
)

    // Initialize the label. Duh.

    IF NOT forward THEN
        IF NOT global AND NOT AsmLastLabel THEN
            LexTokenError ( errtoken,
                "Local label without corresponding global label", 0, 0, 0 )
        END

        IF symbol^.Type != SYM_UNINITIALIZED AND
            symbol^.Type != SYM_FORWARD_LABEL THEN

            LexTokenError ( errtoken, "Expected a new label name", 0, 0, 0 )
        END
    END

    IF global THEN
        IF NOT forward THEN
            AsmLastLabel = symbol
        END

        IF symbol^.Type == SYM_UNINITIALIZED THEN
            // Create a local label scope.

            symbol^.LocalLabelScope = LexCreateSymbolTable ( NULLPTR )
        END
    END

    IF forward THEN
        symbol^.Type = SYM_FORWARD_LABEL

    ELSE
        AsmEnsureSection ( errtoken )

        symbol^.Type = SYM_LABEL

        symbol^.FileOffset = AsmCurrentSection^.FileOffset
        symbol^.MemoryOffset = AsmCurrentSection^.MemoryOffset
        symbol^.Section = AsmCurrentSection
    END
END

FNPTR AsmOperatorF (
    IN operator : ^AsmOperator,
    IN node : ^AsmExpressionNode,
)

FNPTR AsmEvalF (
    IN node : ^AsmExpressionNode,
    OUT value : UWORD,
    OUT refsymbol : ^LexSymbol,
) : UWORD

STRUCT AsmOperator
    ParseFunc : AsmOperatorF,
    EvalFunc : AsmEvalF,

    Precedence : UBYTE,
    NoRightSide : UBYTE,
END

FN (AsmOperatorF) AsmParseInverse (
    IN operator : ^AsmOperator,
    IN node : ^AsmExpressionNode,
)

    // Indicate that this is a unary inverse and not a subtraction.

    node^.Token.Subtype = TOKEN_INVERSE
END

AsmLeftOperators : AsmOperator[TOKEN_SUBTYPE_MAX] = {
    [TOKEN_MINUS] = {
        [Precedence] = 24,
        [ParseFunc] = &AsmParseInverse,
    },
    [TOKEN_BITNOT] = {
        [Precedence] = 24,
    },
}

#MACRO AsmEvalGenerate ( name, operator ) [
    FN (AsmEvalF) name (
        IN node : ^AsmExpressionNode,
        OUT value : UWORD,
        OUT refsymbol : ^LexSymbol,
    ) : UWORD

        left : UWORD
        right : UWORD

        IF NOT AsmEvaluateNode (
            node^.Body.Operator.Left, // node
            OUT left, // value
            OUT refsymbol, // refsymbol
        ) THEN
            RETURN FALSE
        END

        rsymbol : ^LexSymbol

        IF NOT AsmEvaluateNode (
            node^.Body.Operator.Right, // node
            OUT right, // value
            OUT rsymbol, // refsymbol
        ) THEN
            RETURN FALSE
        END

        IF NOT refsymbol THEN
            refsymbol = rsymbol

        ELSEIF rsymbol THEN
            // Check for compatibility. Neither may be extern. If they aren't,
            // they must also be in the same section.

            IF refsymbol^.Visibility == LABEL_EXTERN OR
                rsymbol^.Visibility == LABEL_EXTERN THEN

                LexTokenError ( &node^.Token,
                    "Can't operate on multiple extern labels", 0, 0, 0 )
            END 

            IF refsymbol^.Section != rsymbol^.Section THEN
                LexTokenError ( &node^.Token,
                    "Labels have incompatible sections", 0, 0, 0 )
            END
        END

        value = left operator right

        RETURN TRUE
    END
]

AsmEvalGenerate ( AsmEvalMultiply, * )
AsmEvalGenerate ( AsmEvalDivide, / )
AsmEvalGenerate ( AsmEvalModulo, % )
AsmEvalGenerate ( AsmEvalPlus, + )
AsmEvalGenerate ( AsmEvalMinus, - )
AsmEvalGenerate ( AsmEvalLeftShift, << )
AsmEvalGenerate ( AsmEvalRightShift, >> )
AsmEvalGenerate ( AsmEvalBitAnd, & )
AsmEvalGenerate ( AsmEvalBitXor, $ )
AsmEvalGenerate ( AsmEvalBitOr, | )

FN (AsmEvalF) AsmEvalBitNot (
    IN node : ^AsmExpressionNode,
    OUT value : UWORD,
    OUT refsymbol : ^LexSymbol,
) : UWORD

    left : UWORD

    IF NOT AsmEvaluateNode (
        node^.Body.Operator.Left, // node
        OUT left, // value
        OUT refsymbol, // refsymbol
    ) THEN
        RETURN FALSE
    END

    value = ~left

    RETURN TRUE
END

FN (AsmEvalF) AsmEvalInverse (
    IN node : ^AsmExpressionNode,
    OUT value : UWORD,
    OUT refsymbol : ^LexSymbol,
) : UWORD

    left : UWORD

    IF NOT AsmEvaluateNode (
        node^.Body.Operator.Left, // node
        OUT left, // value
        OUT refsymbol, // refsymbol
    ) THEN
        RETURN FALSE
    END

    value = -left

    RETURN TRUE
END

AsmOperators : AsmOperator[TOKEN_SUBTYPE_MAX] = {
    [TOKEN_MUL] = {
        [Precedence] = 20,
        [EvalFunc] = &AsmEvalMultiply,
    },
    [TOKEN_DIVIDE] = {
        [Precedence] = 20,
        [EvalFunc] = &AsmEvalDivide,
    },
    [TOKEN_MODULO] = {
        [Precedence] = 20,
        [EvalFunc] = &AsmEvalModulo,
    },
    [TOKEN_PLUS] = {
        [Precedence] = 19,
        [EvalFunc] = &AsmEvalPlus,
    },
    [TOKEN_MINUS] = {
        [Precedence] = 19,
        [EvalFunc] = &AsmEvalMinus,
    },
    [TOKEN_LEFTSHIFT] = {
        [Precedence] = 18,
        [EvalFunc] = &AsmEvalLeftShift,
    },
    [TOKEN_RIGHTSHIFT] = {
        [Precedence] = 18,
        [EvalFunc] = &AsmEvalRightShift,
    },
    [TOKEN_BITAND] = {
        [Precedence] = 17,
        [EvalFunc] = &AsmEvalBitAnd,
    },
    [TOKEN_BITXOR] = {
        [Precedence] = 16,
        [EvalFunc] = &AsmEvalBitXor,
    },
    [TOKEN_BITOR] = {
        [Precedence] = 15,
        [EvalFunc] = &AsmEvalBitOr,
    },

    // Left-ops

    [TOKEN_BITNOT] = {
        [EvalFunc] = &AsmEvalBitNot,
    },
    [TOKEN_INVERSE] = {
        [EvalFunc] = &AsmEvalInverse,
    }
}

FN AsmEvaluateNode (
    IN node : ^AsmExpressionNode,
    OUT value : UWORD,
    OUT refsymbol : ^LexSymbol,
) : UWORD

    // Evaluate the expression tree rooted at the given node.
    // The return value is TRUE if the expression could be evaluated right now,
    // otherwise FALSE.

    IF node^.Type == AST_OPERATOR THEN
        RETURN AsmOperators[node^.Token.Subtype].EvalFunc (
            node, // node
            OUT value, // value
            OUT refsymbol, // refsymbol
        )
    END

    IF node^.Type == AST_LABEL THEN
        IF node^.Body.Label^.Type == SYM_FORWARD_LABEL THEN
            // Can't be evaluated yet.

            RETURN FALSE
        END

        value = node^.Body.Label^.MemoryOffset
        refsymbol = node^.Body.Label

        RETURN TRUE
    END

    IF node^.Type == AST_CONSTANT THEN
        value = node^.Body.Constant
        refsymbol = NULLPTR

        RETURN TRUE
    END

    TlInternalError ( "Weird node type", node^.Type, 0, 0 )
END

// FORWARD
EXTERN FN AsmParseExpression (
    IN minprecedence : UWORD,
) : ^AsmExpressionNode

FN AsmParseAtom () : ^AsmExpressionNode

    // Parse an atom. This is an "atomic" part of an expression, such as a
    // single constant number or identifier.

    atomnode : ^AsmExpressionNode

    token : LexToken

    LexGetToken ( &token )

    IF token.Type == TOKEN_NUMBER THEN
        // This is a constant number.

        atomnode = AsmCreateExpressionNode (
            AST_CONSTANT, // type
            &token, // token
        )

        atomnode^.Body.Constant = CAST token.Payload TO UWORD

    ELSEIF token.Type == TOKEN_IDENTIFIER THEN
        // This is a global label.

        symbol := CAST token.Payload TO ^LexSymbol

        IF token.Subtype == TOKEN_IDENTIFIER_NEW THEN
            // First sighting of the global label.
            // Initialize it as a forward label.

            AsmInitializeLabel (
                &token, // errtoken
                symbol, // symbol
                TRUE, // global
                TRUE, // forward
            )

        ELSEIF symbol^.Type != SYM_LABEL AND
            symbol^.Type != SYM_FORWARD_LABEL THEN

            LexTokenError ( &token, "Expected a label name", 0, 0, 0 )
        END

        atomnode = AsmCreateExpressionNode (
            AST_LABEL, // type
            &token, // token
        )

        // If there's a dot after this, then we want a local label.

        IF LexMatchToken (
            &token, // token
            TOKEN_DOT, // type
            0, // subtype
        ) THEN
            // Yep. Collect local label name.

            IF NOT symbol^.LocalLabelScope THEN
                LexTokenError ( &token,
                    "This label has no local labels", 0, 0, 0 )
            END

            oldscope := LexEnterScope ( symbol^.LocalLabelScope )

            IF NOT LexMatchToken (
                &token, // token
                TOKEN_IDENTIFIER, // type
                0, // subtype
            ) THEN
                LexTokenError ( &token, "Expected local label name", 0, 0, 0 )
            END

            symbol = CAST token.Payload TO ^LexSymbol

            IF token.Subtype == TOKEN_IDENTIFIER_NEW THEN
                // First sighting of the local label.
                // Initialize it as a forward label.

                AsmInitializeLabel (
                    &token, // errtoken
                    symbol, // symbol
                    FALSE, // global
                    TRUE, // forward
                )
            END

            LexResetScope ( oldscope )
        END

        atomnode^.Body.Label = symbol

    ELSEIF token.Type == TOKEN_DOT THEN
        // This is a local label of the current global label.

        IF NOT AsmLastLabel THEN
            LexTokenError ( &token,
                "Local label without corresponding global label", 0, 0, 0 )
        END

        oldscope := LexEnterScope ( AsmLastLabel^.LocalLabelScope )

        IF NOT LexMatchToken (
            &token, // token
            TOKEN_IDENTIFIER, // type
            0, // subtype
        ) THEN
            LexTokenError ( &token, "Expected local label name", 0, 0, 0 )
        END

        symbol := CAST token.Payload TO ^LexSymbol

        IF token.Subtype == TOKEN_IDENTIFIER_NEW THEN
            // First sighting of the local label.
            // Initialize it as a forward label.

            AsmInitializeLabel (
                &token, // errtoken
                symbol, // symbol
                FALSE, // global
                TRUE, // forward
            )
        END

        LexResetScope ( oldscope )

        atomnode = AsmCreateExpressionNode (
            AST_LABEL, // type
            &token, // token
        )

        atomnode^.Body.Label = symbol

    ELSEIF token.Type == TOKEN_LPAREN THEN
        // This is a parenthesized expression.

        atomnode = AsmParseExpression ( 0 )

        // Collect the right parenthesis.

        IF NOT LexMatchToken (
            &token, // token
            TOKEN_RPAREN, // type
            0, // subtype
        ) THEN
            LexTokenError ( &token, "Expected a right parenthesis.", 0, 0, 0 )
        END

    ELSEIF token.Type == TOKEN_OPER THEN
        // This must be a left-operator. Look it up in the table.
        // The operator type stays as the subtype of the token.

        operator := &AsmLeftOperators[token.Subtype]

        IF NOT operator^.Precedence THEN
            LexTokenError ( &token, "Expected a left operator.", 0, 0, 0 )
        END

        atomnode = AsmCreateExpressionNode (
            AST_OPERATOR, // type
            &token, // token
        )

        IF NOT operator^.NoRightSide THEN
            // Actually the left side but who's checking.

            atomnode^.Body.Operator.Left =
                AsmParseExpression ( operator^.Precedence )
        END

        IF operator^.ParseFunc THEN
            operator^.ParseFunc (
                operator, // operator
                atomnode, // node
            )
        END

    ELSE
        LexTokenError ( &token, "Expected an atom", 0, 0, 0 )
    END

    RETURN atomnode
END

FN AsmParseExpression (
    IN minprecedence : UWORD,
) : ^AsmExpressionNode

    // Parse an expression.

    atomnode := AsmParseAtom ()

    optoken : LexToken

    WHILE LexMatchToken (
        &optoken, // token
        TOKEN_OPER, // type
        0, // subtype
    ) DO
        operator := &AsmOperators[optoken.Subtype]

        IF NOT operator^.Precedence THEN
            // This must have been a left operator, which we didn't expect.

            LexTokenError ( &optoken, "Unexpected left operator", 0, 0, 0 )
        END

        IF operator^.Precedence < minprecedence THEN
            // Put the operator token back.

            LexPutbackToken ( &optoken )

            BREAK
        END

        node := AsmCreateExpressionNode (
            AST_OPERATOR, // type
            &optoken, // token
        )

        node^.Body.Operator.Left = atomnode

        IF NOT operator^.NoRightSide THEN
            right := AsmParseExpression (
                operator^.Precedence + 1, // minprecedence
            )

            node^.Body.Operator.Right = right
        END

        IF operator^.ParseFunc THEN
            operator^.ParseFunc (
                operator, // operator
                node, // node
            )
        END

        atomnode = node
    END

    RETURN atomnode
END

FNPTR AsmDirectiveF (
    IN errtoken : ^LexToken,
)

FN (AsmDirectiveF) AsmParseSection (
    IN errtoken : ^LexToken,
)

    // Parse the section directive, which selects the current section.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Unexpected token", 0, 0, 0 )
    END

    symbol := CAST token.Payload TO ^LexSymbol

    IF symbol^.Type != SYM_UNINITIALIZED AND
        symbol^.Type != SYM_SECTION THEN

        LexTokenError ( &token, "Expected section name", 0, 0, 0 )
    END

    section := symbol^.Section

    IF symbol^.Type == SYM_UNINITIALIZED THEN
        // Initialize it!

        symbol^.Type = SYM_SECTION

        status := TlBumpAlloc (
            SIZEOF AsmSection, // bytes
            OUT section, // ptr
        )

        IF status THEN
            TlInternalError ( "Failed to allocate section", 0, 0, 0 )
        END

        symbol^.Section = section

        // Initialize the section structure.

        TlInitializeList ( &section^.ElementListHead )
        TlInitializeList ( &section^.RelocationListHead )

        section^.Name = symbol^.Name

        section^.FileOffset = 0
        section^.MemoryOffset = 0

        section^.DataBuffer = NULLPTR

        TlInsertAtTailList (
            &AsmSectionListHead, // head
            &section^.SectionListEntry, // entry
        )
    END

    AsmCurrentSection = section
    AsmLastLabel = NULLPTR
END

FN (AsmDirectiveF) AsmParseDb (
    IN errtoken : ^LexToken,
)

    // Parse the DB directive, which places a byte in the section.

    expr := AsmParseAtom ()

    elem := AsmCreateElement (
        errtoken, // token
        1, // size
    )

    elem^.Body.Data = expr
END

FN (AsmDirectiveF) AsmParseDi (
    IN errtoken : ^LexToken,
)

    // Parse the DI directive, which places an int in the section.

    expr := AsmParseAtom ()

    elem := AsmCreateElement (
        errtoken, // token
        2, // size
    )

    elem^.Body.Data = expr
END

FN (AsmDirectiveF) AsmParseDl (
    IN errtoken : ^LexToken,
)

    // Parse the DL directive, which places a long in the section.

    expr := AsmParseAtom ()

    elem := AsmCreateElement (
        errtoken, // token
        4, // size
    )

    elem^.Body.Data = expr
END

FN (AsmDirectiveF) AsmParseDq (
    IN errtoken : ^LexToken,
)

    // Parse the DQ directive, which places a quad in the section.

    expr := AsmParseAtom ()

    elem := AsmCreateElement (
        errtoken, // token
        8, // size
    )

    elem^.Body.Data = expr
END

FN (AsmDirectiveF) AsmParseDp (
    IN errtoken : ^LexToken,
)

    // Parse the DP directive, which places a pointer in the section.

    expr := AsmParseAtom ()

    elem := AsmCreateElement (
        errtoken, // token
        AsmTargetInfo^.PointerSize, // size
    )

    elem^.Body.Data = expr

    // Could cause a relocation, so note that.

    elem^.RelocationType = XLO_RELOC_PTR
END

FN (AsmDirectiveF) AsmParseDefine (
    IN errtoken : ^LexToken,
)

    // Parse the DEFINE directive, which defines a global label with a specific
    // constant value.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a label name", 0, 0, 0 )
    END

    symbol := CAST token.Payload TO ^LexSymbol

    IF symbol^.Type != SYM_UNINITIALIZED AND
        symbol^.Type != SYM_FORWARD_LABEL THEN

        LexTokenError ( &token, "Expected a new label name", 0, 0, 0 )
    END

    valuenode := AsmParseAtom ()

    value : UWORD
    refsymbol : ^LexSymbol

    IF NOT AsmEvaluateNode (
        valuenode, // node
        OUT value, // value
        OUT refsymbol, // refsymbol
    ) THEN
        LexTokenError ( &valuenode^.Token,
            "Couldn't evaluate expression", 0, 0, 0 )
    END

    symbol^.Type = SYM_LABEL
    symbol^.MemoryOffset = value
    symbol^.FileOffset = value

    IF refsymbol THEN
        symbol^.Section = refsymbol^.Section

    ELSE
        symbol^.Section = NULLPTR
    END
END

FN (AsmDirectiveF) AsmParseIncBin (
    IN errtoken : ^LexToken,
)

    // Parse the INCBIN directive, which encodes a binary file directly into the
    // current section.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a string", 0, 0, 0 )
    END

    // All we do at this stage is remember the path and figure out the size of
    // the file.

    string := CAST token.Payload TO ^LexInternedString

    stat : TlStatRecord

    status := TlStatFile (
        string^.DynamicBuffer.Buffer, // path
        &stat, // statrecord
    )

    IF status THEN
        LexTokenError ( &token, "Failed to open file", 0, 0, 0 )
    END

    elem := AsmCreateElement (
        errtoken, // token
        stat.SizeInBytes, // size
    )

    elem^.Body.IncBin.Path = string^.DynamicBuffer.Buffer
    elem^.Body.IncBin.Size = stat.SizeInBytes
END

FN (AsmDirectiveF) AsmParseBytes (
    IN errtoken : ^LexToken,
)

    // Parse the BYTES directive, which inserts a specified number of the
    // specified byte into the current section.

    howmanynode := AsmParseAtom ()
    whichnode := AsmParseAtom ()

    howmany : UWORD
    which : UWORD
    dumpster : ^VOID

    IF NOT AsmEvaluateNode (
        howmanynode, // node
        OUT howmany, // value
        OUT dumpster, // refsymbol
    ) THEN
        LexTokenError ( &howmanynode^.Token,
            "Incalculable expression", 0, 0, 0 )
    END

    IF NOT AsmEvaluateNode (
        whichnode, // node
        OUT which, // value
        OUT dumpster, // refsymbol
    ) THEN
        LexTokenError ( &whichnode^.Token,
            "Incalculable expression", 0, 0, 0 )
    END

    elem := AsmCreateElement (
        errtoken, // token
        howmany, // size
    )

    elem^.Body.BytesChunk.Count = howmany
    elem^.Body.BytesChunk.Byte = which
END

FN (AsmDirectiveF) AsmParseGlobal (
    IN errtoken : ^LexToken,
)

    // Parse the GLOBAL directive, which sets a label as global.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a label name", 0, 0, 0 )
    END

    symbol := CAST token.Payload TO ^LexSymbol

    IF symbol^.Type != SYM_LABEL THEN
        LexTokenError ( &token, "Expected a label name", 0, 0, 0 )
    END

    symbol^.Visibility = LABEL_GLOBAL
END

FN (AsmDirectiveF) AsmParseExport (
    IN errtoken : ^LexToken,
)

    // Parse the EXPORT directive, which sets a label as export.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a label name", 0, 0, 0 )
    END

    symbol := CAST token.Payload TO ^LexSymbol

    IF symbol^.Type != SYM_LABEL THEN
        LexTokenError ( &token, "Expected a label name", 0, 0, 0 )
    END

    symbol^.Visibility = LABEL_EXPORT
END

FN (AsmDirectiveF) AsmParseExtern (
    IN errtoken : ^LexToken,
)

    // Parse the EXTERN directive, which defines an extern label.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_IDENTIFIER, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a label name", 0, 0, 0 )
    END

    symbol := CAST token.Payload TO ^LexSymbol

    IF symbol^.Type != SYM_UNINITIALIZED THEN
        LexTokenError ( &token, "Expected a new label name", 0, 0, 0 )
    END

    symbol^.Type = SYM_LABEL
    symbol^.Visibility = LABEL_EXTERN
END

FN (AsmDirectiveF) AsmParseDs (
    IN errtoken : ^LexToken,
)

    // Parse the DS directive, which encodes a string directly into the current
    // section.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a string", 0, 0, 0 )
    END

    string := CAST token.Payload TO ^LexInternedString

    elem := AsmCreateElement (
        errtoken, // token
        string^.DynamicBuffer.Count - 1, // size
    )

    elem^.Body.String = &string^.DynamicBuffer
END

FN (AsmDirectiveF) AsmParseAlign (
    IN errtoken : ^LexToken,
)

    // Parse the ALIGN directive, which aligns the current offset up to the
    // next multiple of the argument.

    howmanynode := AsmParseAtom ()

    howmany : UWORD

    dumpster : ^VOID

    IF NOT AsmEvaluateNode (
        howmanynode, // node
        OUT howmany, // value
        OUT dumpster, // refsymbol
    ) THEN
        LexTokenError ( &howmanynode^.Token,
            "Incalculable expression", 0, 0, 0 )
    END

    po2 := TlIsPowerOfTwo ( howmany )

    IF po2 == -1 THEN
        LexTokenError ( &howmanynode^.Token,
            "Alignment must be a power of two", 0, 0, 0 )
    END

    AsmEnsureSection ( errtoken )

    oldoff := AsmCurrentSection^.MemoryOffset
    newoff := oldoff + (howmany - 1) & ~(howmany - 1)
    diff := newoff - oldoff

    AsmCurrentSection^.MemoryOffset = newoff
    AsmCurrentSection^.FileOffset += diff

    IF diff THEN
        elem := AsmCreateElement (
            errtoken, // token
            0, // size
        )

        elem^.ErrorToken.Subtype = TOKEN_BYTES

        elem^.Body.BytesChunk.Count = diff
        elem^.Body.BytesChunk.Byte = 0
    END
END

AsmDirectivesTable : AsmDirectiveF[TOKEN_SUBTYPE_MAX] = {
    [TOKEN_SECTION] = &AsmParseSection,
    [TOKEN_DB] = &AsmParseDb,
    [TOKEN_DI] = &AsmParseDi,
    [TOKEN_DL] = &AsmParseDl,
    [TOKEN_DQ] = &AsmParseDq,
    [TOKEN_DP] = &AsmParseDp,
    [TOKEN_DEFINE] = &AsmParseDefine,
    [TOKEN_INCBIN] = &AsmParseIncBin,
    [TOKEN_BYTES] = &AsmParseBytes,
    [TOKEN_GLOBAL] = &AsmParseGlobal,
    [TOKEN_EXPORT] = &AsmParseExport,
    [TOKEN_EXTERN] = &AsmParseExtern,
    [TOKEN_DS] = &AsmParseDs,
    [TOKEN_ALIGN] = &AsmParseAlign,
}

FN AsmParseElement () : UWORD

    // Parse an assembly element.

    token : LexToken
    errtoken : LexToken

    LexGetToken ( &token )

    IF token.Type == TOKEN_IDENTIFIER THEN
        // Global label.

        IF NOT LexMatchToken (
            &errtoken, // token
            TOKEN_COLON, // type
            0, // subtype
        ) THEN
            LexTokenError ( &errtoken,
                "Expected a colon after label name", 0, 0, 0 )
        END

        AsmInitializeLabel (
            &token, // errtoken
            CAST token.Payload TO ^LexSymbol, // symbol
            TRUE, // global
            FALSE, // forward
        )

    ELSEIF token.Type == TOKEN_DOT THEN
        // Local label or directive.

        // Switch to the scope of the last global label, so that if this is a
        // local label identifier, it's placed in the correct symbol table.
        
        oldscope : ^TlSymbolTable

        IF AsmLastLabel THEN
            oldscope = LexEnterScope ( AsmLastLabel^.LocalLabelScope )
        END

        LexGetToken ( &token )

        // Now switch back.
        
        IF AsmLastLabel THEN
            LexResetScope ( oldscope )
        END

        IF token.Type == TOKEN_IDENTIFIER THEN
            // Local label.

            IF NOT LexMatchToken (
                &errtoken, // token
                TOKEN_COLON, // type
                0, // subtype
            ) THEN
                LexTokenError ( &errtoken,
                    "Expected a colon after label name", 0, 0, 0 )
            END

            AsmInitializeLabel (
                &token, // errtoken
                CAST token.Payload TO ^LexSymbol, // symbol
                FALSE, // global
                FALSE, // forward
            )
        
        ELSEIF token.Type == TOKEN_DIRECTIVE THEN
            // Directive. Dispatch to the handler.

            AsmDirectivesTable[token.Subtype] (
                &token, // errtoken
            )
        END

    ELSEIF token.Type == TOKEN_INSTRUCTION THEN
        // Dispatch to target-specific parser.

        AsmEnsureSection ( &token )

        AsmTargetInfo^.ParseFunc ( &token )

    ELSEIF token.Type == TOKEN_EOF THEN
        RETURN FALSE

    ELSEIF token.Type == TOKEN_NEWLINE THEN
        // Skip. Newline tokens are just to terminate expressions.

        RETURN TRUE

    ELSE
        LexTokenError ( &token, "Unexpected token", 0, 0, 0 )
    END

    RETURN TRUE
END

FN AsmParse ()

    // Parse an assembly program.
    //
    // An assembly program consists of a sequence of global labels, local
    // labels, directives, and machine instructions. We parse these all in the
    // generic code, except for instructions, which we dispatch to target-
    // specific code to parse for maximum flexibility (and speed).
    //
    // The result of parsing is a chain of "elements" represented by the
    // AsmElement structure. Labels are not represented in this chain, since
    // an AsmElement corresponds to a data element that will be present in the
    // final output.
    //
    // Note also that this chain is per-section. The section directive can be
    // used to switch between sections on a whim, and we need to keep track of
    // what actually ends up where.
    //
    // Global labels: TOKEN_IDENTIFIER TOKEN_COLON
    // Local labels: TOKEN_DOT TOKEN_IDENTIFIER TOKEN_COLON
    // Directives: TOKEN_DOT TOKEN_DIRECTIVE [arguments ...]
    // Instructions: TOKEN_INSTRUCTION [arguments ...]

    TlInitializeList ( &AsmSectionListHead )

    WHILE AsmParseElement () DO
        // Keep going...
    END
END