#INCLUDE "<inc>/Frontend.hjk"

#DEFINE LEX_PUTBACK_STACK_DEPTH 32
#DEFINE LEX_BUFFER_SIZE 8192
#DEFINE LEX_DIRECTIVE_MAX 64

ENUM LexTokenType : UBYTE
    TOKEN_ANY,

    TOKEN_DIRECTIVE, // subtype is a directive
    TOKEN_INSTRUCTION, // subtype is an instruction
    TOKEN_AUX, // subtype is target-specific
    TOKEN_REGISTER,
    TOKEN_CONTROL_REGISTER,
    TOKEN_FP_REGISTER,
    TOKEN_SIZE_SPECIFIER,

    TOKEN_OPER, // subtype is operator type

    TOKEN_LPAREN,
    TOKEN_RPAREN,
    TOKEN_LBRACKET,
    TOKEN_RBRACKET,
    TOKEN_COLON,
    TOKEN_LBRACE,
    TOKEN_RBRACE,
    TOKEN_COMMA,
    TOKEN_DOT,
    TOKEN_NEWLINE,
    TOKEN_EQUALS,

    TOKEN_IDENTIFIER, // payload is a symbol table entry pointer
    TOKEN_STRING, // payload is a pointer to a LexStringContents structure
    TOKEN_NUMBER, // payload is the number value

    TOKEN_LABEL, // virtual

    TOKEN_EOF,
    TOKEN_TYPE_MAX, // MUST be at the end
END

ENUM LexTokenSubtype : UBYTE
    TOKEN_SUBTYPE_ANY,

    TOKEN_SECTION,     // directive
    TOKEN_DB,          // directive
    TOKEN_DI,          // directive
    TOKEN_DL,          // directive
    TOKEN_DQ,          // directive
    TOKEN_DP,          // directive
    TOKEN_DEFINE,      // directive
    TOKEN_INCBIN,      // directive
    TOKEN_BYTES,       // directive
    TOKEN_GLOBAL,      // directive
    TOKEN_EXPORT,      // directive
    TOKEN_EXTERN,      // directive
    TOKEN_DS,          // directive
    TOKEN_ALIGN,       // directive

    TOKEN_BITAND,      // operator
    TOKEN_BITOR,       // operator
    TOKEN_PLUS,        // operator
    TOKEN_MINUS,       // operator
    TOKEN_DIVIDE,      // operator
    TOKEN_MODULO,      // operator
    TOKEN_BITXOR,      // operator
    TOKEN_LEFTSHIFT,   // operator
    TOKEN_RIGHTSHIFT,  // operator
    TOKEN_BITNOT,      // operator
    TOKEN_MUL,         // operator

    TOKEN_INVERSE,     // virtual operator

    TOKEN_IDENTIFIER_NEW,
    TOKEN_IDENTIFIER_FOUND,

    TOKEN_SUBTYPE_MAX, // MUST be at the end of the token subtypes
END

ENUM LexCharBehavior : UBYTE
    CHAR_NORMAL, // guaranteed to be zero
    CHAR_SPLIT,
    CHAR_COALESCE,
    CHAR_WHITESPACE,
    CHAR_EOF,
END

FNPTR LexGetCharacterF () : UBYTE

STRUCT LexInternedString
    Entry : TlHashTableEntry, // MUST be at the beginning
    DynamicBuffer : TlDynamicBuffer,
    Section : ^LexSection,
END

STRUCT LexToken
    // NOTE: There's an assumption that a pointer for the host architecture of
    // the compiler is large enough to contain the biggest integer that is
    // directly representable by the set of target architectures. I.e., a 32-bit
    // host will be able to build for any of the 32-bit architectures, and its
    // 32-bit Payload pointer will be large enough to store 32-bit integers. A
    // 64-bit host will be able to build for any of the 32-bit architectures,
    // plus the 64-bit architectures, and its pointer will be large enough to
    // store 64-bit integers here.

    Payload : ^VOID,
    FileBlock : ^FeFileBlock,

    LineNumber : ULONG,
    LinePosition : ULONG,

    Type : LexTokenType,
    Subtype : LexTokenSubtype,
    TypeContext : UBYTE,
    WhitespaceBefore : UBYTE,
END

STRUCT LexStream
    Previous : ^LexStream,
    FileBlock : ^FeFileBlock,
    FileHandle : ^VOID,

    Buffer : ^UBYTE,
    BufferSize : ULONG,
    ValidLength : ULONG,
    BufferPosition : ULONG,

    LineNumber : ULONG,
    LinePosition : ULONG,

    Macro : ^LexMacro,
    LastWasNewline : UBYTE,

    LastScope : ^TlSymbolTable,
    LastMacroScope : ^TlSymbolTable,

    Backslash : UBYTE,
    InString : UBYTE,
    InLiteral : UBYTE,
    Putback : UBYTE,
    CoalescePutback : UBYTE,
END

ENUM LexSymbolType : UBYTE
    SYM_UNINITIALIZED,
    SYM_LABEL,
    SYM_SECTION,

    // The "forward" types signify a symbol that has been used before it was
    // defined, in a context where it was okay to do so. In fact, it's okay to
    // never declare these as long as they weren't referenced in the source
    // program.

    SYM_FORWARD_LABEL,
END

ENUM AsmLabelVisibility : UBYTE
    LABEL_LOCAL,
    LABEL_GLOBAL,
    LABEL_EXPORT,
    LABEL_EXTERN,

    LABEL_VIS_MAX,
END

STRUCT LexSymbol
    Entry : TlHashTableEntry, // MUST be at the beginning
    Name : ^UBYTE,

    // Parser private stuff in a symbol.

    SymbolListEntry : TlListEntry,

    LocalLabelScope : ^TlSymbolTable,

    Section : ^AsmSection,

    FileOffset : UWORD,
    MemoryOffset : UWORD,

    Index : ULONG,

    Type : LexSymbolType,
    Visibility : AsmLabelVisibility,
    Used : UBYTE,
END

STRUCT LexMacro
    Entry : TlHashTableEntry, // MUST be at the beginning

    NameToken : LexToken, // for error reporting
    Contents : TlDynamicBuffer,
    Name : UBYTE[LEX_DIRECTIVE_MAX],

    ResumeScope : ^TlSymbolTable,
    ResumeMacroScope : ^TlSymbolTable,

    ArgListHead : ^LexMacroArgument,
    IsFunctionMacro : UBYTE,
    IsArgumentMacro : UBYTE,
END

STRUCT LexMacroArgument
    Entry : TlHashTableEntry, // MUST be at the beginning
    Next : ^LexMacroArgument,

    Name : UBYTE[LEX_DIRECTIVE_MAX],
END

EXTERN LexCharTreatment : LexCharBehavior[256]

EXTERN LexCurrentStream : ^LexStream
EXTERN LexCurrentMacroScope : ^TlSymbolTable
EXTERN LexRootScope : ^TlSymbolTable
EXTERN LexCurrentScope : ^TlSymbolTable
EXTERN LexFalseCount : ULONG

EXTERN LexMacroDepth : ULONG

EXTERN FN LexInitialize ()

EXTERN FN LexCreateSymbolTable (
    IN outerscope : ^TlSymbolTable,
) : ^TlSymbolTable

EXTERN FN LexInitializePreprocessor ()

EXTERN FN LexDefineMacroFromArgumentString (
    IN arg : ^UBYTE,
)

EXTERN FN LexExpandMacro (
    IN macro : ^LexMacro,
    IN token : ^LexToken,
)

EXTERN FN LexInitializeStreamZone ()

EXTERN FN LexInitializeStream (
    IN stream : ^LexStream,
    IN macro : ^LexMacro,
)

EXTERN FN LexUninitializeStream (
    IN stream : ^LexStream,
)

EXTERN FN LexAllocateStream () : ^LexStream

EXTERN FN LexFreeStream (
    IN stream : ^LexStream,
)

EXTERN FN LexPushStream (
    IN stream : ^LexStream,
)

EXTERN FN LexPopStream () : ^LexStream

EXTERN FN LexInitializeFileStream (
    IN stream : ^LexStream,
    IN fileblock : ^FeFileBlock,
    IN handle : ^VOID,
)

EXTERN FN LexCreateFileStream (
    IN fileblock : ^FeFileBlock,
    IN handle : ^VOID,
) : ^LexStream

EXTERN FN (LexGetCharacterF) LexStreamNextCharacter () : UBYTE

EXTERN FN LexParseDirective ()

EXTERN FN LexEnterScope (
    IN scope : ^TlSymbolTable,
) : ^TlSymbolTable

EXTERN FN LexResetScope (
    IN scope : ^TlSymbolTable,
) : ^TlSymbolTable

EXTERN FN LexLeaveScope ()

EXTERN FN LexCopyToken (
    IN dest : ^LexToken,
    IN src : ^LexToken,
)

EXTERN FN LexGetToken (
    IN token : ^LexToken,
)

EXTERN FN LexPutbackToken (
    IN token : ^LexToken,
)

EXTERN FN LexMatchToken (
    IN token : ^LexToken,
    IN type : LexTokenType,
    IN subtype : LexTokenSubtype,
) : UBYTE

EXTERN FN LexError (
    IN token : ^LexToken,
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN LexCrunchNumber (
    IN token : ^LexToken,
    IN buffer : ^UBYTE,
) : UWORD

EXTERN FN LexInsertKeyword (
    IN name : ^UBYTE,
    IN type : LexTokenType,
    IN subtype : LexTokenSubtype,
    IN context : UBYTE,
)