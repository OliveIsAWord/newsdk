#INCLUDE "<inc>/Lexer.hjk"

STRUCT AsmIncBinBody
    Path : ^UBYTE,
    Size : UWORD,
END

STRUCT AsmBytesChunkBody
    Count : UWORD,
    Byte : UBYTE,
END

ENUM AsmRelocationType : UBYTE
    XLO_RELOC_NONE = 0,

    XLO_RELOC_PTR = 1,

    XLO_RELOC_XR17032_ABSJ = 2,
    XLO_RELOC_XR17032_LA = 3,
    XLO_RELOC_XR17032_FAR_INT = 4,
    XLO_RELOC_XR17032_FAR_LONG = 5,

    XLO_RELOC_MAX,
END

#INCLUDE "../xr17032/XrInstruction.hjk"

UNION AsmElementBody
    Data : ^AsmExpressionNode,
    IncBin : AsmIncBinBody,
    BytesChunk : AsmBytesChunkBody,
    String : ^TlDynamicBuffer,

    Xr : XrInstructionBody,
END

STRUCT AsmElement
    Entry : TlListEntry,

    ErrorToken : LexToken,

    Body : AsmElementBody,

    FileOffset : UWORD,
    MemoryOffset : UWORD,

    RelocationType : AsmRelocationType,
END

STRUCT AsmSection
    Name : ^UBYTE,

    SectionListEntry : TlListEntry,

    ElementListHead : TlListEntry,

    RelocationListHead : TlListEntry,

    DataBuffer : ^UBYTE,

    // Current offsets. File offset increases monotonically and reflects the
    // placement of the data within the file. Memory offset can be set by .org
    // and other things.

    FileOffset : UWORD,
    MemoryOffset : UWORD,
END

STRUCT AsmRelocation
    Entry : TlListEntry,

    Offset : UWORD,

    Type : AsmRelocationType,
END

ENUM AsmExpressionNodeType : UBYTE
    AST_CONSTANT,
    AST_LABEL,
    AST_OPERATOR,
END

STRUCT AsmOperatorBody
    Left : ^AsmExpressionNode,
    Right : ^AsmExpressionNode,
END

UNION AsmExpressionBody
    Constant : UWORD,
    Label : ^LexSymbol,
    Operator : AsmOperatorBody,
END

ENUM AsmWarnLevel : UWORD
    EVAL_NO_WARNING,
    EVAL_WARN,
    EVAL_ERROR,
END

STRUCT AsmExpressionNode
    Token : LexToken,

    Body : AsmExpressionBody,

    WarnLevel : AsmWarnLevel,

    Type : AsmExpressionNodeType,
END

EXTERN FN AsmConsumeComma ()

EXTERN FN AsmCreateElement (
    IN errtoken : ^LexToken,
    IN size : UWORD,
) : ^AsmElement

EXTERN FN AsmEvaluateNode (
    IN node : ^AsmExpressionNode,
    OUT value : UWORD,
    OUT refsymbol : ^LexSymbol,
) : UWORD

EXTERN FN AsmCreateExpressionNode (
    IN type : AsmExpressionNodeType,
    IN token : ^LexToken,
    IN warnlevel : AsmWarnLevel,
) : ^AsmExpressionNode

EXTERN FN AsmCreateOperation (
    IN operator : LexTokenSubtype,
    IN left : ^AsmExpressionNode,
    IN right : ^AsmExpressionNode,
    IN warnlevel : AsmWarnLevel,
) : ^AsmExpressionNode

EXTERN FN AsmCreateOperationWithConstant (
    IN operator : LexTokenSubtype,
    IN left : ^AsmExpressionNode,
    IN constant : UWORD,
    IN warnlevel : AsmWarnLevel,
) : ^AsmExpressionNode

EXTERN FN AsmCreateOperationLeftConstant (
    IN operator : LexTokenSubtype,
    IN constant : UWORD,
    IN right : ^AsmExpressionNode,
    IN warnlevel : AsmWarnLevel,
) : ^AsmExpressionNode

EXTERN FN AsmParseAtom () : ^AsmExpressionNode

EXTERN AsmCurrentSection : ^AsmSection

EXTERN AsmSectionListHead : TlListEntry

#MACRO AsmAdvanceSection ( bytes ) [
    AsmCurrentSection^.FileOffset += (bytes)
    AsmCurrentSection^.MemoryOffset += (bytes)
]

#MACRO AsmEnsureSection ( errtoken ) [
    IF NOT AsmCurrentSection THEN
        LexTokenError ( (errtoken), "No section declared", 0, 0, 0 )
    END
]