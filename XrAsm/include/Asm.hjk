#INCLUDE "<inc>/Lexer.hjk"

#MACRO AsmAlign ( x ) [
    (((x) + 7) & ~7)
]

#MACRO AsmFileAlign ( x ) [
    (((x) + (AsmTargetInfo^.ObjectFileAlignment - 1)) &
        ~(AsmTargetInfo^.ObjectFileAlignment - 1))
]

#INCLUDE "../xr17032/XrInstruction.hjk"
#INCLUDE "../fox32/FoxInstruction.hjk"

STRUCT AsmIncBinBody
    Path : ^UBYTE,
    Size : UWORD,
END

STRUCT AsmBytesChunkBody
    Count : UWORD,
    Byte : UBYTE,
END

ENUM AsmRelocationType : UBYTE
    XLO_RELOC_NONE = 0,

    XLO_RELOC_PTR = 1,

    XLO_RELOC_XR17032_ABSJ = 2,
    XLO_RELOC_XR17032_LA = 3,
    XLO_RELOC_XR17032_FAR_INT = 4,
    XLO_RELOC_XR17032_FAR_LONG = 5,

    XLO_RELOC_FOX32_CALL = 6,
END

#DEFINE XLO_ARCHITECTURE_XR17032 1
#DEFINE XLO_ARCHITECTURE_FOX32 2
#DEFINE XLO_ARCHITECTURE_APHELION 3
#DEFINE XLO_ARCHITECTURE_AMD64 4

#DEFINE XLO_SECTION_ZERO 1
#DEFINE XLO_SECTION_CODE 2
#DEFINE XLO_SECTION_MAP 4

#DEFINE XLO_SYMBOL_GLOBAL 1
#DEFINE XLO_SYMBOL_EXPORT 2

#DEFINE XLO_EXTERN_UNRESOLVED 1
#DEFINE XLO_EXTERN_IMPORTED 2

#DEFINE XLO_FILE_FRAGMENT 1

#DEFINE XLO_MAGIC_NUMBER 0x6174737F

STRUCT PACKED XloHeader
    // N.B. This structure MUST be 64-bit aligned in size.

    Magic : ULONG,
    SymbolTableOffset : ULONG,
    SymbolCount : ULONG,
    StringTableOffset : ULONG,
    StringTableSize : ULONG,
    TargetArchitecture : ULONG,
    HeadLength : ULONG,
    ImportTableOffset : ULONG,
    Flags : ULONG,
    Timestamp : ULONG,
    SectionTableOffset : ULONG,
    ExternTableOffset : ULONG,
    ExternCount : ULONG,
    SectionCount : UINT,
    ImportCount : UINT,
END

STRUCT PACKED XloHeaderExtended
    // N.B. This structure MUST be 64-bit aligned in size.

    Hdr : XloHeader,

    UnresolvedFixupTableOffset : ULONG,
    UnresolvedFixupCount : ULONG,
END

STRUCT PACKED XloSectionHeader
    // N.B. This structure MUST be 64-bit aligned in size.

#IF ( == BITS 64 )
    VirtualAddress : UQUAD,
#ELSE
    VirtualAddress : ULONG,
    Reserved : ULONG,
#END

    NameOffset : ULONG,
    FileOffset : ULONG,
    DataLength : ULONG,
    RelocTableOffset : ULONG,
    RelocCount : ULONG,
    Flags : ULONG,
END

STRUCT PACKED XloSymbolEntry
    // N.B. This structure MUST be 32-bit aligned in size.

    SectionIndex : UBYTE,
    Type : UBYTE,
    Flags : UBYTE,
    Padding : UBYTE,
    SectionOffset : ULONG,
    NameOffset : ULONG,
END

STRUCT PACKED XloExternEntry
    // N.B. This structure MUST be 32-bit aligned in size.

    NameOffset : ULONG,
    Type : UBYTE,
    Padding : UBYTE,
    ImportIndex : UINT,
    Padding2 : ULONG,
    Padding3 : ULONG,
END

STRUCT PACKED XloImportEntry
    // N.B. This structure MUST be 32-bit aligned in size.

    NameOffset : ULONG,
    ExpectedTimestamp : ULONG,
    FixupTableOffset : ULONG,
    FixupCount : ULONG,
END

STRUCT PACKED XloRelocEntry
    // N.B. This structure MUST be 32-bit aligned in size.

    SectionOffset : ULONG,
    ExternIndex : UINT,
    Type : UBYTE,
    SectionIndex : UBYTE,
END

UNION AsmElementBody
    Data : ^AsmExpressionNode,
    IncBin : AsmIncBinBody,
    BytesChunk : AsmBytesChunkBody,
    String : ^TlDynamicBuffer,

    Xr : XrInstructionBody,
    Fox : FoxInstructionBody,
END

STRUCT AsmElement
    Entry : TlListEntry,

    ErrorToken : LexToken,

    Body : AsmElementBody,

    FileOffset : UWORD,
    MemoryOffset : UWORD,

    RelocationType : AsmRelocationType,
END

STRUCT AsmSection
    Name : ^UBYTE,

    SectionListEntry : TlListEntry,

    ElementListHead : TlListEntry,

    RelocationListHead : TlListEntry,
    RelocationCount : UWORD,

    RelocationTable : ^XloRelocEntry,

    DataBuffer : ^UBYTE,

    TargetWord : UWORD,

    // Current offsets. File offset increases monotonically and reflects the
    // placement of the data within the file. Memory offset can be set by .org
    // and other things.

    FileOffset : UWORD,
    MemoryOffset : UWORD,

    SectionFlags : ULONG,

    Index : UBYTE,
END

STRUCT AsmRelocation
    Entry : TlListEntry,

    Symbol : ^LexSymbol,

    Section : ^AsmSection,
    Offset : UWORD,

    Type : AsmRelocationType,
END

ENUM AsmExpressionNodeType : UBYTE
    AST_CONSTANT,
    AST_LABEL,
    AST_OPERATOR,
END

STRUCT AsmOperatorBody
    Left : ^AsmExpressionNode,
    Right : ^AsmExpressionNode,
END

UNION AsmExpressionBody
    Constant : UWORD,
    Label : ^LexSymbol,
    Operator : AsmOperatorBody,
END

ENUM AsmWarnLevel : UWORD
    EVAL_NO_WARNING,
    EVAL_WARN,
    EVAL_ERROR,
END

STRUCT AsmExpressionNode
    Token : LexToken,

    Body : AsmExpressionBody,

    WarnLevel : AsmWarnLevel,

    Type : AsmExpressionNodeType,
END

EXTERN FN AsmConsumeComma ()

EXTERN FN AsmCreateElement (
    IN errtoken : ^LexToken,
    IN size : UWORD,
) : ^AsmElement

EXTERN FN AsmEvaluateNode (
    IN node : ^AsmExpressionNode,
    OUT value : UWORD,
    OUT refsymbol : ^LexSymbol,
) : UWORD

EXTERN FN AsmEvaluateNodeMustWork (
    IN node : ^AsmExpressionNode,
    OUT value : UWORD,
    OUT refsymbol : ^LexSymbol,
)

EXTERN FN AsmCreateExpressionNode (
    IN type : AsmExpressionNodeType,
    IN token : ^LexToken,
    IN warnlevel : AsmWarnLevel,
) : ^AsmExpressionNode

EXTERN FN AsmCreateOperation (
    IN operator : LexTokenSubtype,
    IN left : ^AsmExpressionNode,
    IN right : ^AsmExpressionNode,
    IN warnlevel : AsmWarnLevel,
) : ^AsmExpressionNode

EXTERN FN AsmCreateOperationWithConstant (
    IN operator : LexTokenSubtype,
    IN left : ^AsmExpressionNode,
    IN constant : UWORD,
    IN warnlevel : AsmWarnLevel,
) : ^AsmExpressionNode

EXTERN FN AsmCreateOperationLeftConstant (
    IN operator : LexTokenSubtype,
    IN constant : UWORD,
    IN right : ^AsmExpressionNode,
    IN warnlevel : AsmWarnLevel,
) : ^AsmExpressionNode

EXTERN FN AsmAddRelocation (
    IN offset : UWORD,
    IN relocationtype : AsmRelocationType,
    IN section : ^AsmSection,
    IN symbol : ^LexSymbol,
)

EXTERN FN AsmParseAtom () : ^AsmExpressionNode

EXTERN AsmCurrentSection : ^AsmSection

EXTERN AsmSectionListHead : TlListEntry
EXTERN AsmSectionCount : UWORD

EXTERN AsmSymbolListHead : TlListEntry
EXTERN AsmSymbolCount : UWORD

EXTERN AsmExternListHead : TlListEntry
EXTERN AsmExternCount : UWORD

EXTERN AsmExternalFixupListHead : TlListEntry
EXTERN AsmExternalFixupCount : UWORD

#MACRO AsmAdvanceSection ( bytes ) [
    AsmCurrentSection^.FileOffset += (bytes)
    AsmCurrentSection^.MemoryOffset += (bytes)
]

#MACRO AsmEnsureSection ( errtoken ) [
    IF NOT AsmCurrentSection THEN
        LexError ( (errtoken), "No section declared\n" )
    END
]