//
// Implements target-specific code for XR/17032 assembly.
//

#INCLUDE "<inc>/Asm.hjk"

// FORWARD
EXTERN FN (AsmTargetKeywordsF) XrRegisterKeywords ()

// FORWARD
EXTERN FN (AsmTargetParseF) XrParseInstruction (
    IN token : ^LexToken,
)

PUBLIC XrTargetInfo : AsmTargetInfoRecord = {
    [Name] = "xr17032",
    [KeywordsFunc] = &XrRegisterKeywords,
    [ParseFunc] = &XrParseInstruction,
    [ConstantMask] = 0xFFFFFFFF,
    [PointerSize] = 4,
}

ENUM XrInstructionSubtype : LexTokenSubtype
    // Real instructions

    XR_JAL,
    XR_J,

    XR_BEQ,
    XR_BNE,
    XR_BLT,
    XR_BGT,
    XR_BLE,
    XR_BGE,
    XR_BPE,
    XR_BPO,

    XR_ADDI,
    XR_SUBI,
    XR_SLTI,
    XR_ANDI,
    XR_XORI,
    XR_ORI,
    XR_LUI,

    XR_MOV,
    XR_JALR,

    XR_LSH,
    XR_RSH,
    XR_ASH,
    XR_ROR,
    
    XR_ADD,
    XR_SUB,
    XR_SLT,
    XR_AND,
    XR_XOR,
    XR_OR,
    XR_NOR,

    XR_MUL,
    XR_DIV,
    XR_MOD,

    XR_LL,
    XR_SC,

    XR_MB,
    XR_WMB,
    XR_BRK,
    XR_SYS,

    XR_MFCR,
    XR_MTCR,

    XR_HLT,
    XR_RFE,

    // Pseudo-instructions

    XR_B,
    XR_RET,
    XR_JR,
    XR_LI,
    XR_LA,
    XR_NOP,

    XR_LSHI,
    XR_RSHI,
    XR_ASHI,
    XR_RORI,

    // "Virtual" instruction codes

    XR_SLTI_SIGNED,
    XR_SLT_SIGNED,

    XR_INSTRUCTION_MAX,
END

ENUM XrAuxSubtype : LexTokenSubtype
    XR_AUX_TMP,

    XR_AUX_BYTE,
    XR_AUX_INT,
    XR_AUX_LONG,

    XR_AUX_SIGNED,

    XR_AUX_SHIFT,
END

FN (AsmTargetKeywordsF) XrRegisterKeywords ()

    // Register all of the instruction keywords.
    // These are keywords that cause the target independent parser to dispatch
    // to us.

    LexInsertKeyword ( "jal", TOKEN_INSTRUCTION, XR_JAL, 0 )
    LexInsertKeyword ( "j", TOKEN_INSTRUCTION, XR_J, 0 )

    LexInsertKeyword ( "beq", TOKEN_INSTRUCTION, XR_BEQ, 0 )
    LexInsertKeyword ( "bne", TOKEN_INSTRUCTION, XR_BNE, 0 )
    LexInsertKeyword ( "blt", TOKEN_INSTRUCTION, XR_BLT, 0 )
    LexInsertKeyword ( "bgt", TOKEN_INSTRUCTION, XR_BGT, 0 )
    LexInsertKeyword ( "ble", TOKEN_INSTRUCTION, XR_BLE, 0 )
    LexInsertKeyword ( "bge", TOKEN_INSTRUCTION, XR_BGE, 0 )
    LexInsertKeyword ( "bpe", TOKEN_INSTRUCTION, XR_BPE, 0 )
    LexInsertKeyword ( "bpo", TOKEN_INSTRUCTION, XR_BPO, 0 )

    LexInsertKeyword ( "addi", TOKEN_INSTRUCTION, XR_ADDI, 0 )
    LexInsertKeyword ( "subi", TOKEN_INSTRUCTION, XR_SUBI, 0 )
    LexInsertKeyword ( "slti", TOKEN_INSTRUCTION, XR_SLTI, 0 )
    LexInsertKeyword ( "andi", TOKEN_INSTRUCTION, XR_ANDI, 0 )
    LexInsertKeyword ( "xori", TOKEN_INSTRUCTION, XR_XORI, 0 )
    LexInsertKeyword ( "ori", TOKEN_INSTRUCTION, XR_ORI, 0 )
    LexInsertKeyword ( "lui", TOKEN_INSTRUCTION, XR_LUI, 0 )

    LexInsertKeyword ( "mov", TOKEN_INSTRUCTION, XR_MOV, 0 )
    LexInsertKeyword ( "jalr", TOKEN_INSTRUCTION, XR_JALR, 0 )

    LexInsertKeyword ( "lsh", TOKEN_INSTRUCTION, XR_LSH, 0 )
    LexInsertKeyword ( "rsh", TOKEN_INSTRUCTION, XR_RSH, 0 )
    LexInsertKeyword ( "ash", TOKEN_INSTRUCTION, XR_ASH, 0 )
    LexInsertKeyword ( "ror", TOKEN_INSTRUCTION, XR_ROR, 0 )

    LexInsertKeyword ( "add", TOKEN_INSTRUCTION, XR_ADD, 0 )
    LexInsertKeyword ( "sub", TOKEN_INSTRUCTION, XR_SUB, 0 )
    LexInsertKeyword ( "slt", TOKEN_INSTRUCTION, XR_SLT, 0 )
    LexInsertKeyword ( "and", TOKEN_INSTRUCTION, XR_AND, 0 )
    LexInsertKeyword ( "xor", TOKEN_INSTRUCTION, XR_XOR, 0 )
    LexInsertKeyword ( "or", TOKEN_INSTRUCTION, XR_OR, 0 )
    LexInsertKeyword ( "nor", TOKEN_INSTRUCTION, XR_NOR, 0 )

    LexInsertKeyword ( "mul", TOKEN_INSTRUCTION, XR_MUL, 0 )
    LexInsertKeyword ( "div", TOKEN_INSTRUCTION, XR_DIV, 0 )
    LexInsertKeyword ( "mod", TOKEN_INSTRUCTION, XR_MOD, 0 )

    LexInsertKeyword ( "ll", TOKEN_INSTRUCTION, XR_LL, 0 )
    LexInsertKeyword ( "sc", TOKEN_INSTRUCTION, XR_SC, 0 )

    LexInsertKeyword ( "mb", TOKEN_INSTRUCTION, XR_MB, 0 )
    LexInsertKeyword ( "wmb", TOKEN_INSTRUCTION, XR_WMB, 0 )
    LexInsertKeyword ( "brk", TOKEN_INSTRUCTION, XR_BRK, 0 )
    LexInsertKeyword ( "sys", TOKEN_INSTRUCTION, XR_SYS, 0 )

    LexInsertKeyword ( "mfcr", TOKEN_INSTRUCTION, XR_MFCR, 0 )
    LexInsertKeyword ( "mtcr", TOKEN_INSTRUCTION, XR_MTCR, 0 )

    LexInsertKeyword ( "hlt", TOKEN_INSTRUCTION, XR_HLT, 0 )
    LexInsertKeyword ( "rfe", TOKEN_INSTRUCTION, XR_RFE, 0 )

    // Pseudo-instructions

    LexInsertKeyword ( "b", TOKEN_INSTRUCTION, XR_B, 0 )
    LexInsertKeyword ( "ret", TOKEN_INSTRUCTION, XR_RET, 0 )
    LexInsertKeyword ( "jr", TOKEN_INSTRUCTION, XR_JR, 0 )
    LexInsertKeyword ( "li", TOKEN_INSTRUCTION, XR_LI, 0 )
    LexInsertKeyword ( "la", TOKEN_INSTRUCTION, XR_LA, 0 )
    LexInsertKeyword ( "nop", TOKEN_INSTRUCTION, XR_NOP, 0 )

    LexInsertKeyword ( "lshi", TOKEN_INSTRUCTION, XR_LSHI, 0 )
    LexInsertKeyword ( "rshi", TOKEN_INSTRUCTION, XR_RSHI, 0 )
    LexInsertKeyword ( "ashi", TOKEN_INSTRUCTION, XR_ASHI, 0 )
    LexInsertKeyword ( "rori", TOKEN_INSTRUCTION, XR_RORI, 0 )

    // Registers

    LexInsertKeyword ( "zero", TOKEN_REGISTER, 0, 0 )
    LexInsertKeyword ( "t0", TOKEN_REGISTER, 0, 1 )
    LexInsertKeyword ( "t1", TOKEN_REGISTER, 0, 2 )
    LexInsertKeyword ( "t2", TOKEN_REGISTER, 0, 3 )
    LexInsertKeyword ( "t3", TOKEN_REGISTER, 0, 4 )
    LexInsertKeyword ( "t4", TOKEN_REGISTER, 0, 5 )
    LexInsertKeyword ( "t5", TOKEN_REGISTER, 0, 6 )
    LexInsertKeyword ( "a0", TOKEN_REGISTER, 0, 7 )
    LexInsertKeyword ( "a1", TOKEN_REGISTER, 0, 8 )
    LexInsertKeyword ( "a2", TOKEN_REGISTER, 0, 9 )
    LexInsertKeyword ( "a3", TOKEN_REGISTER, 0, 10 )
    LexInsertKeyword ( "s0", TOKEN_REGISTER, 0, 11 )
    LexInsertKeyword ( "s1", TOKEN_REGISTER, 0, 12 )
    LexInsertKeyword ( "s2", TOKEN_REGISTER, 0, 13 )
    LexInsertKeyword ( "s3", TOKEN_REGISTER, 0, 14 )
    LexInsertKeyword ( "s4", TOKEN_REGISTER, 0, 15 )
    LexInsertKeyword ( "s5", TOKEN_REGISTER, 0, 16 )
    LexInsertKeyword ( "s6", TOKEN_REGISTER, 0, 17 )
    LexInsertKeyword ( "s7", TOKEN_REGISTER, 0, 18 )
    LexInsertKeyword ( "s8", TOKEN_REGISTER, 0, 19 )
    LexInsertKeyword ( "s9", TOKEN_REGISTER, 0, 20 )
    LexInsertKeyword ( "s10", TOKEN_REGISTER, 0, 21 )
    LexInsertKeyword ( "s11", TOKEN_REGISTER, 0, 22 )
    LexInsertKeyword ( "s12", TOKEN_REGISTER, 0, 23 )
    LexInsertKeyword ( "s13", TOKEN_REGISTER, 0, 24 )
    LexInsertKeyword ( "s14", TOKEN_REGISTER, 0, 25 )
    LexInsertKeyword ( "s15", TOKEN_REGISTER, 0, 26 )
    LexInsertKeyword ( "s16", TOKEN_REGISTER, 0, 27 )
    LexInsertKeyword ( "s17", TOKEN_REGISTER, 0, 28 )
    LexInsertKeyword ( "tp", TOKEN_REGISTER, 0, 29 )
    LexInsertKeyword ( "sp", TOKEN_REGISTER, 0, 30 )
    LexInsertKeyword ( "lr", TOKEN_REGISTER, 0, 31 )

    // Control registers

    LexInsertKeyword ( "rs", TOKEN_CONTROL_REGISTER, 0, 0 )
    LexInsertKeyword ( "whami", TOKEN_CONTROL_REGISTER, 0, 1 )

    LexInsertKeyword ( "eb", TOKEN_CONTROL_REGISTER, 0, 5 )
    LexInsertKeyword ( "epc", TOKEN_CONTROL_REGISTER, 0, 6 )
    LexInsertKeyword ( "ebadaddr", TOKEN_CONTROL_REGISTER, 0, 7 )

    LexInsertKeyword ( "tbmissaddr", TOKEN_CONTROL_REGISTER, 0, 9 )
    LexInsertKeyword ( "tbpc", TOKEN_CONTROL_REGISTER, 0, 10 )

    LexInsertKeyword ( "scratch0", TOKEN_CONTROL_REGISTER, 0, 11 )
    LexInsertKeyword ( "scratch1", TOKEN_CONTROL_REGISTER, 0, 12 )
    LexInsertKeyword ( "scratch2", TOKEN_CONTROL_REGISTER, 0, 13 )
    LexInsertKeyword ( "scratch3", TOKEN_CONTROL_REGISTER, 0, 14 )
    LexInsertKeyword ( "scratch4", TOKEN_CONTROL_REGISTER, 0, 15 )

    LexInsertKeyword ( "itbpte", TOKEN_CONTROL_REGISTER, 0, 16 )
    LexInsertKeyword ( "itbtag", TOKEN_CONTROL_REGISTER, 0, 17 )
    LexInsertKeyword ( "itbindex", TOKEN_CONTROL_REGISTER, 0, 18 )
    LexInsertKeyword ( "itbctrl", TOKEN_CONTROL_REGISTER, 0, 19 )
    LexInsertKeyword ( "icachectrl", TOKEN_CONTROL_REGISTER, 0, 20 )
    LexInsertKeyword ( "itbaddr", TOKEN_CONTROL_REGISTER, 0, 21 )

    LexInsertKeyword ( "dtbpte", TOKEN_CONTROL_REGISTER, 0, 24 )
    LexInsertKeyword ( "dtbtag", TOKEN_CONTROL_REGISTER, 0, 25 )
    LexInsertKeyword ( "dtbindex", TOKEN_CONTROL_REGISTER, 0, 26 )
    LexInsertKeyword ( "dtbctrl", TOKEN_CONTROL_REGISTER, 0, 27 )
    LexInsertKeyword ( "dcachectrl", TOKEN_CONTROL_REGISTER, 0, 28 )
    LexInsertKeyword ( "dtbaddr", TOKEN_CONTROL_REGISTER, 0, 29 )

    // Syntactic junk

    LexInsertKeyword ( "tmp", TOKEN_AUX, XR_AUX_TMP, 0 )

    LexInsertKeyword ( "byte", TOKEN_SIZE_SPECIFIER, XR_AUX_BYTE, 0 )
    LexInsertKeyword ( "int", TOKEN_SIZE_SPECIFIER, XR_AUX_INT, 0 )
    LexInsertKeyword ( "long", TOKEN_SIZE_SPECIFIER, XR_AUX_LONG, 0 )

    LexInsertKeyword ( "signed", TOKEN_AUX, XR_AUX_SIGNED, 0 )

    LexInsertKeyword ( "LSH", TOKEN_AUX, XR_AUX_SHIFT, 0 )
    LexInsertKeyword ( "RSH", TOKEN_AUX, XR_AUX_SHIFT, 1 )
    LexInsertKeyword ( "ASH", TOKEN_AUX, XR_AUX_SHIFT, 2 )
    LexInsertKeyword ( "ROR", TOKEN_AUX, XR_AUX_SHIFT, 3 )
END

XrSubtypeToOpcode : UBYTE[XR_INSTRUCTION_MAX] = {
    [XR_JAL] = 0x07,
    [XR_J] = 0x06,

    [XR_BEQ] = 0x3D,
    [XR_BNE] = 0x35,
    [XR_BLT] = 0x2D,
    [XR_BGT] = 0x25,
    [XR_BLE] = 0x1D,
    [XR_BGE] = 0x15,
    [XR_BPE] = 0x0D,
    [XR_BPO] = 0x05,
}

FNPTR XrInstructionMnemonicF (
    IN token : ^LexToken,
) : ^AsmElement

FN (XrInstructionMnemonicF) XrParseJumpFormat (
    IN token : ^LexToken,
) : ^AsmElement

    // Parse an absolute jump format instruction.

    elem := AsmCreateElement ( token )

    elem^.Body.Xr.ImmExpr = AsmParseAtom ()

    elem^.Body.Xr.FormatType = XR_FORMAT_JUMP
    elem^.Body.Xr.Opcode = XrSubtypeToOpcode[token^.Subtype]

    AsmAdvanceSection ( 4 )

    RETURN elem
END

FN (XrInstructionMnemonicF) XrParseBranchFormat (
    IN token : ^LexToken,
) : ^AsmElement

    // Parse a branch format instruction.

    elem := AsmCreateElement ( token )

    elem^.Body.Xr.FormatType = XR_FORMAT_BRANCH
    elem^.Body.Xr.Opcode = XrSubtypeToOpcode[token^.Subtype]

    reg : LexToken

    IF NOT LexMatchToken (
        &reg, // token
        TOKEN_REGISTER, // type
        0, // subtype
    ) THEN
        LexTokenError ( &reg, "Expected a register", 0, 0, 0 )
    END

    elem^.Body.Xr.RegA = reg.TypeContext

    AsmConsumeComma ()

    elem^.Body.Xr.ImmExpr = AsmParseAtom ()

    AsmAdvanceSection ( 4 )

    RETURN elem
END

FN (XrInstructionMnemonicF) XrParseImmFormat (
    IN token : ^LexToken,
) : ^AsmElement

    // Parse an imm format instruction.

    elem := AsmCreateElement ( token )

    elem^.Body.Xr.FormatType = XR_FORMAT_IMM
    elem^.Body.Xr.Opcode = XrSubtypeToOpcode[token^.Subtype]

    reg : LexToken

    IF NOT LexMatchToken (
        &reg, // token
        TOKEN_REGISTER, // type
        0, // subtype
    ) THEN
        LexTokenError ( &reg, "Expected a register", 0, 0, 0 )
    END

    elem^.Body.Xr.RegA = reg.TypeContext

    AsmConsumeComma ()

    IF NOT LexMatchToken (
        &reg, // token
        TOKEN_REGISTER, // type
        0, // subtype
    ) THEN
        LexTokenError ( &reg, "Expected a register", 0, 0, 0 )
    END

    elem^.Body.Xr.RegB = reg.TypeContext

    AsmConsumeComma ()

    elem^.Body.Xr.ImmExpr = AsmParseAtom ()

    AsmAdvanceSection ( 4 )

    RETURN elem
END

FN (XrInstructionMnemonicF) XrParseSlti (
    IN token : ^LexToken,
) : ^AsmElement

    // Parse an SLTI [SIGNED] instruction.

    IF LexMatchToken (
        NULLPTR, // token
        TOKEN_AUX, // type
        XR_AUX_SIGNED, // subtype
    ) THEN
        // It's the signed variant, so fiddle the subtype.

        token^.Subtype = XR_SLTI_SIGNED
    END

    RETURN XrParseImmFormat ( token )
END

FN (XrInstructionMnemonicF) XrParseLui (
    IN token : ^LexToken,
) : ^AsmElement

    // Parse an LUI instruction.

    elem := XrParseImmFormat ( token )

    // Wrap the immediate in a right shift by 16 bits.

    oldexpr := elem^.Body.Xr.ImmExpr

    operexpr := AsmCreateExpressionNode (
        AST_OPERATOR, // type
        token, // token
    )

    operexpr^.Token.Type = TOKEN_OPER
    operexpr^.Token.Subtype = TOKEN_RIGHTSHIFT

    operexpr^.Body.Operator.Left = oldexpr

    constantexpr := AsmCreateExpressionNode (
        AST_CONSTANT, // type
        token, // token
    )

    constantexpr^.Body.Constant = 16

    operexpr^.Body.Operator.Right = constantexpr

    elem^.Body.Xr.ImmExpr = operexpr
END

FN XrParseMovLoad (
    IN elem : ^AsmElement,
    IN token : ^LexToken,
)

    // Parse the load cases of MOV.

    elem^.Body.Xr.RegA = token^.TypeContext

    nexttok : LexToken

    LexGetToken ( &nexttok )

    IF nexttok.Type == TOKEN_REGISTER THEN
        // Actually a reg-to-reg MOV.
        // Turn this into ADDI RA, RB, 0.

        elem^.Body.Xr.ImmExpr = NULLPTR
        elem^.Body.Xr.Opcode = 0x3C // ADDI
        elem^.Body.Xr.RegB = nexttok.TypeContext
        elem^.Body.Xr.FormatType = XR_FORMAT_IMM

        LEAVE
    END

    IF nexttok.Type != TOKEN_SIZE_SPECIFIER THEN
        LexTokenError ( &nexttok,
            "Expected register or size specifier", 0, 0, 0 )
    END

    rbtoken : LexToken

    IF NOT LexMatchToken (
        &rbtoken, // token
        TOKEN_LBRACKET, // type
        0, // subtype
    ) THEN
        LexTokenError ( &rbtoken, "Expected left bracket", 0, 0, 0 )
    END

    IF LexMatchToken (
        &rbtoken, // token
        TOKEN_REGISTER, // type
        0, // subtype
    ) THEN
        elem^.Body.Xr.RegB = rbtoken.TypeContext

        TlInternalError ( "TODO parse reg loads", 0, 0, 0 )

        LEAVE
    END

    // Must be an inline load.

    TlInternalError ( "TODO parse inline load", 0, 0, 0 )
END

FN XrParseMovStore (
    IN elem : ^AsmElement,
    IN token : ^LexToken,
)

    // Parse the store cases of MOV.

    TlInternalError ( "TODO parse stores", 0, 0, 0 )
END

FN (XrInstructionMnemonicF) XrParseMov (
    IN token : ^LexToken,
) : ^AsmElement

    // Parse the various MOV instructions.
    //
    // These are:
    //
    // Loads:
    //   MOV RA, BYTE/INT/LONG [RB]
    //   MOV RA, BYTE/INT/LONG [RB + OFF]
    //   MOV RA, BYTE/INT/LONG [RB + RC]
    //   MOV RA, BYTE/INT/LONG [RB + RC xSH VAL]
    //   MOV RA, BYTE/INT/LONG [IMM]
    //     (LA, FAR_INT, or FAR_LONG relocation required)
    //     LUI RA, ZERO, IMM >> 16
    //     MOV RA, BYTE/INT/LONG [RA + IMM & 0xFFFF]
    //   MOV RA, RB
    //
    // Stores:
    //   MOV BYTE/INT/LONG [RB], RA/SIGNEXT(IMM5)
    //   MOV BYTE/INT/LONG [RB + OFF], RA/SIGNEXT(IMM5)
    //   MOV BYTE/INT/LONG [RB + RC], RA
    //   MOV BYTE/INT/LONG [RB + RC xSH VAL], RA
    //   MOV BYTE/INT/LONG [IMM], REG1, TMP=REG2
    //     (LA, FAR_INT, or FAR_LONG relocation required)
    //     LUI REG2, ZERO, IMM >> 16
    //     MOV BYTE/INT/LONG [REG2 + IMM & 0xFFFF], REG1

    elem := AsmCreateElement ( token )

    nexttok : LexToken

    LexGetToken ( &nexttok )

    IF nexttok.Type == TOKEN_REGISTER THEN
        // This is a load.

        AsmConsumeComma ()

        XrParseMovLoad (
            elem, // elem
            &nexttok, // token
        )

        RETURN elem
    END

    IF nexttok.Type != TOKEN_SIZE_SPECIFIER THEN
        LexTokenError ( &nexttok,
            "Expected register or size specifier", 0, 0, 0 )
    END

    // This is a store.

    XrParseMovStore (
        elem, // elem
        &nexttok, // token
    )

    RETURN elem
END

XrInstructionMnemonics : XrInstructionMnemonicF[XR_INSTRUCTION_MAX] = {
    [XR_JAL] = &XrParseJumpFormat,
    [XR_J] = &XrParseJumpFormat,

    [XR_BEQ] = &XrParseBranchFormat,
    [XR_BNE] = &XrParseBranchFormat,
    [XR_BLT] = &XrParseBranchFormat,
    [XR_BGT] = &XrParseBranchFormat,
    [XR_BLE] = &XrParseBranchFormat,
    [XR_BGE] = &XrParseBranchFormat,
    [XR_BPE] = &XrParseBranchFormat,
    [XR_BPO] = &XrParseBranchFormat,

    [XR_ADDI] = &XrParseImmFormat,
    [XR_SUBI] = &XrParseImmFormat,
    [XR_SLTI] = &XrParseSlti,
    [XR_ANDI] = &XrParseImmFormat,
    [XR_XORI] = &XrParseImmFormat,
    [XR_ORI] = &XrParseImmFormat,
    [XR_LUI] = &XrParseLui,

    [XR_MOV] = &XrParseMov,

#IF 0
    [XR_JALR] = &XrParseJalr,

    [XR_LSH] = &XrParseRegFormat,
    [XR_RSH] = &XrParseRegFormat,
    [XR_ASH] = &XrParseRegFormat,
    [XR_ROR] = &XrParseRegFormat,

    [XR_ADD] = &XrParseRegFormat,
    [XR_SUB] = &XrParseRegFormat,
    [XR_SLT] = &XrParseSlt,
    [XR_AND] = &XrParseRegFormat,
    [XR_XOR] = &XrParseRegFormat,
    [XR_OR] = &XrParseRegFormat,
    [XR_NOR] = &XrParseRegFormat,

    [XR_MUL] = &XrParseRegFormat,
    [XR_DIV] = &XrParseRegFormat,
    [XR_MOD] = &XrParseRegFormat,

    [XR_LL] = &XrParseLoadLocked,
    [XR_SC] = &XrParseStoreConditional,

    [XR_MB] = &XrParseNone,
    [XR_WMB] = &XrParseNone,
    [XR_BRK] = &XrParseNone,
    [XR_SYS] = &XrParseNone,

    [XR_MFCR] = &XrParseMfcr,
    [XR_MTCR] = &XrParseMtcr,

    [XR_HLT] = &XrParseNone,
    [XR_RFE] = &XrParseNone,

    [XR_B] = &XrParseB,
    [XR_RET] = &XrParseRet,
    [XR_JR] = &XrParseJr,
    [XR_LI] = &XrParseLi,
    [XR_LA] = &XrParseLa,
    [XR_NOP] = &XrParseNone,

    [XR_LSHI] = &XrParseShiftImm,
    [XR_RSHI] = &XrParseShiftImm,
    [XR_ASHI] = &XrParseShiftImm,
    [XR_RORI] = &XrParseShiftImm,
#END
}

FN (AsmTargetParseF) XrParseInstruction (
    IN token : ^LexToken,
)

    // Parse the instruction.
    // First line is to dispatch to the parse function that corresponds to this
    // instruction mnemonic.

    XrInstructionMnemonics[token^.Subtype] ( token )
END