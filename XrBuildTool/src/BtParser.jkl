//
// Parser for build tool configuration files. The result of the parse is a DAG
// of all dependencies that require action to bring them up to date.
//

#INCLUDE "Bt.hjk"

BtTargetHashTable : TlHashTable
BtCurrentTarget : ^BtTarget

FN BtParseStandardPath (
    IN stdpath : ^TlDynamicBuffer,
    IN fullpath : ^TlDynamicBuffer,
    IN errtoken : ^LexToken,
)

    // Parse a standard path string into the dynamic buffer.
    // A standard path string has one of the following prefixes:
    //
    //   NONE    Relative to the current config file.
    //   <sdk>/  Relative to the SDK base.
    //   <bld>/  Relative to the build base.

    stdpathstr := stdpath^.Buffer

    IF stdpathstr[0] == 0 THEN
        LexTokenError ( errtoken, "Empty path string", 0, 0, 0 )
    END

    IF stdpathstr[0] == '/' THEN
        LexTokenError ( errtoken,
            "Expected a relative path, found an absolute path", 0, 0, 0 )
    END

    IF stdpathstr[0] != '<' THEN
        // Must be a relative path.

        TlCopyParentPath (
            &LexCurrentStream^.FileBlock^.FilePath[0], // srcpath
            fullpath, // destpath
        )

    ELSEIF TlCompareStringWithMax ( stdpathstr, "<sdk>/", 5 ) == 0 THEN
        // Relative to the SDK base.

        macro := CAST TlLookupSymbolTable (
            LexCurrentMacroScope, // symboltable
            "SDK_BASE", // name
        ) TO ^LexMacro

        IF NOT macro THEN
            LexTokenError ( errtoken, "SDK_BASE isn't defined", 0, 0, 0 )
        END

        IF macro^.IsFunctionMacro THEN
            LexTokenError ( errtoken,
                "SDK_BASE is a function macro for some reason", 0, 0, 0 )
        END

        TlCopyIntoDynamicBuffer (
            fullpath, // array
            &macro^.Contents.Buffer[0], // srcbuf
            macro^.Contents.Count - 1, // length
        )

        stdpathstr += 5

    ELSEIF TlCompareStringWithMax ( stdpathstr, "<bld>/", 5 ) == 0 THEN
        // Relative to the build base.

        macro := CAST TlLookupSymbolTable (
            LexCurrentMacroScope, // symboltable
            "BUILD_BASE", // name
        ) TO ^LexMacro

        IF NOT macro THEN
            LexTokenError ( errtoken, "BUILD_BASE isn't defined", 0, 0, 0 )
        END

        IF macro^.IsFunctionMacro THEN
            LexTokenError ( errtoken,
                "BUILD_BASE is a function macro for some reason", 0, 0, 0 )
        END

        TlCopyIntoDynamicBuffer (
            fullpath, // array
            &macro^.Contents.Buffer[0], // srcbuf
            macro^.Contents.Count - 1, // length
        )

        stdpathstr += 5
    END

    IF NOT fullpath^.Count THEN
        TlInsertDynamicBuffer (
            fullpath, // array
            '.', // byte
        )

        TlInsertDynamicBuffer (
            fullpath, // array
            '/', // byte
        )

    ELSEIF fullpath^.Buffer[fullpath^.Count - 1] != '/' THEN
        TlInsertDynamicBuffer (
            fullpath, // array
            '/', // byte
        )
    END

    TlCopyIntoDynamicBuffer (
        fullpath, // array
        stdpathstr, // srcbuf
        stdpath^.Count, // length
    )
END

FNPTR BtTargetInfoF ()

FN (BtTargetInfoF) BtTargetInfoFile ()

    // Parse a FILE info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a string", 0, 0, 0 )
    END

    string := CAST token.Payload TO ^LexInternedString

    TlUninitializeDynamicBuffer ( &BtCurrentTarget^.FileName )
    TlInitializeDynamicBuffer ( &BtCurrentTarget^.FileName )

    BtParseStandardPath (
        &string^.DynamicBuffer, // stdpath
        &BtCurrentTarget^.FileName, // fullpath
        &token, // errtoken
    )
END

FN (BtTargetInfoF) BtTargetInfoDepend ()

    // Parse a DEPEND info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a string", 0, 0, 0 )
    END

    string := CAST token.Payload TO ^LexInternedString

    // Look up the target target.

    target := CAST TlLookupHashTable (
        &BtTargetHashTable, // hashtable
        string^.DynamicBuffer.Buffer, // key
    ) TO ^BtTarget

    IF NOT target THEN
        LexTokenError ( &token, "Target not defined", 0, 0, 0 )
    END

    // Check if we already depend on this target.

    head := &BtCurrentTarget^.DependsOnListHead
    listentry := head^.Next

    WHILE head != listentry DO
        entry := CONTAINEROF listentry TO BtDependsListEntry.Entry

        IF entry^.Target == target THEN
            LEAVE
        END

        listentry = listentry^.Next
    END

    // Create a depends list entry.

    entry : ^BtDependsListEntry

    status := TlBumpAlloc (
        SIZEOF BtDependsListEntry, // bytes
        OUT entry, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate depends list entry", 0, 0, 0 )
    END

    entry^.Target = target

    // Insert into the current target's depends list.

    TlInsertAtTailList (
        &BtCurrentTarget^.DependsOnListHead, // head
        &entry^.Entry, // entry
    )
END

FN (BtTargetInfoF) BtTargetInfoSources ()

    // Parse a SOURCES info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a string", 0, 0, 0 )
    END

    string := CAST token.Payload TO ^LexInternedString

    // Allocate a sources record.

    entry : ^BtSourcesRecord

    status := TlBumpAlloc (
        SIZEOF BtSourcesRecord, // bytes
        OUT entry, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate sources record", 0, 0, 0 )
    END

    filepath := &entry^.FilePathBuffer

    TlInitializeDynamicBuffer ( filepath )

    BtParseStandardPath (
        &string^.DynamicBuffer, // stdpath
        filepath, // fullpath
        &token, // errtoken
    )

    // Check if this is actually a directory and that it exists.

    IF NOT TlIsPathDirectory ( filepath^.Buffer ) THEN
        LexTokenError ( &token, "Doesn't exist or not a directory", 0, 0, 0 )
    END

    // Add to the sources list.

    TlInsertAtTailList (
        &BtCurrentTarget^.SourcesListHead, // head
        &entry^.Entry, // entry
    )
END

FN (BtTargetInfoF) BtTargetInfoJklInclude ()

    // Parse a JKLINCLUDE info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a string", 0, 0, 0 )
    END

    string := CAST token.Payload TO ^LexInternedString

    filepath : TlDynamicBuffer

    TlInitializeDynamicBuffer ( &filepath )

    BtParseStandardPath (
        &string^.DynamicBuffer, // stdpath
        &filepath, // fullpath
        &token, // errtoken
    )

    // Check if this is actually a directory and that it exists.

    IF NOT TlIsPathDirectory ( filepath.Buffer ) THEN
        LexTokenError ( &token, "Doesn't exist or not a directory", 0, 0, 0 )
    END

    // Append to the include directories.

    IF BtCurrentTarget^.IncludePaths.Count THEN
        // There's already stuff in the include paths, so add a colon separator.

        TlInsertDynamicBuffer (
            &BtCurrentTarget^.IncludePaths, // array
            ':', // byte
        )
    END

    // Copy the full path (except the null terminator).

    TlCopyIntoDynamicBuffer (
        &BtCurrentTarget^.IncludePaths, // array
        filepath.Buffer, // srcbuf
        filepath.Count - 1, // length
    )

    TlUninitializeDynamicBuffer ( &filepath )
END

FN (BtTargetInfoF) BtTargetInfoLinkOpt ()

    // Parse a LINKOPT info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexTokenError ( &token, "Expected a string", 0, 0, 0 )
    END

    string := CAST token.Payload TO ^LexInternedString

    str := &string^.DynamicBuffer

    // If there's already stuff in the link options, add a space separator.

    IF BtCurrentTarget^.LinkOptions.Count THEN
        TlInsertDynamicBuffer (
            &BtCurrentTarget^.LinkOptions, // array
            ' ', // byte
        )
    END

    // Copy the link options, except the null terminator.

    TlCopyIntoDynamicBuffer (
        &BtCurrentTarget^.LinkOptions, // array
        str^.Buffer, // srcbuf
        str^.Count - 1, // length
    )
END

BtTargetInfoSpecifiers : BtTargetInfoF[TOKEN_SUBTYPE_MAX] = {
    [TOKEN_FILE] = &BtTargetInfoFile,
    [TOKEN_DEPEND] = &BtTargetInfoDepend,
    [TOKEN_SOURCES] = &BtTargetInfoSources,
    [TOKEN_JKLINCLUDE] = &BtTargetInfoJklInclude,
    [TOKEN_LINKOPT] = &BtTargetInfoLinkOpt,
}

FN BtParseTarget () : UBYTE

    // Parse the next target. Return FALSE on EOF.

    token : LexToken

    LexGetToken ( &token )

    IF token.Type == TOKEN_EOF THEN
        RETURN FALSE
    END

    IF token.Type != TOKEN_TARGET THEN
        LexTokenError ( &token, "Expected TARGET", 0, 0, 0 )
    END

    nametoken : LexToken

    IF NOT LexMatchToken (
        &nametoken, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexTokenError ( &nametoken, "Expected a string", 0, 0, 0 )
    END

    // Make sure the target doesn't exist.

    namestring := CAST nametoken.Payload TO ^LexInternedString

    IF TlLookupHashTable (
        &BtTargetHashTable, // hashtable
        namestring^.DynamicBuffer.Buffer, // key
    ) THEN
        LexTokenError ( &nametoken, "Target already defined", 0, 0, 0 )
    END

    // Allocate the target.

    target : ^BtTarget

    status := TlBumpAlloc (
        SIZEOF BtTarget, // bytes
        OUT target, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate target", 0, 0, 0 )
    END

    // Initialize the target structure.

    TlInitializeDynamicBuffer ( &target^.LinkOptions )
    TlInitializeDynamicBuffer ( &target^.IncludePaths )
    TlInitializeDynamicBuffer ( &target^.FileName )

    TlInitializeList ( &target^.DependsOnListHead )
    TlInitializeList ( &target^.SourcesListHead )

    // Set as the current target.

    BtCurrentTarget = target

    // Consume target information specifiers til we hit an END.

    WHILE NOT LexMatchToken (
        &token, // token
        TOKEN_END, // type
        0, // subtype
    ) DO
        IF NOT LexMatchToken (
            &token, // token
            TOKEN_TARGET_INFO, // type
            0, // subtype
        ) THEN
            LexTokenError ( &token,
                "Expected a target info specifier", 0, 0, 0 )
        END

        // Dispatch based on the type.

        BtTargetInfoSpecifiers[token.Subtype] ()
    END

    // Insert the target into the hash table.
    // We wait until now to do this so that it can't try to depend on itself.

    TlInsertHashTable (
        &BtTargetHashTable, // hashtable
        CAST target TO ^TlHashTableEntry, // entry
        namestring^.DynamicBuffer.Buffer, // key
    )

    RETURN TRUE
END

FN BtParse ()

    // Initialize the target hash table.

    TlInitializeHashTable ( &BtTargetHashTable )

    // Now parse target definitions til we hit EOF.

    WHILE BtParseTarget () DO
        // Keep going...
    END
END