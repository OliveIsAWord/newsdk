//
// Parser for build tool configuration files. The result of the parse is a DAG
// of all dependencies that require action to bring them up to date.
//

#INCLUDE "Bt.hjk"

BtTargetHashTable : TlHashTable
BtCurrentTarget : ^BtTarget

PUBLIC BtCHost := FALSE
PUBLIC BtArchHasSuffix := FALSE
PUBLIC BtCleanUp := FALSE
PUBLIC BtVerbose := FALSE
PUBLIC BtUseDiskTool := FALSE
PUBLIC BtDiskImageName : ^UBYTE
PUBLIC BtDiskImageCreationOptions : ^UBYTE
PUBLIC BtDiskImageUpdatePartition : ^UBYTE

PUBLIC BtTargetArchitectureName : UBYTE[BT_ARCH_BUFFER_SIZE]
PUBLIC BtSdkBase : UBYTE[FE_PATH_BUFFER_SIZE]
PUBLIC BtArchNameSuffix : UBYTE[FE_PATH_BUFFER_SIZE]

EXTERN FeTargetName : UBYTE[FE_PATH_BUFFER_SIZE]

PUBLIC BtSelectedTarget : ^BtTarget

FN BtParseStandardPath (
    IN stdpath : ^TlDynamicBuffer,
    IN fullpath : ^TlDynamicBuffer,
    IN relpath : ^TlDynamicBuffer,
    IN errtoken : ^LexToken,
)

    // Parse a standard path string into the dynamic buffer.
    // A standard path string has one of the following prefixes:
    //
    //   NONE    Relative to the current config file.
    //   <sdk>/  Relative to the SDK base.
    //   <bld>/  Relative to the build base.

    stdpathstr := stdpath^.Buffer

    IF stdpathstr[0] == 0 THEN
        LexError ( errtoken, "Empty path string\n" )
    END

    IF stdpathstr[0] == '/' THEN
        LexError ( errtoken,
            "Expected a relative path, found an absolute path\n" )
    END

    count := stdpath^.Count

    WHILE stdpathstr[0] == '.' AND stdpathstr[1] == '/' DO
        stdpathstr += 2
        count -= 2

        WHILE stdpathstr[0] == '/' DO
            stdpathstr += 1
            count -= 1
        END
    END

    IF stdpathstr[0] != '<' THEN
        // Must be a relative path.

        TlCopyParentPath (
            &LexCurrentStream^.FileBlock^.FilePath[0], // srcpath
            fullpath, // destpath
        )

    ELSEIF TlCompareStringWithMax ( stdpathstr, "<sdk>/", 6 ) == 0 THEN
        // Relative to the SDK base.

        macro := CAST TlLookupSymbolTable (
            LexCurrentMacroScope, // symboltable
            "SDK_BASE", // name
        ) TO ^LexMacro

        IF NOT macro THEN
            LexError ( errtoken, "SDK_BASE isn't defined\n" )
        END

        IF macro^.IsFunctionMacro THEN
            LexError ( errtoken,
                "SDK_BASE is a function macro for some reason\n" )
        END

        TlCopyIntoDynamicBuffer (
            fullpath, // array
            &macro^.Contents.Buffer[0], // srcbuf
            macro^.Contents.Count - 1, // length
        )

        stdpathstr += 6
        count -= 6

    ELSEIF TlCompareStringWithMax ( stdpathstr, "<bld>/", 6 ) == 0 THEN
        // Relative to the build base.

        macro := CAST TlLookupSymbolTable (
            LexCurrentMacroScope, // symboltable
            "BUILD_BASE", // name
        ) TO ^LexMacro

        IF NOT macro THEN
            LexError ( errtoken, "BUILD_BASE isn't defined\n" )
        END

        IF macro^.IsFunctionMacro THEN
            LexError ( errtoken,
                "BUILD_BASE is a function macro for some reason\n" )
        END

        TlCopyIntoDynamicBuffer (
            fullpath, // array
            &macro^.Contents.Buffer[0], // srcbuf
            macro^.Contents.Count - 1, // length
        )

        IF relpath THEN
            TlCopyIntoDynamicBuffer (
                relpath, // array
                stdpathstr + 5, // srcbuf
                count - 5, // length
            )
        END

        stdpathstr += 6
        count -= 6

    ELSE
        // Dunno what this is.

        LexError ( errtoken, "Unknown path prefix\n" )
    END

    IF fullpath^.Count AND fullpath^.Buffer[fullpath^.Count - 1] != '/' THEN
        TlInsertDynamicBuffer (
            fullpath, // array
            '/', // byte
        )
    END

    TlCopyIntoDynamicBuffer (
        fullpath, // array
        stdpathstr, // srcbuf
        count, // length
    )
END

FNPTR BtTargetInfoF ()

FN (BtTargetInfoF) BtTargetInfoFile ()

    // Parse a FILE info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    string := CAST token.Payload TO ^LexInternedString

    TlUninitializeDynamicBuffer ( &BtCurrentTarget^.FileName )
    TlInitializeDynamicBuffer ( &BtCurrentTarget^.FileName )

    TlUninitializeDynamicBuffer ( &BtCurrentTarget^.RelFileName )
    TlInitializeDynamicBuffer ( &BtCurrentTarget^.RelFileName )

    BtParseStandardPath (
        &string^.DynamicBuffer, // stdpath
        &BtCurrentTarget^.FileName, // fullpath
        &BtCurrentTarget^.RelFileName, // relpath
        &token, // errtoken
    )

    BtCurrentTarget^.HasFileName = TRUE
END

FN (BtTargetInfoF) BtTargetInfoDepend ()

    // Parse a DEPEND info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    string := CAST token.Payload TO ^LexInternedString

    // Look up the target target.

    target := CAST TlLookupHashTable (
        &BtTargetHashTable, // hashtable
        string^.DynamicBuffer.Buffer, // key
    ) TO ^BtTarget

    IF NOT target THEN
        LexError ( &token, "Target not defined\n" )
    END

    // Check if we already depend on this target.

    head := &BtCurrentTarget^.DependsOnListHead
    listentry := head^.Next

    WHILE head != listentry DO
        entry := CONTAINEROF listentry TO BtDependsListEntry.Entry

        IF entry^.Target == target THEN
            LEAVE
        END

        listentry = listentry^.Next
    END

    // Create a depends list entry.

    entry : ^BtDependsListEntry

    status := TlBumpAlloc (
        SIZEOF BtDependsListEntry, // bytes
        OUT entry, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate depends list entry", 0, 0, 0 )
    END

    entry^.Target = target

    // Insert into the current target's depends list.

    TlInsertAtTailList (
        &BtCurrentTarget^.DependsOnListHead, // head
        &entry^.Entry, // entry
    )
END

FN (BtTargetInfoF) BtTargetInfoSources ()

    // Parse a SOURCES info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    string := CAST token.Payload TO ^LexInternedString

    // Allocate a sources record.

    entry : ^BtSourcesRecord

    status := TlBumpAlloc (
        SIZEOF BtSourcesRecord, // bytes
        OUT entry, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate sources record", 0, 0, 0 )
    END

    entry^.ObjectsOnly = FALSE

    filepath := &entry^.FilePathBuffer

    TlInitializeDynamicBuffer ( filepath )

    BtParseStandardPath (
        &string^.DynamicBuffer, // stdpath
        filepath, // fullpath
        NULLPTR, // relpath
        &token, // errtoken
    )

    // Check if this is actually a directory and that it exists.

    IF NOT TlIsPathDirectory ( filepath^.Buffer ) THEN
        LexError ( &token, "Doesn't exist or not a directory\n" )
    END

    // Add to the sources list.

    TlInsertAtTailList (
        &BtCurrentTarget^.SourcesListHead, // head
        &entry^.Entry, // entry
    )
END

FN (BtTargetInfoF) BtTargetInfoObjects ()

    // Parse an OBJECTS info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string" )
    END

    string := CAST token.Payload TO ^LexInternedString

    // Allocate a sources record.

    entry : ^BtSourcesRecord

    status := TlBumpAlloc (
        SIZEOF BtSourcesRecord, // bytes
        OUT entry, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate sources record", 0, 0, 0 )
    END

    filepath := &entry^.FilePathBuffer

    entry^.ObjectsOnly = TRUE

    TlInitializeDynamicBuffer ( filepath )

    BtParseStandardPath (
        &string^.DynamicBuffer, // stdpath
        filepath, // fullpath
        NULLPTR, // relpath
        &token, // errtoken
    )

    // Check if this is actually a directory and that it exists.

    IF NOT TlIsPathDirectory ( filepath^.Buffer ) THEN
        LexError ( &token, "Doesn't exist or not a directory\n" )
    END

    // Add to the sources list.

    TlInsertAtTailList (
        &BtCurrentTarget^.SourcesListHead, // head
        &entry^.Entry, // entry
    )
END

FN (BtTargetInfoF) BtTargetInfoJklInclude ()

    // Parse an INCDIR info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    string := CAST token.Payload TO ^LexInternedString

    filepath : TlDynamicBuffer

    TlInitializeDynamicBuffer ( &filepath )

    BtParseStandardPath (
        &string^.DynamicBuffer, // stdpath
        &filepath, // fullpath
        NULLPTR, // relpath
        &token, // errtoken
    )

    // Append to the include directories.

    IF BtCurrentTarget^.IncludePaths.Count THEN
        // There's already stuff in the include paths, so add a colon separator.

        TlInsertDynamicBuffer (
            &BtCurrentTarget^.IncludePaths, // array
            ':', // byte
        )
    END

    // Copy the full path (except the null terminator).

    TlCopyIntoDynamicBuffer (
        &BtCurrentTarget^.IncludePaths, // array
        filepath.Buffer, // srcbuf
        filepath.Count - 1, // length
    )

    TlUninitializeDynamicBuffer ( &filepath )
END

FN (BtTargetInfoF) BtTargetInfoLibDir ()

    // Parse a LIBDIR info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    string := CAST token.Payload TO ^LexInternedString

    filepath : TlDynamicBuffer

    TlInitializeDynamicBuffer ( &filepath )

    BtParseStandardPath (
        &string^.DynamicBuffer, // stdpath
        &filepath, // fullpath
        NULLPTR, // relpath
        &token, // errtoken
    )

    // Append to the include directories.

    IF BtCurrentTarget^.LibPaths.Count THEN
        // There's already stuff in the include paths, so add a colon separator.

        TlInsertDynamicBuffer (
            &BtCurrentTarget^.LibPaths, // array
            ':', // byte
        )
    END

    // Copy the full path (except the null terminator).

    TlCopyIntoDynamicBuffer (
        &BtCurrentTarget^.LibPaths, // array
        filepath.Buffer, // srcbuf
        filepath.Count - 1, // length
    )

    TlUninitializeDynamicBuffer ( &filepath )
END

FN (BtTargetInfoF) BtTargetInfoLinkOpt ()

    // Parse a LINKOPT info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    string := CAST token.Payload TO ^LexInternedString

    str := &string^.DynamicBuffer

    // If there's already stuff in the link options, add a space separator.

    IF BtCurrentTarget^.LinkOptions.Count THEN
        TlInsertDynamicBuffer (
            &BtCurrentTarget^.LinkOptions, // array
            ' ', // byte
        )
    END

    // Copy the link options, except the null terminator.

    TlCopyIntoDynamicBuffer (
        &BtCurrentTarget^.LinkOptions, // array
        str^.Buffer, // srcbuf
        str^.Count - 1, // length
    )
END

FN (BtTargetInfoF) BtTargetInfoJklOpt ()

    // Parse a JKLOPT info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    string := CAST token.Payload TO ^LexInternedString

    str := &string^.DynamicBuffer

    // If there's already stuff in the compiler options, add a space separator.

    IF BtCurrentTarget^.JklOptions.Count THEN
        TlInsertDynamicBuffer (
            &BtCurrentTarget^.JklOptions, // array
            ' ', // byte
        )
    END

    // Copy the compiler options, except the null terminator.

    TlCopyIntoDynamicBuffer (
        &BtCurrentTarget^.JklOptions, // array
        str^.Buffer, // srcbuf
        str^.Count - 1, // length
    )
END

FN (BtTargetInfoF) BtTargetInfoLink ()

    // Parse a LINK info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    string := CAST token.Payload TO ^LexInternedString

    filepath : TlDynamicBuffer

    TlInitializeDynamicBuffer ( &filepath )

    BtParseStandardPath (
        &string^.DynamicBuffer, // stdpath
        &filepath, // fullpath
        NULLPTR, // relpath
        &token, // errtoken
    )

    // Append to the statically linked objects.

    IF BtCurrentTarget^.LinkPaths.Count THEN
        // There's already stuff in the link paths, so add a space separator.

        TlInsertDynamicBuffer (
            &BtCurrentTarget^.LinkPaths, // array
            ' ', // byte
        )
    END

    // Copy the full path (except the null terminator).

    TlCopyIntoDynamicBuffer (
        &BtCurrentTarget^.LinkPaths, // array
        filepath.Buffer, // srcbuf
        filepath.Count - 1, // length
    )

    TlUninitializeDynamicBuffer ( &filepath )
END

FN (BtTargetInfoF) BtTargetInfoDyLink ()

    // Parse a DYLINK info specifier.

    // Consume a run-time path and then a compile-time path.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    rtstring := CAST token.Payload TO ^LexInternedString

    // Now consume the compile-time path.

    ctpathtoken : LexToken

    IF NOT LexMatchToken (
        &ctpathtoken, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &ctpathtoken, "Expected a string\n" )
    END

    ctstring := CAST ctpathtoken.Payload TO ^LexInternedString

    filepath : TlDynamicBuffer

    TlInitializeDynamicBuffer ( &filepath )

    BtParseStandardPath (
        &ctstring^.DynamicBuffer, // stdpath
        &filepath, // fullpath
        NULLPTR, // relpath
        &ctpathtoken, // errtoken
    )

    // Append to the dynamically linked objects.

    IF BtCurrentTarget^.DyLinkPaths.Count THEN
        // There's already stuff in the link paths, so add a space separator.

        TlInsertDynamicBuffer (
            &BtCurrentTarget^.DyLinkPaths, // array
            ' ', // byte
        )
    END

    // Copy the runtime path (except the null terminator.)

    TlCopyIntoDynamicBuffer (
        &BtCurrentTarget^.DyLinkPaths, // array
        rtstring^.DynamicBuffer.Buffer, // srcbuf
        rtstring^.DynamicBuffer.Count - 1, // length
    )

    // Append a colon.

    TlInsertDynamicBuffer (
        &BtCurrentTarget^.DyLinkPaths, // array
        ':', // byte
    )

    // Copy the compile time path (except the null terminator).

    TlCopyIntoDynamicBuffer (
        &BtCurrentTarget^.DyLinkPaths, // array
        filepath.Buffer, // srcbuf
        filepath.Count - 1, // length
    )

    TlUninitializeDynamicBuffer ( &filepath )
END

FN (BtTargetInfoF) BtTargetInfoPrebuilt ()

    // Parse a PREBUILT info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    string := CAST token.Payload TO ^LexInternedString

    TlUninitializeDynamicBuffer ( &BtCurrentTarget^.PrebuiltCopiesPath )
    TlInitializeDynamicBuffer ( &BtCurrentTarget^.PrebuiltCopiesPath )

    BtParseStandardPath (
        &string^.DynamicBuffer, // stdpath
        &BtCurrentTarget^.PrebuiltCopiesPath, // fullpath
        NULLPTR, // relpath
        &token, // errtoken
    )

    BtCurrentTarget^.HasPrebuiltCopies = TRUE
END

FN (BtTargetInfoF) BtTargetInfoAction ()

    // Parse an ACTION info specifier.

    token : LexToken

    IF NOT LexMatchToken (
        &token, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &token, "Expected a string\n" )
    END

    string := CAST token.Payload TO ^LexInternedString

    // Allocate an action record.

    entry : ^BtActionRecord

    status := TlBumpAlloc (
        SIZEOF BtActionRecord, // bytes
        OUT entry, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate action record", 0, 0, 0 )
    END

    entry^.ActionBuffer = string^.DynamicBuffer.Buffer

    // Add to the action list.

    TlInsertAtTailList (
        &BtCurrentTarget^.ActionListHead, // head
        &entry^.Entry, // entry
    )
END

BtTargetInfoSpecifiers : BtTargetInfoF[TOKEN_SUBTYPE_MAX] = {
    [TOKEN_FILE] = &BtTargetInfoFile,
    [TOKEN_DEPEND] = &BtTargetInfoDepend,
    [TOKEN_SOURCES] = &BtTargetInfoSources,
    [TOKEN_JKLINCLUDE] = &BtTargetInfoJklInclude,
    [TOKEN_LIBDIR] = &BtTargetInfoLibDir,
    [TOKEN_LINKOPT] = &BtTargetInfoLinkOpt,
    [TOKEN_JKLOPT] = &BtTargetInfoJklOpt,
    [TOKEN_LINK] = &BtTargetInfoLink,
    [TOKEN_DYLINK] = &BtTargetInfoDyLink,
    [TOKEN_PREBUILT] = &BtTargetInfoPrebuilt,
    [TOKEN_OBJECTS] = &BtTargetInfoObjects,
    [TOKEN_ACTION] = &BtTargetInfoAction,
}

FN BtParseTarget () : UBYTE

    // Parse the next target. Return FALSE on EOF.

    token : LexToken

    LexGetToken ( &token )

    IF token.Type == TOKEN_EOF THEN
        RETURN FALSE
    END

    IF token.Type != TOKEN_TARGET THEN
        LexError ( &token, "Expected TARGET\n" )
    END

    nametoken : LexToken

    IF NOT LexMatchToken (
        &nametoken, // token
        TOKEN_STRING, // type
        0, // subtype
    ) THEN
        LexError ( &nametoken, "Expected a string\n" )
    END

    // Make sure the target doesn't exist.

    namestring := CAST nametoken.Payload TO ^LexInternedString

    IF TlLookupHashTable (
        &BtTargetHashTable, // hashtable
        namestring^.DynamicBuffer.Buffer, // key
    ) THEN
        LexError ( &nametoken, "Target already defined\n" )
    END

    // Allocate the target.

    target : ^BtTarget

    status := TlBumpAlloc (
        SIZEOF BtTarget, // bytes
        OUT target, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate target", 0, 0, 0 )
    END

    // Initialize the target structure.

    TlInitializeDynamicBuffer ( &target^.LinkOptions )
    TlInitializeDynamicBuffer ( &target^.JklOptions )
    TlInitializeDynamicBuffer ( &target^.IncludePaths )
    TlInitializeDynamicBuffer ( &target^.LibPaths )
    TlInitializeDynamicBuffer ( &target^.LinkPaths )
    TlInitializeDynamicBuffer ( &target^.DyLinkPaths )
    TlInitializeDynamicBuffer ( &target^.FileName )
    TlInitializeDynamicBuffer ( &target^.PrebuiltCopiesPath )
    TlInitializeDynamicBuffer ( &target^.RelFileName )

    target^.CheckedForUpdate = FALSE
    target^.HasFileName = FALSE
    target^.HasPrebuiltCopies = FALSE

    TlInitializeList ( &target^.DependsOnListHead )
    TlInitializeList ( &target^.SourcesListHead )
    TlInitializeList ( &target^.ObjectListHead )
    TlInitializeList ( &target^.ExposedMacroListHead )
    TlInitializeList ( &target^.ActionListHead )

    // Set as the current target.

    BtCurrentTarget = target

    // Set all of the currently exposed macros to be exposed to this target.

    listhead := &LexExposedMacroListHead
    listentry := listhead^.Next

    WHILE listentry != listhead DO
        macro := CONTAINEROF listentry TO LexMacro.ExposedMacroEntry

        exprec : ^BtExposedMacroRecord

        status = TlBumpAlloc (
            SIZEOF BtExposedMacroRecord, // sizeof
            OUT exprec, // ptr
        )

        IF status THEN
            TlInternalError (
                "Failed to allocate exposed macro record", 0, 0, 0 )
        END

        exprec^.Macro = macro

        TlInsertAtTailList (
            &target^.ExposedMacroListHead, // head
            &exprec^.Entry, // entry
        )

        listentry = listentry^.Next
    END

    // Consume target information specifiers til we hit an END.

    WHILE NOT LexMatchToken (
        &token, // token
        TOKEN_END, // type
        0, // subtype
    ) DO
        IF NOT LexMatchToken (
            &token, // token
            TOKEN_TARGET_INFO, // type
            0, // subtype
        ) THEN
            LexError ( &token, "Expected a target info specifier\n" )
        END

        // Dispatch based on the type.

        BtTargetInfoSpecifiers[token.Subtype] ()
    END

    // Insert the target into the hash table.
    // We wait until now to do this so that it can't try to depend on itself.

    TlInsertHashTable (
        &BtTargetHashTable, // hashtable
        CAST target TO ^TlHashTableEntry, // entry
        namestring^.DynamicBuffer.Buffer, // key
    )

    // Add a null terminator to the prebuilt copies path.

    IF target^.HasPrebuiltCopies THEN
        TlInsertDynamicBuffer (
            &target^.PrebuiltCopiesPath, // array
            0, // byte
        )
    END

    RETURN TRUE
END

FN BtParse ()

    // Initialize the target hash table.

    TlInitializeHashTable ( &BtTargetHashTable )

    // Now parse target definitions til we hit EOF.

    WHILE BtParseTarget () DO
        // Keep going...
    END

    // Look up the specified target.

    target := CAST TlLookupHashTable (
        &BtTargetHashTable, // hashtable
        &FeTargetName[0], // key
    ) TO ^BtTarget

    IF NOT target THEN
        TlError ( "Target '%s' not defined\n", &FeTargetName[0] )
    END

    BtSelectedTarget = target
END

FN BtLookupConfigMacros ()

    // Looks up important configuration macros after a parse.

    // First look up ARCHITECTURE.

    macro := CAST TlLookupSymbolTable (
        LexCurrentMacroScope, // symboltable
        "ARCHITECTURE", // name
    ) TO ^LexMacro

    IF NOT macro THEN
        TlError ( "ARCHITECTURE wasn't defined in the config\n" )
    END

    IF macro^.IsFunctionMacro THEN
        TlError ( "ARCHITECTURE is a function macro for some reason\n" )
    END

    TlCopyString (
        &BtTargetArchitectureName[0], // dest
        macro^.Contents.Buffer, // src
        BT_ARCH_BUFFER_SIZE, // bufsize
    )

    IF TlCompareString ( &BtTargetArchitectureName[0], "CHost" ) == 0 THEN
        BtCHost = TRUE
    END

    // Now look up JOBS.

    BtJobCount = 1

    macro = CAST TlLookupSymbolTable (
        LexCurrentMacroScope, // symboltable
        "JOBS", // name
    ) TO ^LexMacro

    IF macro THEN
        IF macro^.IsFunctionMacro THEN
            TlError ( "JOBS is a function macro for some reason\n" )
        END

        IF NOT TlStringToNumber (
            macro^.Contents.Buffer, // src
            -1, // bufsize
            OUT BtJobCount, // num
        ) THEN
            TlError ( "JOBS wasn't a numeric value\n" )
        END

        IF BtJobCount == 0 THEN
            TlError ( "Zero JOBS specified\n" )
        END
    END

    // SDK_BASE is up next.

    macro = CAST TlLookupSymbolTable (
        LexCurrentMacroScope, // symboltable
        "SDK_BASE", // name
    ) TO ^LexMacro

    IF NOT macro THEN
        TlError ( "SDK_BASE wasn't defined in the config\n" )
    END

    IF macro^.IsFunctionMacro THEN
        TlError ( "SDK_BASE is a function macro for some reason\n" )
    END

    TlCopyString (
        &BtSdkBase[0], // dest
        macro^.Contents.Buffer, // src
        BT_ARCH_BUFFER_SIZE, // bufsize
    )

    // Now ARCH_NAME_SUFFIX.

    macro = CAST TlLookupSymbolTable (
        LexCurrentMacroScope, // symboltable
        "ARCH_NAME_SUFFIX", // name
    ) TO ^LexMacro

    IF macro THEN
        IF macro^.IsFunctionMacro THEN
            TlError ( "ARCH_NAME_SUFFIX is a function macro for some reason\n" )
        END

        TlCopyString (
            &BtArchNameSuffix[0], // dest
            macro^.Contents.Buffer, // src
            FE_PATH_BUFFER_SIZE, // bufsize
        )

        BtArchHasSuffix = TRUE
    END

    // Now CLEANUP.

    macro = CAST TlLookupSymbolTable (
        LexCurrentMacroScope, // symboltable
        "CLEANUP", // name
    ) TO ^LexMacro

    IF macro THEN
        IF macro^.IsFunctionMacro THEN
            TlError ( "CLEANUP is a function macro for some reason\n" )
        END

        BtCleanUp = TRUE
    END

    // Now VERBOSE.

    macro = CAST TlLookupSymbolTable (
        LexCurrentMacroScope, // symboltable
        "VERBOSE", // name
    ) TO ^LexMacro

    IF macro THEN
        IF macro^.IsFunctionMacro THEN
            TlError ( "VERBOSE is a function macro for some reason\n" )
        END

        BtVerbose = TRUE
    END

    // now DISK_TOOL_IMAGE_NAME.

    macro = CAST TlLookupSymbolTable (
        LexCurrentMacroScope, // symboltable
        "DISK_TOOL_IMAGE_NAME", // name
    ) TO ^LexMacro

    IF macro THEN
        IF macro^.IsFunctionMacro THEN
            TlError ( "DISK_TOOL_IMAGE_NAME is a function macro for some reason\n" )
        END

        BtUseDiskTool = TRUE

        BtDiskImageName = macro^.Contents.Buffer

        macro = CAST TlLookupSymbolTable (
            LexCurrentMacroScope, // symboltable
            "DISK_TOOL_CREATION_OPTIONS", // name
        ) TO ^LexMacro

        IF NOT macro OR macro^.IsFunctionMacro THEN
            TlError ( "Expected DISK_TOOL_CREATION_OPTIONS to exist\n" )
        END

        BtDiskImageCreationOptions = macro^.Contents.Buffer

        macro = CAST TlLookupSymbolTable (
            LexCurrentMacroScope, // symboltable
            "DISK_TOOL_UPDATE_PARTITION", // name
        ) TO ^LexMacro

        IF NOT macro OR macro^.IsFunctionMacro THEN
            TlError ( "Expected DISK_TOOL_UPDATE_PARTITION to exist\n" )
        END

        BtDiskImageUpdatePartition = macro^.Contents.Buffer
    END
END