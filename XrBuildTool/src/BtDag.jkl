//
// Build the update DAG for the project.
//

#INCLUDE "Bt.hjk"

EXTERN BtSelectedTarget : ^BtTarget

FN BtConnectDagNodes (
    IN fromnode : ^BtDagNode,
    IN tonode : ^BtDagNode,
)

    // Allocate a DAG edge and connect the nodes.

    dagedge : ^BtDagEdge

    status := TlBumpAlloc (
        SIZEOF BtDagEdge, // bytes
        OUT dagedge, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate DAG edge", 0, 0, 0 )
    END

    dagedge^.From = fromnode
    dagedge^.To = tonode

    // Add to the in-edge list of the TO node, and the out-edge list of the
    // FROM node.

    TlInsertAtTailList (
        &tonode^.InEdgeListHead, // head
        &dagedge^.InEdgeListEntry, // entry
    )

    TlInsertAtTailList (
        &fromnode^.OutEdgeListHead, // head
        &dagedge^.OutEdgeListEntry, // entry
    )
END

FN BtCreateDagNode (
    IN target : ^BtTarget,
    IN type : BtDagNodeType,
) : ^BtDagNode

    // Build a DAG node.

    dagnode : ^BtDagNode

    status := TlBumpAlloc (
        SIZEOF BtDagNode, // bytes
        OUT dagnode, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate DAG node", 0, 0, 0 )
    END

    TlInitializeList ( &dagnode^.InEdgeListHead )
    TlInitializeList ( &dagnode^.OutEdgeListHead )

    dagnode^.Target = target
    dagnode^.Type = type

    RETURN dagnode
END

FN BtAnyDepsLater (
    IN srctime : ULONG,
    IN depspath : ^UBYTE,
) : UWORD

    // Open the deps cache file. It's delineated by lines.
    // For each line, stat the header file and compare it with the srctime.
    // If it was modified later, return TRUE. If none were modified later, then
    // return FALSE.

    // TODO
END

STRUCT BtProcessDirectoryContext
    Target : ^BtTarget,
    DagNode : ^BtDagNode,
    SourceDirPath : ^TlDynamicBuffer,
END

FN (TlIterateDirectoryCallbackF) BtProcessDirectoryEntry (
    IN fullpath : ^UBYTE,
    IN filename : ^UBYTE,
    IN context : ^VOID,
)

    // This callback is provided the full path from the current directory to
    // the file in the directory, along with just its name; the context
    // structure also provides the path for the source directory.
    //
    // What we really need to do here is:
    //
    //   1. Check that the file name ends with .jkl, .s, or .c. If it doesn't,
    //      we don't care about this file.
    //
    //   2. Look up the file in our stat cache. Check that it's a file (not a
    //      directory). If it's not, we don't care.
    //
    // Now we know that we care about it, that it's a file, and we have access
    // to the status information, we need to figure out if it needs to be
    // updated. Any of the following situations mean it does:
    //
    //   1. If the corresponding object file doesn't exist OR
    //   2. If the corresponding header dep file doesn't exist OR
    //   3. If the source file was modified more recently than the object OR
    //   4. If any of the header files were modified more recently than the
    //      source file.
    //
    // The object file is located at [srcdir]/obj/[arch]/[filename].o
    // The header dep file is located at [srcdir]/obj/[filename].dep
    //
    // Note: We should also create the obj/ and obj/[arch]/ directories if they
    //       don't exist yet; this is the most convenient place to do that.

    pdc := CAST context TO ^BtProcessDirectoryContext

    ext := TlGetPathExtension ( filename )

    nodetype : BtDagNodeType

    IF TlCompareString ( ext, "jkl" ) == 0 THEN
        nodetype = DAG_JKL_OBJECT

    ELSEIF TlCompareString ( ext, "s" ) == 0 THEN
        nodetype = DAG_S_OBJECT

    ELSEIF TlCompareString ( ext, "c" ) == 0 THEN
        nodetype = DAG_C_OBJECT

    ELSE
        // Don't care.

        LEAVE
    END

    stat := BtStatFile ( fullpath )

    IF NOT stat THEN
        TlInternalError ( "Failed to stat file", 0, 0, 0 )
    END

    IF stat^.FileType != TL_FT_FILE THEN
        // Don't care.

        LEAVE
    END

    // Allocate a DAG node. We might not need it but we need the dynamic buffers
    // within.

    dagnode := BtCreateDagNode (
        pdc^.Target, // target
        nodetype, // type
    )

    TlInitializeDynamicBuffer ( &dagnode^.SrcPath )

    TlCopyIntoDynamicBuffer (
        &dagnode^.SrcPath, // array
        fullpath, // srcbuf
        TlMeasureString ( fullpath ) + 1, // length
    )

    objectpath := &dagnode^.ObjectPath
    depspath := &dagnode^.DepsPath
    tmppath := &dagnode^.TmpPath

    TlInitializeDynamicBuffer ( objectpath )
    TlInitializeDynamicBuffer ( depspath )
    TlInitializeDynamicBuffer ( tmppath )

    TlCopyIntoDynamicBuffer (
        objectpath, // array
        pdc^.SourceDirPath^.Buffer, // srcbuf
        pdc^.SourceDirPath^.Count - 1, // length
    )

    IF objectpath^.Buffer[objectpath^.Count - 1] != '/' THEN
        TlInsertDynamicBuffer (
            objectpath, // array
            '/', // byte
        )
    END

    TlCopyIntoDynamicBuffer (
        objectpath, // array
        "obj/", // srcbuf
        5, // length
    )

    // Create the object directory if it doesn't exist.

    TlCreateDirectory ( objectpath^.Buffer )

    // Pop the null terminator.

    TlPopDynamicBuffer ( objectpath )

    // Now add the architecture part.

    TlCopyIntoDynamicBuffer (
        objectpath, // array
        &BtTargetArchitectureName[0], // srcbuf
        TlMeasureString ( &BtTargetArchitectureName[0] ) + 1, // length
    )

    // Create the architecture directory if it doesn't exist.

    TlCreateDirectory ( objectpath^.Buffer )

    // Pop the null terminator.

    TlPopDynamicBuffer ( objectpath )

    // Now add the object name.

    TlInsertDynamicBuffer (
        objectpath, // array
        '/', // byte
    )

    TlCopyIntoDynamicBuffer (
        objectpath, // array
        filename, // srcbuf
        TlMeasureString ( filename ), // length
    )

    // Copy what we have into the tmp path.

    TlCopyIntoDynamicBuffer (
        tmppath, // array
        objectpath^.Buffer, // srcbuf
        objectpath^.Count, // length
    )

    // And into the deps path.

    TlCopyIntoDynamicBuffer (
        depspath, // array
        objectpath^.Buffer, // srcbuf
        objectpath^.Count, // length
    )

    // Now add the .o extension and null terminator to the object path.

    TlCopyIntoDynamicBuffer (
        objectpath, // array
        ".o", // srcbuf
        3, // length
    )

    // Add the deps extension to the deps path.

    TlCopyIntoDynamicBuffer (
        depspath, // array
        ".dep", // srcbuf
        5, // length
    )

    // Add the tmp extension to the tmp path.

    TlCopyIntoDynamicBuffer (
        tmppath, // array
        ".tmp", // srcbuf
        5, // length
    )

    // Now we have these paths, check the existence of the dep file.

    IF nodetype == DAG_JKL_OBJECT AND
        NOT TlPathExists ( depspath^.Buffer ) THEN

        GOTO AddToDag 
    END

    // Stat the object file and check the modification times.

    objstat := BtStatFile ( objectpath^.Buffer )

    IF NOT objstat THEN
        // Doesn't exist.

        GOTO AddToDag
    END

    IF stat^.ModificationTime >= objstat^.ModificationTime THEN
        // Source file modified later than object file.

        GOTO AddToDag
    END

    // Now we have to open and read the deps file.

    IF BtAnyDepsLater (
        stat^.ModificationTime, // srctime
        depspath^.Buffer, // depspath
    ) THEN
        GOTO AddToDag
    END

    // We didn't need to add it to the DAG, so uninitialize all we can.

    TlUninitializeDynamicBuffer ( objectpath )
    TlUninitializeDynamicBuffer ( depspath )
    TlUninitializeDynamicBuffer ( tmppath )
    TlUninitializeDynamicBuffer ( &dagnode^.SrcPath )

    LEAVE

    @AddToDag

    IF NOT pdc^.DagNode THEN
        // Gotta make it.

        pdc^.DagNode = BtCreateDagNode (
            pdc^.Target, // target
            DAG_EXECUTABLE, // type
        )
    END

    BtConnectDagNodes (
        pdc^.DagNode, // fromnode
        dagnode, // tonode
    )
END

FN BtBuildDagForTarget (
    IN target : ^BtTarget,
) : ^BtDagNode

    // Build the update sub-DAG for a target. If the target is up to date, we
    // return a NULLPTR.

    IF target^.CheckedForUpdate THEN
        RETURN target^.DagNode
    END

    dagnode : ^BtDagNode = NULLPTR

    dagtype : BtDagNodeType

    IF target^.HasFileName THEN
        dagtype = DAG_EXECUTABLE
    ELSE
        dagtype = DAG_NULL
    END

    // We have to recursively build DAG nodes for all of the targets depended
    // upon by this target. Any that return non-NULLPTR need to be added as out-
    // edges to this node (plus, we need to create the node if it hasn't been
    // created yet).

    dependhead := &target^.DependsOnListHead
    dependentry := dependhead^.Next

    WHILE dependentry != dependhead DO
        dependnode := BtBuildDagForTarget (
            (CONTAINEROF dependentry TO BtDependsListEntry.Entry)^.Target,
        )

        IF dependnode THEN
            IF NOT dagnode THEN
                dagnode = BtCreateDagNode (
                    target, // target
                    dagtype, // type
                )
            END

            BtConnectDagNodes (
                dagnode, // fromnode
                dependnode, // tonode
            )
        END

        dependentry = dependentry^.Next
    END

    IF target^.HasFileName THEN
        // For all SOURCES subdirectories specified, we need to iterate their
        // contents. Each *.jkl and *.s file represent an object file in the
        // build cache that must exist and have a modification date later than
        // the source file, and later than that of all header files upon which
        // the source file depends (which are themselves cached). If this
        // invariant is violated, we have to create a node in the DAG and add an
        // out-edge from ourselves to it.

        // Note: Also check for *.c files when building for the C transpilation
        //       host.

        sourceshead := &target^.SourcesListHead
        sourcesentry := sourceshead^.Next

        context : BtProcessDirectoryContext

        context.Target = target
        context.DagNode = dagnode

        WHILE sourcesentry != sourceshead DO
            sourcesrcrd := CONTAINEROF sourcesentry TO BtSourcesRecord.Entry

            context.SourceDirPath = &sourcesrcrd^.FilePathBuffer

            status := TlIterateDirectory (
                sourcesrcrd^.FilePathBuffer.Buffer, // path
                &BtProcessDirectoryEntry, // callback
                &context, // context
            )

            IF status THEN
                TlInternalError ( "Failed to iterate directory", 0, 0, 0 )
            END

            sourcesentry = sourcesentry^.Next
        END

        dagnode = context.DagNode

        // If there still isn't a DAG node, check to make sure that the
        // executable actually does exist. If it doesn't, we need to create a
        // node for relinking.

        IF NOT dagnode THEN
            // TODO
        END
    END

    // Now cache the DAG node and return.

    target^.DagNode = dagnode
    target^.CheckedForUpdate = TRUE

    RETURN dagnode
END

FN BtBuildDag ()
    
    // The update DAG represents all of the 'objects' that need to be updated to
    // bring the selected target up to date. A node represents one of these
    // objects, and a directed edge leads FROM an object TO an object that must
    // be updated first.
    //
    // If an object is added to the DAG, all objects that depend upon it will
    // also be added to the DAG.
    //
    // An exhaustive list of objects and their associated actions are:
    //
    //   o An object code file is added to the DAG if:
    //      1. The object code file does not exist OR
    //      2. The associated source file was modified more recently than the
    //         object code file OR
    //      3. One of the source file's headers was modified more recently OR
    //      4. The header cache file for the source file does not exist.
    //
    //     The action to be taken is to recompile the source file, regenerating
    //     the header cache file in the process.
    //
    //   o An executable file is added to the DAG if one of its object files
    //     are, or if a target upon which it depends is added to the DAG.
    //
    //     The action to be taken is to relink the executable file.
    //
    //   o A null node is added to the DAG if a target without an output file
    //     must be updated. There is no action taken.

    dagroot := BtBuildDagForTarget ( BtSelectedTarget )

    IF NOT dagroot THEN
        TlPrintString ( "The target is already up to date.\n" )

        LEAVE
    END

    // Now we have a dependency DAG, and a list of leaf nodes (i.e., nodes that
    // have zero out-edges). In order to process this DAG, we need to spawn the
    // maximum number of worker threads specified by the -j argument. These
    // worker threads will spin a loop popping items from the leaf list and
    // processing them. After processing, the leaf node will be removed from the
    // DAG, thereby creating more leaf nodes. This is repeated until the DAG is
    // emptied.

    // Note: If the maximum number of threads is one, directly call the worker
    //       thread entrypoint in the context of this thread.

    // TODO
END