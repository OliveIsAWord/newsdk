//
// Implements a simple cache for stat().
//

#INCLUDE "Bt.hjk"

BtStatHashTable : TlHashTable

STRUCT BtStatCacheEntry
    Entry : TlHashTableEntry,
    Stat : TlStatRecord,
    Name : UBYTE[FE_PATH_BUFFER_SIZE],
END

FN BtInitializeStatCache ()

    // Initialize the stat cache hash table.

    TlInitializeHashTable ( &BtStatHashTable )
END

FN BtStatFile (
    IN fullpath : ^UBYTE,
) : ^TlStatRecord

    // First look up the path in the stat cache.

    created : UWORD

    statentry := CAST TlLookupOrAllocateEntryHashTable (
        &BtStatHashTable, // hashtable
        SIZEOF BtStatCacheEntry, // entrysize
        fullpath, // key
        OUT created, // created
    ) TO ^BtStatCacheEntry

    IF created THEN
        // We have to initialize the stat cache entry by actually doing the
        // stat call.

        status := TlStatFile (
            fullpath, // path
            &statentry^.Stat, // statrecord
        )

        IF status THEN
            TlRemoveHashTable ( &statentry^.Entry )

            RETURN NULLPTR
        END

        TlCopyString (
            &statentry^.Name[0], // dest
            fullpath, // src
            FE_PATH_BUFFER_SIZE, // bufsize
        )

        // Manually set the key on the hash table entry, because the one we
        // passed in isn't permanent. If we left it like that, it'd try to use
        // random memory as the key for comparison later, which is bad.

        statentry^.Entry.Key = &statentry^.Name[0]
    END

    RETURN &statentry^.Stat
END