#include <stdint.h>
extern void TlInitialize();
extern uint64_t TlMeasureString(uint64_t _mng_str1);
extern void TlFillMemoryWithByte(uint64_t _mng_ptr2, uint64_t _mng_sz3, uint64_t _mng_byte4);
extern void TlCopyMemory(uint64_t _mng_dest5, uint64_t _mng_src6, uint64_t _mng_sz7);
extern void TlPrintString(uint64_t _mng_str8);
extern void TlPrintNumber(uint64_t _mng_num9);
extern void TlPrintCharacter(uint64_t _mng_byte10);
extern void TlInternalError(uint64_t _mng_str11, uint64_t _mng_err112, uint64_t _mng_err213, uint64_t _mng_err314);
extern void TlUserError(uint64_t _mng_str15, uint64_t _mng_err116, uint64_t _mng_err217, uint64_t _mng_err318);
extern void TlErrorExit();
extern uint64_t TlBumpAlloc(uint64_t _mng_bytes19, uint64_t _mng_o_ptr);
extern uint64_t TlAlloc(uint64_t _mng_bytes20, uint64_t _mng_o_ptr);
extern void TlFree(uint64_t _mng_ptr21);
extern uint64_t TlCompareString(uint64_t _mng_str122, uint64_t _mng_str223);
extern uint64_t TlCompareStringWithMax(uint64_t _mng_str124, uint64_t _mng_str225, uint64_t _mng_count26);
extern void TlCopyString(uint64_t _mng_dest27, uint64_t _mng_src28, uint64_t _mng_bufsize29);
extern uint64_t TlOpenSource(uint64_t _mng_filename30, uint64_t _mng_o_handle);
extern uint64_t TlOpenDestination(uint64_t _mng_filename31, uint64_t _mng_o_handle);
extern void TlClose(uint64_t _mng_handle32);
extern uint64_t TlReadFile(uint64_t _mng_handle33, uint64_t _mng_bytes34, uint64_t _mng_buffer35);
extern uint64_t TlWriteFile(uint64_t _mng_handle36, uint64_t _mng_bytes37, uint64_t _mng_buffer38);
extern uint64_t TlHeapHits;
extern uint64_t TlBumpBytesUsed;
extern uint64_t TlBumpHits;
extern void TlInitializeHashTable(uint64_t _mng_hashtable39);
extern void TlSummarizeHashTable(uint64_t _mng_hashtable40);
extern void TlInsertHashTable(uint64_t _mng_hashtable41, uint64_t _mng_entry42, uint64_t _mng_key43);
extern uint64_t TlLookupOrInsertHashTable(uint64_t _mng_hashtable44, uint64_t _mng_entry45, uint64_t _mng_key46);
extern uint64_t TlLookupOrAllocateEntryHashTable(uint64_t _mng_hashtable47, uint64_t _mng_entrysize48, uint64_t _mng_key49, uint64_t _mng_o_created);
extern uint64_t TlLookupHashTable(uint64_t _mng_hashtable50, uint64_t _mng_key51);
extern void TlRemoveHashTable(uint64_t _mng_entry52);
extern void TlEnumerateHashTable(uint64_t _mng_hashtable53, uint64_t _mng_enumfunc54);
extern uint64_t TlLookupHashTableByHash(uint64_t _mng_hashtable55, uint64_t _mng_key56, uint64_t _mng_hash57);
extern uint64_t TlHashString(uint64_t _mng_str58);
extern void TlInitializeSymbolTable(uint64_t _mng_symboltable59, uint64_t _mng_outerscope60, uint64_t _mng_deletefunc61);
extern uint64_t TlCreateSymbolTable(uint64_t _mng_outerscope62, uint64_t _mng_deletefunc63);
extern uint64_t TlDeleteSymbolTable(uint64_t _mng_symboltable64);
extern uint64_t TlLookupSymbolTable(uint64_t _mng_symboltable65, uint64_t _mng_name66);
extern void TlInsertSymbolTable(uint64_t _mng_symboltable67, uint64_t _mng_entry68, uint64_t _mng_name69);
extern void TlRemoveSymbolTable(uint64_t _mng_entry70);
extern void TlInitializeDynamicBuffer(uint64_t _mng_array71);
extern void TlUninitializeDynamicBuffer(uint64_t _mng_array72);
extern void TlInsertDynamicBuffer(uint64_t _mng_array73, uint64_t _mng_byte74);
extern void TlCopyIntoDynamicBuffer(uint64_t _mng_array75, uint64_t _mng_srcbuf76, uint64_t _mng_length77);
extern void TlInsertNumberDynamicBuffer(uint64_t _mng_array78, uint64_t _mng_number79, uint64_t _mng_base80);
extern uint64_t TlPopDynamicBuffer(uint64_t _mng_array81);
extern uint64_t TlMatchPath(uint64_t _mng_path82, uint64_t _mng_pathset83, uint64_t _mng_resultingpath84, uint64_t _mng_o_handle);
extern void TlCopyParentPath(uint64_t _mng_srcpath85, uint64_t _mng_destpath86);
extern uint64_t TlIsPathDirectory(uint64_t _mng_path87);
extern uint64_t TlIterateDirectory(uint64_t _mng_path88, uint64_t _mng_callback89, uint64_t _mng_context90);
extern void TlInitializeZone(uint64_t _mng_zone91, uint64_t _mng_blocksize92);
extern uint64_t TlAllocateFromZone(uint64_t _mng_zone93);
extern void TlFreeToZone(uint64_t _mng_zone94, uint64_t _mng_block95);
extern uint64_t TlIsPowerOfTwo(uint64_t _mng_constant96);
extern void TlPunchValue(uint64_t _mng_ptr97, uint64_t _mng_value98, uint64_t _mng_bytes99);
extern uint64_t FeInputFile[32];
extern uint64_t FeInputFileHandle;
extern uint64_t FeIsMacroArgument(uint64_t _mng_arg100);
extern uint64_t FeCreateFileBlock(uint64_t _mng_includename101, uint64_t _mng_o_created);
extern void FeCopyPathFileBlock(uint64_t _mng_fileblock102, uint64_t _mng_filepath103);
extern uint64_t LexCharTreatment[32];
extern uint64_t LexCurrentStream;
extern uint64_t LexCurrentMacroScope;
extern uint32_t LexFalseCount;
extern uint32_t LexMacroDepth;
extern void LexInitialize();
extern uint64_t LexCreateSymbolTable(uint64_t _mng_outerscope104);
extern void LexInitializePreprocessor();
extern void LexDefineMacroFromArgumentString(uint64_t _mng_arg105);
extern void LexExpandMacro(uint64_t _mng_macro106, uint64_t _mng_token107);
extern void LexInitializeStreamZone();
extern void LexInitializeStream(uint64_t _mng_stream108, uint64_t _mng_macro109);
extern void LexUninitializeStream(uint64_t _mng_stream110);
extern uint64_t LexAllocateStream();
extern void LexFreeStream(uint64_t _mng_stream111);
extern void LexPushStream(uint64_t _mng_stream112);
extern uint64_t LexPopStream();
extern void LexInitializeFileStream(uint64_t _mng_stream113, uint64_t _mng_fileblock114, uint64_t _mng_handle115);
extern uint64_t LexCreateFileStream(uint64_t _mng_fileblock116, uint64_t _mng_handle117);
extern uint64_t LexStreamNextCharacter();
extern void LexParseDirective();
extern void LexCopyToken(uint64_t _mng_dest118, uint64_t _mng_src119);
extern void LexGetToken(uint64_t _mng_token120);
extern void LexPutbackToken(uint64_t _mng_token121);
extern uint64_t LexMatchToken(uint64_t _mng_token122, uint64_t _mng_type123, uint64_t _mng_subtype124);
extern void LexStreamError(uint64_t _mng_str125, uint64_t _mng_err1126, uint64_t _mng_err2127, uint64_t _mng_err3128);
extern void LexTokenError(uint64_t _mng_token129, uint64_t _mng_str130, uint64_t _mng_err1131, uint64_t _mng_err2132, uint64_t _mng_err3133);
extern uint64_t LexCrunchNumber(uint64_t _mng_token134, uint64_t _mng_buffer135);
extern uint64_t BtSelectedTarget;
void BtConnectDagNodes(uint64_t _mng_fromnode136, uint64_t _mng_tonode137) {
    uint64_t __twr_v138;
    uint64_t __twr_v139;
    uint64_t __twr_v140;
    uint64_t _mng_dagedge141;
    uint64_t _mng_status142;
    uint64_t __twr_v143;
    uint64_t __twr_v144;
    uint64_t __twr_v145;
    uint64_t __twr_v146;
    uint64_t __twr_v147;
    uint64_t __twr_v148;
    uint64_t __twr_v149;
    uint64_t _mng_listhead150;
    uint64_t _mng_listentry151;
    uint64_t __twr_v152;
    uint64_t __twr_v153;
    uint64_t __twr_v154;
    uint64_t _mng_last155;
    uint64_t __twr_v156;
    uint64_t __twr_v157;
    uint64_t __twr_v158;
    uint64_t _mng_listhead159;
    uint64_t __twr_v160;
    uint64_t _mng_listentry161;
    uint64_t __twr_v162;
    uint64_t __twr_v163;
    uint64_t _mng_last164;
    uint64_t __twr_v165;
    __twr_v138 = (uint64_t)(&TlBumpAlloc);
    __twr_v139 = 48ULL;
    __twr_v140 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v138)(__twr_v139, (uint64_t)(&_mng_dagedge141));
    _mng_status142 = __twr_v140;
    if (!(_mng_status142)) { goto __twr_l2; } else { goto __twr_l3; }
    __twr_l3:;
    __twr_v143 = (uint64_t)(&TlInternalError);
    __twr_v144 = (uint64_t)(&"Failed to allocate DAG edge");
    __twr_v145 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v143)(__twr_v144, __twr_v145, __twr_v145, __twr_v145);
    __twr_l2:;
    __twr_v146 = 32ULL;
    __twr_v147 = _mng_dagedge141 + __twr_v146;
    *(uint64_t*)(__twr_v147) = _mng_fromnode136;
    __twr_v148 = 40ULL;
    __twr_v149 = _mng_dagedge141 + __twr_v148;
    *(uint64_t*)(__twr_v149) = _mng_tonode137;
    _mng_listhead150 = _mng_tonode137;
    _mng_listentry151 = _mng_dagedge141;
    __twr_v152 = 8ULL;
    __twr_v153 = _mng_listhead150 + __twr_v152;
    __twr_v154 = *(uint64_t*)(__twr_v153);
    _mng_last155 = __twr_v154;
    __twr_v156 = _mng_listentry151 + __twr_v152;
    *(uint64_t*)(__twr_v156) = _mng_last155;
    *(uint64_t*)(_mng_listentry151) = _mng_listhead150;
    *(uint64_t*)(_mng_last155) = _mng_listentry151;
    *(uint64_t*)(__twr_v153) = _mng_listentry151;
    __twr_v157 = 16ULL;
    __twr_v158 = _mng_fromnode136 + __twr_v157;
    _mng_listhead159 = __twr_v158;
    __twr_v160 = _mng_dagedge141 + __twr_v157;
    _mng_listentry161 = __twr_v160;
    __twr_v162 = _mng_listhead159 + __twr_v152;
    __twr_v163 = *(uint64_t*)(__twr_v162);
    _mng_last164 = __twr_v163;
    __twr_v165 = _mng_listentry161 + __twr_v152;
    *(uint64_t*)(__twr_v165) = _mng_last164;
    *(uint64_t*)(_mng_listentry161) = _mng_listhead159;
    *(uint64_t*)(_mng_last164) = _mng_listentry161;
    *(uint64_t*)(__twr_v162) = _mng_listentry161;
    __twr_l1:;
    _jkl_epilogue:;
}
uint64_t BtCreateDagNode(uint64_t _mng_target166, uint64_t _mng_type167) {
    uint64_t _jkl_retv;
    uint64_t __twr_v168;
    uint64_t __twr_v169;
    uint64_t __twr_v170;
    uint64_t _mng_dagnode171;
    uint64_t _mng_status172;
    uint64_t __twr_v173;
    uint64_t __twr_v174;
    uint64_t __twr_v175;
    uint64_t _mng_listhead176;
    uint64_t __twr_v177;
    uint64_t __twr_v178;
    uint64_t __twr_v179;
    uint64_t __twr_v180;
    uint64_t _mng_listhead181;
    uint64_t __twr_v182;
    uint64_t __twr_v183;
    uint64_t __twr_v184;
    uint64_t __twr_v185;
    uint64_t __twr_v186;
    __twr_v168 = (uint64_t)(&TlBumpAlloc);
    __twr_v169 = 41ULL;
    __twr_v170 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v168)(__twr_v169, (uint64_t)(&_mng_dagnode171));
    _mng_status172 = __twr_v170;
    if (!(_mng_status172)) { goto __twr_l5; } else { goto __twr_l6; }
    __twr_l6:;
    __twr_v173 = (uint64_t)(&TlInternalError);
    __twr_v174 = (uint64_t)(&"Failed to allocate DAG node");
    __twr_v175 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v173)(__twr_v174, __twr_v175, __twr_v175, __twr_v175);
    __twr_l5:;
    _mng_listhead176 = _mng_dagnode171;
    __twr_v177 = 8ULL;
    __twr_v178 = _mng_listhead176 + __twr_v177;
    *(uint64_t*)(__twr_v178) = _mng_listhead176;
    *(uint64_t*)(_mng_listhead176) = _mng_listhead176;
    __twr_v179 = 16ULL;
    __twr_v180 = _mng_dagnode171 + __twr_v179;
    _mng_listhead181 = __twr_v180;
    __twr_v182 = _mng_listhead181 + __twr_v177;
    *(uint64_t*)(__twr_v182) = _mng_listhead181;
    *(uint64_t*)(_mng_listhead181) = _mng_listhead181;
    __twr_v183 = 32ULL;
    __twr_v184 = _mng_dagnode171 + __twr_v183;
    *(uint64_t*)(__twr_v184) = _mng_target166;
    __twr_v185 = 40ULL;
    __twr_v186 = _mng_dagnode171 + __twr_v185;
    *(uint8_t*)(__twr_v186) = _mng_type167;
    _jkl_retv = _mng_dagnode171;
    goto _jkl_epilogue;
    __twr_l4:;
    _jkl_epilogue:;
    return _jkl_retv;
}
void BtProcessDirectoryEntry(uint64_t _mng_fullpath187, uint64_t _mng_filename188, uint64_t _mng_context189) {
    uint64_t __twr_v190;
    uint64_t __twr_v191;
    uint64_t __twr_v192;
    __twr_v190 = (uint64_t)(&TlPrintString);
    ((void (*)(uint64_t))__twr_v190)(_mng_fullpath187);
    __twr_v191 = (uint64_t)(&"\n");
    ((void (*)(uint64_t))__twr_v190)(__twr_v191);
    ((void (*)(uint64_t))__twr_v190)(_mng_filename188);
    __twr_v192 = (uint64_t)(&"\n");
    ((void (*)(uint64_t))__twr_v190)(__twr_v192);
    __twr_l7:;
    _jkl_epilogue:;
}
uint64_t BtBuildDagForTarget(uint64_t _mng_target193) {
    uint64_t _jkl_retv;
    uint64_t __twr_v194;
    uint64_t __twr_v195;
    uint64_t __twr_v196;
    uint64_t __twr_v197;
    uint64_t __twr_v198;
    uint64_t __twr_v199;
    uint64_t _mng_dagnode200;
    uint64_t __twr_v201;
    uint64_t __twr_v202;
    uint64_t __twr_v203;
    uint64_t _mng_dagtype204;
    uint64_t __twr_v205;
    uint64_t __twr_v206;
    uint64_t _mng_dependhead207;
    uint64_t __twr_v208;
    uint64_t _mng_dependentry209;
    uint64_t __twr_v210;
    uint64_t __twr_v211;
    uint64_t __twr_v212;
    uint64_t __twr_v213;
    uint64_t __twr_v214;
    uint64_t _mng_dependnode215;
    uint64_t __twr_v216;
    uint64_t __twr_v217;
    uint64_t __twr_v218;
    uint64_t __twr_v219;
    uint64_t __twr_v220;
    uint64_t __twr_v221;
    uint64_t __twr_v222;
    uint64_t __twr_v223;
    uint64_t __twr_v224;
    uint64_t _mng_sourceshead225;
    uint64_t __twr_v226;
    uint64_t _mng_sourcesentry227;
    uint64_t __twr_v228;
    uint64_t _mng_context229[3];
    uint64_t __twr_v230;
    uint64_t __twr_v231;
    uint64_t _mng_sourcesrcrd232;
    uint64_t __twr_v233;
    uint64_t __twr_v234;
    uint64_t __twr_v235;
    uint64_t __twr_v236;
    uint64_t __twr_v237;
    uint64_t __twr_v238;
    uint64_t __twr_v239;
    uint64_t __twr_v240;
    uint64_t __twr_v241;
    uint64_t __twr_v242;
    uint64_t _mng_status243;
    uint64_t __twr_v244;
    uint64_t __twr_v245;
    uint64_t __twr_v246;
    uint64_t __twr_v247;
    uint64_t __twr_v248;
    uint64_t __twr_v249;
    uint64_t __twr_v250;
    uint64_t __twr_v251;
    uint64_t __twr_v252;
    uint64_t __twr_v253;
    uint64_t __twr_v254;
    uint64_t __twr_v255;
    uint64_t __twr_v256;
    __twr_v194 = 616ULL;
    __twr_v195 = _mng_target193 + __twr_v194;
    __twr_v196 = *(uint8_t*)(__twr_v195);
    if (!(__twr_v196)) { goto __twr_l9; } else { goto __twr_l10; }
    __twr_l10:;
    __twr_v197 = 608ULL;
    __twr_v198 = _mng_target193 + __twr_v197;
    __twr_v199 = *(uint64_t*)(__twr_v198);
    _jkl_retv = __twr_v199;
    goto _jkl_epilogue;
    __twr_l9:;
    _mng_dagnode200 = 0ULL;
    __twr_v201 = 617ULL;
    __twr_v202 = _mng_target193 + __twr_v201;
    __twr_v203 = *(uint8_t*)(__twr_v202);
    if (!(__twr_v203)) { goto __twr_l13; } else { goto __twr_l12; }
    __twr_l12:;
    _mng_dagtype204 = 2ULL;
    goto __twr_l11;
    __twr_l13:;
    _mng_dagtype204 = 0ULL;
    __twr_l11:;
    __twr_v205 = 488ULL;
    __twr_v206 = _mng_target193 + __twr_v205;
    _mng_dependhead207 = __twr_v206;
    __twr_v208 = *(uint64_t*)(_mng_dependhead207);
    _mng_dependentry209 = __twr_v208;
    if (_mng_dependentry209 == _mng_dependhead207) { goto __twr_l15; } else { goto __twr_l14; }
    __twr_l14:;
    __twr_v210 = (uint64_t)(&BtBuildDagForTarget);
    __twr_v211 = 16ULL;
    __twr_v212 = _mng_dependentry209 + __twr_v211;
    __twr_v213 = *(uint64_t*)(__twr_v212);
    __twr_v214 = ((uint64_t (*)(uint64_t))__twr_v210)(__twr_v213);
    _mng_dependnode215 = __twr_v214;
    if (!(_mng_dependnode215)) { goto __twr_l17; } else { goto __twr_l18; }
    __twr_l18:;
    if (_mng_dagnode200) { goto __twr_l19; } else { goto __twr_l20; }
    __twr_l20:;
    __twr_v216 = (uint64_t)(&BtCreateDagNode);
    __twr_v217 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v216)(_mng_target193, _mng_dagtype204);
    _mng_dagnode200 = __twr_v217;
    __twr_l19:;
    __twr_v218 = (uint64_t)(&BtConnectDagNodes);
    ((void (*)(uint64_t, uint64_t))__twr_v218)(_mng_dagnode200, _mng_dependnode215);
    __twr_l17:;
    __twr_v219 = *(uint64_t*)(_mng_dependentry209);
    _mng_dependentry209 = __twr_v219;
    __twr_l16:;
    if (_mng_dependentry209 != _mng_dependhead207) { goto __twr_l14; } else { goto __twr_l15; }
    __twr_l15:;
    __twr_v220 = 617ULL;
    __twr_v221 = _mng_target193 + __twr_v220;
    __twr_v222 = *(uint8_t*)(__twr_v221);
    if (!(__twr_v222)) { goto __twr_l21; } else { goto __twr_l22; }
    __twr_l22:;
    __twr_v223 = 504ULL;
    __twr_v224 = _mng_target193 + __twr_v223;
    _mng_sourceshead225 = __twr_v224;
    __twr_v226 = *(uint64_t*)(_mng_sourceshead225);
    _mng_sourcesentry227 = __twr_v226;
    __twr_v228 = (uint64_t)(&_mng_context229);
    *(uint64_t*)(__twr_v228) = _mng_target193;
    __twr_v230 = 8ULL;
    __twr_v231 = __twr_v228 + __twr_v230;
    *(uint64_t*)(__twr_v231) = _mng_dagnode200;
    if (_mng_sourcesentry227 == _mng_sourceshead225) { goto __twr_l24; } else { goto __twr_l23; }
    __twr_l23:;
    _mng_sourcesrcrd232 = _mng_sourcesentry227;
    __twr_v233 = 16ULL;
    __twr_v234 = 32ULL;
    __twr_v235 = _mng_sourcesrcrd232 + __twr_v234;
    __twr_v236 = *(uint64_t*)(__twr_v235);
    __twr_v237 = (uint64_t)(&_mng_context229);
    __twr_v238 = __twr_v237 + __twr_v233;
    *(uint64_t*)(__twr_v238) = __twr_v236;
    __twr_v239 = (uint64_t)(&TlIterateDirectory);
    __twr_v240 = *(uint64_t*)(__twr_v235);
    __twr_v241 = (uint64_t)(&BtProcessDirectoryEntry);
    __twr_v242 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v239)(__twr_v240, __twr_v241, __twr_v237);
    _mng_status243 = __twr_v242;
    if (!(_mng_status243)) { goto __twr_l26; } else { goto __twr_l27; }
    __twr_l27:;
    __twr_v244 = (uint64_t)(&TlInternalError);
    __twr_v245 = (uint64_t)(&"Failed to iterate directory");
    __twr_v246 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v244)(__twr_v245, __twr_v246, __twr_v246, __twr_v246);
    __twr_l26:;
    __twr_v247 = *(uint64_t*)(_mng_sourcesentry227);
    _mng_sourcesentry227 = __twr_v247;
    __twr_l25:;
    if (_mng_sourcesentry227 != _mng_sourceshead225) { goto __twr_l23; } else { goto __twr_l24; }
    __twr_l24:;
    __twr_v248 = (uint64_t)(&_mng_context229);
    __twr_v249 = 8ULL;
    __twr_v250 = __twr_v248 + __twr_v249;
    __twr_v251 = *(uint64_t*)(__twr_v250);
    _mng_dagnode200 = __twr_v251;
    __twr_l29:;
    __twr_l28:;
    __twr_l21:;
    __twr_v252 = 608ULL;
    __twr_v253 = _mng_target193 + __twr_v252;
    *(uint64_t*)(__twr_v253) = _mng_dagnode200;
    __twr_v254 = 1ULL;
    __twr_v255 = 616ULL;
    __twr_v256 = _mng_target193 + __twr_v255;
    *(uint8_t*)(__twr_v256) = __twr_v254;
    _jkl_retv = _mng_dagnode200;
    goto _jkl_epilogue;
    __twr_l8:;
    _jkl_epilogue:;
    return _jkl_retv;
}
void BtBuildDag() {
    uint64_t __twr_v257;
    uint64_t __twr_v258;
    uint64_t __twr_v259;
    uint64_t __twr_v260;
    uint64_t _mng_dagroot261;
    uint64_t __twr_v262;
    uint64_t __twr_v263;
    __twr_v257 = (uint64_t)(&BtBuildDagForTarget);
    __twr_v258 = (uint64_t)(&BtSelectedTarget);
    __twr_v259 = *(uint64_t*)(__twr_v258);
    __twr_v260 = ((uint64_t (*)(uint64_t))__twr_v257)(__twr_v259);
    _mng_dagroot261 = __twr_v260;
    if (_mng_dagroot261) { goto __twr_l31; } else { goto __twr_l32; }
    __twr_l32:;
    __twr_v262 = (uint64_t)(&TlPrintString);
    __twr_v263 = (uint64_t)(&"The target is already up to date.\n");
    ((void (*)(uint64_t))__twr_v262)(__twr_v263);
    goto _jkl_epilogue;
    __twr_l31:;
    __twr_l30:;
    _jkl_epilogue:;
}
