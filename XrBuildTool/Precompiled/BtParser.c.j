#include <stdint.h>
extern void TlInitialize();
extern uint64_t TlMeasureString(uint64_t _mng_str1);
extern void TlFillMemoryWithByte(uint64_t _mng_ptr2, uint64_t _mng_sz3, uint64_t _mng_byte4);
extern void TlCopyMemory(uint64_t _mng_dest5, uint64_t _mng_src6, uint64_t _mng_sz7);
extern void TlPrintString(uint64_t _mng_str8);
extern void TlPrintNumber(uint64_t _mng_num9);
extern void TlPrintCharacter(uint64_t _mng_byte10);
extern void TlInternalError(uint64_t _mng_str11, uint64_t _mng_err112, uint64_t _mng_err213, uint64_t _mng_err314);
extern void TlUserError(uint64_t _mng_str15, uint64_t _mng_err116, uint64_t _mng_err217, uint64_t _mng_err318);
extern void TlErrorExit();
extern uint64_t TlBumpAlloc(uint64_t _mng_bytes19, uint64_t _mng_o_ptr);
extern uint64_t TlAlloc(uint64_t _mng_bytes20, uint64_t _mng_o_ptr);
extern void TlFree(uint64_t _mng_ptr21);
extern uint64_t TlCompareString(uint64_t _mng_str122, uint64_t _mng_str223);
extern uint64_t TlCompareStringWithMax(uint64_t _mng_str124, uint64_t _mng_str225, uint64_t _mng_count26);
extern void TlCopyString(uint64_t _mng_dest27, uint64_t _mng_src28, uint64_t _mng_bufsize29);
extern uint64_t TlOpenSource(uint64_t _mng_filename30, uint64_t _mng_o_handle);
extern uint64_t TlOpenDestination(uint64_t _mng_filename31, uint64_t _mng_o_handle);
extern void TlClose(uint64_t _mng_handle32);
extern uint64_t TlReadFile(uint64_t _mng_handle33, uint64_t _mng_bytes34, uint64_t _mng_buffer35);
extern uint64_t TlWriteFile(uint64_t _mng_handle36, uint64_t _mng_bytes37, uint64_t _mng_buffer38);
extern uint64_t TlHeapHits;
extern uint64_t TlBumpBytesUsed;
extern uint64_t TlBumpHits;
extern void TlInitializeHashTable(uint64_t _mng_hashtable39);
extern void TlSummarizeHashTable(uint64_t _mng_hashtable40);
extern void TlInsertHashTable(uint64_t _mng_hashtable41, uint64_t _mng_entry42, uint64_t _mng_key43);
extern uint64_t TlLookupOrInsertHashTable(uint64_t _mng_hashtable44, uint64_t _mng_entry45, uint64_t _mng_key46);
extern uint64_t TlLookupOrAllocateEntryHashTable(uint64_t _mng_hashtable47, uint64_t _mng_entrysize48, uint64_t _mng_key49, uint64_t _mng_o_created);
extern uint64_t TlLookupHashTable(uint64_t _mng_hashtable50, uint64_t _mng_key51);
extern void TlRemoveHashTable(uint64_t _mng_entry52);
extern void TlEnumerateHashTable(uint64_t _mng_hashtable53, uint64_t _mng_enumfunc54);
extern uint64_t TlLookupHashTableByHash(uint64_t _mng_hashtable55, uint64_t _mng_key56, uint64_t _mng_hash57);
extern uint64_t TlHashString(uint64_t _mng_str58);
extern void TlInitializeSymbolTable(uint64_t _mng_symboltable59, uint64_t _mng_outerscope60, uint64_t _mng_deletefunc61);
extern uint64_t TlCreateSymbolTable(uint64_t _mng_outerscope62, uint64_t _mng_deletefunc63);
extern uint64_t TlDeleteSymbolTable(uint64_t _mng_symboltable64);
extern uint64_t TlLookupSymbolTable(uint64_t _mng_symboltable65, uint64_t _mng_name66);
extern void TlInsertSymbolTable(uint64_t _mng_symboltable67, uint64_t _mng_entry68, uint64_t _mng_name69);
extern void TlRemoveSymbolTable(uint64_t _mng_entry70);
extern void TlInitializeDynamicBuffer(uint64_t _mng_array71);
extern void TlUninitializeDynamicBuffer(uint64_t _mng_array72);
extern void TlInsertDynamicBuffer(uint64_t _mng_array73, uint64_t _mng_byte74);
extern void TlCopyIntoDynamicBuffer(uint64_t _mng_array75, uint64_t _mng_srcbuf76, uint64_t _mng_length77);
extern void TlInsertNumberDynamicBuffer(uint64_t _mng_array78, uint64_t _mng_number79, uint64_t _mng_base80);
extern uint64_t TlPopDynamicBuffer(uint64_t _mng_array81);
extern uint64_t TlMatchPath(uint64_t _mng_path82, uint64_t _mng_pathset83, uint64_t _mng_resultingpath84, uint64_t _mng_o_handle);
extern void TlCopyParentPath(uint64_t _mng_srcpath85, uint64_t _mng_destpath86);
extern void TlInitializeZone(uint64_t _mng_zone87, uint64_t _mng_blocksize88);
extern uint64_t TlAllocateFromZone(uint64_t _mng_zone89);
extern void TlFreeToZone(uint64_t _mng_zone90, uint64_t _mng_block91);
extern uint64_t TlIsPowerOfTwo(uint64_t _mng_constant92);
extern void TlPunchValue(uint64_t _mng_ptr93, uint64_t _mng_value94, uint64_t _mng_bytes95);
extern uint64_t FeInputFile[32];
extern uint64_t FeInputFileHandle;
extern uint64_t FeIsMacroArgument(uint64_t _mng_arg96);
extern uint64_t FeCreateFileBlock(uint64_t _mng_includename97, uint64_t _mng_o_created);
extern void FeCopyPathFileBlock(uint64_t _mng_fileblock98, uint64_t _mng_filepath99);
extern uint64_t LexCharTreatment[32];
extern uint64_t LexCurrentStream;
extern uint64_t LexCurrentMacroScope;
extern uint32_t LexFalseCount;
extern uint32_t LexMacroDepth;
extern void LexInitialize();
extern uint64_t LexCreateSymbolTable(uint64_t _mng_outerscope100);
extern void LexInitializePreprocessor();
extern void LexDefineMacroFromArgumentString(uint64_t _mng_arg101);
extern void LexExpandMacro(uint64_t _mng_macro102, uint64_t _mng_token103);
extern void LexInitializeStreamZone();
extern void LexInitializeStream(uint64_t _mng_stream104, uint64_t _mng_macro105);
extern void LexUninitializeStream(uint64_t _mng_stream106);
extern uint64_t LexAllocateStream();
extern void LexFreeStream(uint64_t _mng_stream107);
extern void LexPushStream(uint64_t _mng_stream108);
extern uint64_t LexPopStream();
extern void LexInitializeFileStream(uint64_t _mng_stream109, uint64_t _mng_fileblock110, uint64_t _mng_handle111);
extern uint64_t LexCreateFileStream(uint64_t _mng_fileblock112, uint64_t _mng_handle113);
extern uint64_t LexStreamNextCharacter();
extern void LexParseDirective();
extern void LexCopyToken(uint64_t _mng_dest114, uint64_t _mng_src115);
extern void LexGetToken(uint64_t _mng_token116);
extern void LexPutbackToken(uint64_t _mng_token117);
extern uint64_t LexMatchToken(uint64_t _mng_token118, uint64_t _mng_type119, uint64_t _mng_subtype120);
extern void LexStreamError(uint64_t _mng_str121, uint64_t _mng_err1122, uint64_t _mng_err2123, uint64_t _mng_err3124);
extern void LexTokenError(uint64_t _mng_token125, uint64_t _mng_str126, uint64_t _mng_err1127, uint64_t _mng_err2128, uint64_t _mng_err3129);
extern uint64_t LexCrunchNumber(uint64_t _mng_token130, uint64_t _mng_buffer131);
uint64_t BtTargetHashTable[196];
uint64_t BtCurrentTarget;
void BtTargetInfoFile() {
    uint64_t __twr_v132;
    uint64_t __twr_v133;
    uint64_t _mng_token134[4];
    uint64_t __twr_v135;
    uint64_t __twr_v136;
    uint64_t __twr_v137;
    uint64_t __twr_v138;
    uint64_t __twr_v139;
    uint64_t __twr_v140;
    uint64_t __twr_v141;
    uint64_t __twr_v142;
    uint64_t __twr_v143;
    uint64_t _mng_string144;
    uint64_t __twr_v145;
    uint64_t __twr_v146;
    uint64_t __twr_v147;
    uint64_t __twr_v148;
    uint64_t __twr_v149;
    uint64_t __twr_v150;
    uint64_t __twr_v151;
    __twr_v132 = (uint64_t)(&LexMatchToken);
    __twr_v133 = (uint64_t)(&_mng_token134);
    __twr_v135 = 4ULL;
    __twr_v136 = 0ULL;
    __twr_v137 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v132)(__twr_v133, __twr_v135, __twr_v136);
    if (__twr_v137) { goto __twr_l2; } else { goto __twr_l3; }
    __twr_l3:;
    __twr_v138 = (uint64_t)(&LexTokenError);
    __twr_v139 = (uint64_t)(&_mng_token134);
    __twr_v140 = (uint64_t)(&"Expected a string");
    __twr_v141 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v138)(__twr_v139, __twr_v140, __twr_v141, __twr_v141, __twr_v141);
    __twr_l2:;
    __twr_v142 = (uint64_t)(&_mng_token134);
    __twr_v143 = *(uint64_t*)(__twr_v142);
    _mng_string144 = __twr_v143;
    __twr_v145 = 64ULL;
    __twr_v146 = _mng_string144 + __twr_v145;
    __twr_v147 = *(uint64_t*)(__twr_v146);
    __twr_v148 = (uint64_t)(&BtCurrentTarget);
    __twr_v149 = *(uint64_t*)(__twr_v148);
    __twr_v150 = 64ULL;
    __twr_v151 = __twr_v149 + __twr_v150;
    *(uint64_t*)(__twr_v151) = __twr_v147;
    __twr_l1:;
    _jkl_epilogue:;
}
void BtTargetInfoDepend() {
    uint64_t __twr_v152;
    uint64_t __twr_v153;
    uint64_t _mng_token154[4];
    uint64_t __twr_v155;
    uint64_t __twr_v156;
    uint64_t __twr_v157;
    uint64_t __twr_v158;
    uint64_t __twr_v159;
    uint64_t __twr_v160;
    uint64_t __twr_v161;
    uint64_t __twr_v162;
    uint64_t __twr_v163;
    uint64_t _mng_string164;
    uint64_t __twr_v165;
    uint64_t __twr_v166;
    uint64_t __twr_v167;
    uint64_t __twr_v168;
    uint64_t __twr_v169;
    uint64_t __twr_v170;
    uint64_t _mng_target171;
    uint64_t __twr_v172;
    uint64_t __twr_v173;
    uint64_t __twr_v174;
    uint64_t __twr_v175;
    uint64_t __twr_v176;
    uint64_t __twr_v177;
    uint64_t __twr_v178;
    uint64_t __twr_v179;
    uint64_t _mng_head180;
    uint64_t __twr_v181;
    uint64_t _mng_listentry182;
    uint64_t _mng_entry183;
    uint64_t __twr_v184;
    uint64_t __twr_v185;
    uint64_t __twr_v186;
    uint64_t __twr_v187;
    uint64_t __twr_v188;
    uint64_t __twr_v189;
    uint64_t __twr_v190;
    uint64_t _mng_entry191;
    uint64_t _mng_status192;
    uint64_t __twr_v193;
    uint64_t __twr_v194;
    uint64_t __twr_v195;
    uint64_t __twr_v196;
    uint64_t __twr_v197;
    uint64_t __twr_v198;
    uint64_t __twr_v199;
    uint64_t __twr_v200;
    uint64_t __twr_v201;
    uint64_t _mng_listhead202;
    uint64_t _mng_listentry203;
    uint64_t __twr_v204;
    uint64_t __twr_v205;
    uint64_t __twr_v206;
    uint64_t _mng_last207;
    uint64_t __twr_v208;
    __twr_v152 = (uint64_t)(&LexMatchToken);
    __twr_v153 = (uint64_t)(&_mng_token154);
    __twr_v155 = 4ULL;
    __twr_v156 = 0ULL;
    __twr_v157 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v152)(__twr_v153, __twr_v155, __twr_v156);
    if (__twr_v157) { goto __twr_l5; } else { goto __twr_l6; }
    __twr_l6:;
    __twr_v158 = (uint64_t)(&LexTokenError);
    __twr_v159 = (uint64_t)(&_mng_token154);
    __twr_v160 = (uint64_t)(&"Expected a string");
    __twr_v161 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v158)(__twr_v159, __twr_v160, __twr_v161, __twr_v161, __twr_v161);
    __twr_l5:;
    __twr_v162 = (uint64_t)(&_mng_token154);
    __twr_v163 = *(uint64_t*)(__twr_v162);
    _mng_string164 = __twr_v163;
    __twr_v165 = (uint64_t)(&TlLookupHashTable);
    __twr_v166 = (uint64_t)(&BtTargetHashTable);
    __twr_v167 = 64ULL;
    __twr_v168 = _mng_string164 + __twr_v167;
    __twr_v169 = *(uint64_t*)(__twr_v168);
    __twr_v170 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v165)(__twr_v166, __twr_v169);
    _mng_target171 = __twr_v170;
    if (_mng_target171) { goto __twr_l7; } else { goto __twr_l8; }
    __twr_l8:;
    __twr_v172 = (uint64_t)(&LexTokenError);
    __twr_v173 = (uint64_t)(&_mng_token154);
    __twr_v174 = (uint64_t)(&"Target not defined");
    __twr_v175 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v172)(__twr_v173, __twr_v174, __twr_v175, __twr_v175, __twr_v175);
    __twr_l7:;
    __twr_v176 = (uint64_t)(&BtCurrentTarget);
    __twr_v177 = *(uint64_t*)(__twr_v176);
    __twr_v178 = 48ULL;
    __twr_v179 = __twr_v177 + __twr_v178;
    _mng_head180 = __twr_v179;
    __twr_v181 = *(uint64_t*)(_mng_head180);
    _mng_listentry182 = __twr_v181;
    if (_mng_head180 == _mng_listentry182) { goto __twr_l10; } else { goto __twr_l9; }
    __twr_l9:;
    _mng_entry183 = _mng_listentry182;
    __twr_v184 = 16ULL;
    __twr_v185 = _mng_entry183 + __twr_v184;
    __twr_v186 = *(uint64_t*)(__twr_v185);
    if (__twr_v186 != _mng_target171) { goto __twr_l12; } else { goto __twr_l13; }
    __twr_l13:;
    goto _jkl_epilogue;
    __twr_l12:;
    __twr_v187 = *(uint64_t*)(_mng_listentry182);
    _mng_listentry182 = __twr_v187;
    __twr_l11:;
    if (_mng_head180 != _mng_listentry182) { goto __twr_l9; } else { goto __twr_l10; }
    __twr_l10:;
    __twr_v188 = (uint64_t)(&TlBumpAlloc);
    __twr_v189 = 24ULL;
    __twr_v190 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v188)(__twr_v189, (uint64_t)(&_mng_entry191));
    _mng_status192 = __twr_v190;
    if (!(_mng_status192)) { goto __twr_l14; } else { goto __twr_l15; }
    __twr_l15:;
    __twr_v193 = (uint64_t)(&TlInternalError);
    __twr_v194 = (uint64_t)(&"Failed to allocate depends list entry");
    __twr_v195 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v193)(__twr_v194, __twr_v195, __twr_v195, __twr_v195);
    __twr_l14:;
    __twr_v196 = 16ULL;
    __twr_v197 = _mng_entry191 + __twr_v196;
    *(uint64_t*)(__twr_v197) = _mng_target171;
    __twr_v198 = (uint64_t)(&BtCurrentTarget);
    __twr_v199 = *(uint64_t*)(__twr_v198);
    __twr_v200 = 48ULL;
    __twr_v201 = __twr_v199 + __twr_v200;
    _mng_listhead202 = __twr_v201;
    _mng_listentry203 = _mng_entry191;
    __twr_v204 = 8ULL;
    __twr_v205 = _mng_listhead202 + __twr_v204;
    __twr_v206 = *(uint64_t*)(__twr_v205);
    _mng_last207 = __twr_v206;
    __twr_v208 = _mng_listentry203 + __twr_v204;
    *(uint64_t*)(__twr_v208) = _mng_last207;
    *(uint64_t*)(_mng_listentry203) = _mng_listhead202;
    *(uint64_t*)(_mng_last207) = _mng_listentry203;
    *(uint64_t*)(__twr_v205) = _mng_listentry203;
    __twr_l4:;
    _jkl_epilogue:;
}
uint64_t BtTargetInfoSpecifiers[2] = {
    (uint64_t)(&BtTargetInfoFile),
    (uint64_t)(&BtTargetInfoDepend),
};
uint64_t BtParseTarget() {
    uint64_t _jkl_retv;
    uint64_t __twr_v209;
    uint64_t __twr_v210;
    uint64_t _mng_token211[4];
    uint64_t __twr_v212;
    uint64_t __twr_v213;
    uint64_t __twr_v214;
    uint64_t __twr_v215;
    uint64_t __twr_v216;
    uint64_t __twr_v217;
    uint64_t __twr_v218;
    uint64_t __twr_v219;
    uint64_t __twr_v220;
    uint64_t __twr_v221;
    uint64_t __twr_v222;
    uint64_t __twr_v223;
    uint64_t __twr_v224;
    uint64_t __twr_v225;
    uint64_t __twr_v226;
    uint64_t __twr_v227;
    uint64_t _mng_nametoken228[4];
    uint64_t __twr_v229;
    uint64_t __twr_v230;
    uint64_t __twr_v231;
    uint64_t __twr_v232;
    uint64_t __twr_v233;
    uint64_t __twr_v234;
    uint64_t __twr_v235;
    uint64_t __twr_v236;
    uint64_t __twr_v237;
    uint64_t _mng_namestring238;
    uint64_t __twr_v239;
    uint64_t __twr_v240;
    uint64_t __twr_v241;
    uint64_t __twr_v242;
    uint64_t __twr_v243;
    uint64_t __twr_v244;
    uint64_t __twr_v245;
    uint64_t __twr_v246;
    uint64_t __twr_v247;
    uint64_t __twr_v248;
    uint64_t __twr_v249;
    uint64_t __twr_v250;
    uint64_t __twr_v251;
    uint64_t _mng_target252;
    uint64_t _mng_status253;
    uint64_t __twr_v254;
    uint64_t __twr_v255;
    uint64_t __twr_v256;
    uint64_t __twr_v257;
    uint64_t __twr_v258;
    uint64_t __twr_v259;
    uint64_t __twr_v260;
    uint64_t __twr_v261;
    uint64_t _mng_listhead262;
    uint64_t __twr_v263;
    uint64_t __twr_v264;
    uint64_t __twr_v265;
    uint64_t __twr_v266;
    uint64_t __twr_v267;
    uint64_t __twr_v268;
    uint64_t __twr_v269;
    uint64_t __twr_v270;
    uint64_t __twr_v271;
    uint64_t __twr_v272;
    uint64_t __twr_v273;
    uint64_t __twr_v274;
    uint64_t __twr_v275;
    uint64_t __twr_v276;
    uint64_t __twr_v277;
    uint64_t __twr_v278;
    uint64_t __twr_v279;
    uint64_t __twr_v280;
    uint64_t __twr_v281;
    uint64_t __twr_v282;
    uint64_t __twr_v283;
    uint64_t __twr_v284;
    uint64_t __twr_v285;
    uint64_t __twr_v286;
    uint64_t __twr_v287;
    uint64_t __twr_v288;
    uint64_t __twr_v289;
    uint64_t __twr_v290;
    uint64_t __twr_v291;
    uint64_t __twr_v292;
    uint64_t __twr_v293;
    uint64_t __twr_v294;
    uint64_t __twr_v295;
    uint64_t __twr_v296;
    uint64_t __twr_v297;
    uint64_t __twr_v298;
    __twr_v209 = (uint64_t)(&LexGetToken);
    __twr_v210 = (uint64_t)(&_mng_token211);
    ((void (*)(uint64_t))__twr_v209)(__twr_v210);
    __twr_v212 = 24ULL;
    __twr_v213 = __twr_v210 + __twr_v212;
    __twr_v214 = *(uint8_t*)(__twr_v213);
    __twr_v215 = 6ULL;
    if (__twr_v214 != __twr_v215) { goto __twr_l17; } else { goto __twr_l18; }
    __twr_l18:;
    __twr_v216 = 0ULL;
    _jkl_retv = __twr_v216;
    goto _jkl_epilogue;
    __twr_l17:;
    __twr_v217 = (uint64_t)(&_mng_token211);
    __twr_v218 = 24ULL;
    __twr_v219 = __twr_v217 + __twr_v218;
    __twr_v220 = *(uint8_t*)(__twr_v219);
    __twr_v221 = 1ULL;
    if (__twr_v220 == __twr_v221) { goto __twr_l19; } else { goto __twr_l20; }
    __twr_l20:;
    __twr_v222 = (uint64_t)(&LexTokenError);
    __twr_v223 = (uint64_t)(&_mng_token211);
    __twr_v224 = (uint64_t)(&"Expected TARGET");
    __twr_v225 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v222)(__twr_v223, __twr_v224, __twr_v225, __twr_v225, __twr_v225);
    __twr_l19:;
    __twr_v226 = (uint64_t)(&LexMatchToken);
    __twr_v227 = (uint64_t)(&_mng_nametoken228);
    __twr_v229 = 4ULL;
    __twr_v230 = 0ULL;
    __twr_v231 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v226)(__twr_v227, __twr_v229, __twr_v230);
    if (__twr_v231) { goto __twr_l21; } else { goto __twr_l22; }
    __twr_l22:;
    __twr_v232 = (uint64_t)(&LexTokenError);
    __twr_v233 = (uint64_t)(&_mng_nametoken228);
    __twr_v234 = (uint64_t)(&"Expected a string");
    __twr_v235 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v232)(__twr_v233, __twr_v234, __twr_v235, __twr_v235, __twr_v235);
    __twr_l21:;
    __twr_v236 = (uint64_t)(&_mng_nametoken228);
    __twr_v237 = *(uint64_t*)(__twr_v236);
    _mng_namestring238 = __twr_v237;
    __twr_v239 = (uint64_t)(&TlLookupHashTable);
    __twr_v240 = (uint64_t)(&BtTargetHashTable);
    __twr_v241 = 64ULL;
    __twr_v242 = _mng_namestring238 + __twr_v241;
    __twr_v243 = *(uint64_t*)(__twr_v242);
    __twr_v244 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v239)(__twr_v240, __twr_v243);
    if (!(__twr_v244)) { goto __twr_l23; } else { goto __twr_l24; }
    __twr_l24:;
    __twr_v245 = (uint64_t)(&LexTokenError);
    __twr_v246 = (uint64_t)(&_mng_nametoken228);
    __twr_v247 = (uint64_t)(&"Target already defined");
    __twr_v248 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v245)(__twr_v246, __twr_v247, __twr_v248, __twr_v248, __twr_v248);
    __twr_l23:;
    __twr_v249 = (uint64_t)(&TlBumpAlloc);
    __twr_v250 = 72ULL;
    __twr_v251 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v249)(__twr_v250, (uint64_t)(&_mng_target252));
    _mng_status253 = __twr_v251;
    if (!(_mng_status253)) { goto __twr_l25; } else { goto __twr_l26; }
    __twr_l26:;
    __twr_v254 = (uint64_t)(&TlInternalError);
    __twr_v255 = (uint64_t)(&"Failed to allocate target");
    __twr_v256 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v254)(__twr_v255, __twr_v256, __twr_v256, __twr_v256);
    __twr_l25:;
    __twr_v257 = 0ULL;
    __twr_v258 = 64ULL;
    __twr_v259 = _mng_target252 + __twr_v258;
    *(uint64_t*)(__twr_v259) = __twr_v257;
    __twr_v260 = 48ULL;
    __twr_v261 = _mng_target252 + __twr_v260;
    _mng_listhead262 = __twr_v261;
    __twr_v263 = 8ULL;
    __twr_v264 = _mng_listhead262 + __twr_v263;
    *(uint64_t*)(__twr_v264) = _mng_listhead262;
    *(uint64_t*)(_mng_listhead262) = _mng_listhead262;
    __twr_v265 = (uint64_t)(&BtCurrentTarget);
    *(uint64_t*)(__twr_v265) = _mng_target252;
    __twr_v266 = (uint64_t)(&LexMatchToken);
    __twr_v267 = (uint64_t)(&_mng_token211);
    __twr_v268 = 3ULL;
    __twr_v269 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v266)(__twr_v267, __twr_v268, __twr_v257);
    if (__twr_v269) { goto __twr_l28; } else { goto __twr_l27; }
    __twr_l27:;
    __twr_v270 = (uint64_t)(&LexMatchToken);
    __twr_v271 = (uint64_t)(&_mng_token211);
    __twr_v272 = 2ULL;
    __twr_v273 = 0ULL;
    __twr_v274 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v270)(__twr_v271, __twr_v272, __twr_v273);
    if (__twr_v274) { goto __twr_l30; } else { goto __twr_l31; }
    __twr_l31:;
    __twr_v275 = (uint64_t)(&LexTokenError);
    __twr_v276 = (uint64_t)(&_mng_token211);
    __twr_v277 = (uint64_t)(&"Expected a target info specifier");
    __twr_v278 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v275)(__twr_v276, __twr_v277, __twr_v278, __twr_v278, __twr_v278);
    __twr_l30:;
    __twr_v279 = (uint64_t)(&BtTargetInfoSpecifiers);
    __twr_v280 = (uint64_t)(&_mng_token211);
    __twr_v281 = 25ULL;
    __twr_v282 = __twr_v280 + __twr_v281;
    __twr_v283 = *(uint8_t*)(__twr_v282);
    __twr_v284 = 3ULL;
    __twr_v285 = __twr_v283 << __twr_v284;
    __twr_v286 = __twr_v279 + __twr_v285;
    __twr_v287 = *(uint64_t*)(__twr_v286);
    ((void (*)())__twr_v287)();
    __twr_l29:;
    __twr_v288 = (uint64_t)(&LexMatchToken);
    __twr_v289 = (uint64_t)(&_mng_token211);
    __twr_v290 = 3ULL;
    __twr_v291 = 0ULL;
    __twr_v292 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v288)(__twr_v289, __twr_v290, __twr_v291);
    if (!(__twr_v292)) { goto __twr_l27; } else { goto __twr_l28; }
    __twr_l28:;
    __twr_v293 = (uint64_t)(&TlInsertHashTable);
    __twr_v294 = (uint64_t)(&BtTargetHashTable);
    __twr_v295 = 64ULL;
    __twr_v296 = _mng_namestring238 + __twr_v295;
    __twr_v297 = *(uint64_t*)(__twr_v296);
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v293)(__twr_v294, _mng_target252, __twr_v297);
    __twr_v298 = 1ULL;
    _jkl_retv = __twr_v298;
    goto _jkl_epilogue;
    __twr_l16:;
    _jkl_epilogue:;
    return _jkl_retv;
}
void BtParse() {
    uint64_t __twr_v299;
    uint64_t __twr_v300;
    uint64_t __twr_v301;
    uint64_t __twr_v302;
    uint64_t __twr_v303;
    uint64_t __twr_v304;
    __twr_v299 = (uint64_t)(&TlInitializeHashTable);
    __twr_v300 = (uint64_t)(&BtTargetHashTable);
    ((void (*)(uint64_t))__twr_v299)(__twr_v300);
    __twr_v301 = (uint64_t)(&BtParseTarget);
    __twr_v302 = ((uint64_t (*)())__twr_v301)();
    if (!(__twr_v302)) { goto __twr_l34; } else { goto __twr_l33; }
    __twr_l33:;
    __twr_l35:;
    __twr_v303 = (uint64_t)(&BtParseTarget);
    __twr_v304 = ((uint64_t (*)())__twr_v303)();
    if (__twr_v304) { goto __twr_l33; } else { goto __twr_l34; }
    __twr_l34:;
    __twr_l32:;
    _jkl_epilogue:;
}
