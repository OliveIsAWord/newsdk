#include <stdint.h>
extern void TlInitialize();
extern uint64_t TlMeasureString(uint64_t _mng_str1);
extern void TlFillMemoryWithByte(uint64_t _mng_ptr2, uint64_t _mng_sz3, uint64_t _mng_byte4);
extern void TlCopyMemory(uint64_t _mng_dest5, uint64_t _mng_src6, uint64_t _mng_sz7);
extern void TlPrintString(uint64_t _mng_str8);
extern void TlPrintNumber(uint64_t _mng_num9);
extern void TlPrintCharacter(uint64_t _mng_byte10);
extern void TlInternalError(uint64_t _mng_str11, uint64_t _mng_err112, uint64_t _mng_err213, uint64_t _mng_err314);
extern void TlUserError(uint64_t _mng_str15, uint64_t _mng_err116, uint64_t _mng_err217, uint64_t _mng_err318);
extern void TlErrorExit();
extern uint64_t TlBumpAlloc(uint64_t _mng_bytes19, uint64_t _mng_o_ptr);
extern uint64_t TlAlloc(uint64_t _mng_bytes20, uint64_t _mng_o_ptr);
extern void TlFree(uint64_t _mng_ptr21);
extern uint64_t TlCompareString(uint64_t _mng_str122, uint64_t _mng_str223);
extern uint64_t TlCompareStringWithMax(uint64_t _mng_str124, uint64_t _mng_str225, uint64_t _mng_count26);
extern void TlCopyString(uint64_t _mng_dest27, uint64_t _mng_src28, uint64_t _mng_bufsize29);
extern uint64_t TlOpenSource(uint64_t _mng_filename30, uint64_t _mng_o_handle);
extern uint64_t TlOpenDestination(uint64_t _mng_filename31, uint64_t _mng_o_handle);
extern void TlClose(uint64_t _mng_handle32);
extern uint64_t TlReadFile(uint64_t _mng_handle33, uint64_t _mng_bytes34, uint64_t _mng_buffer35);
extern uint64_t TlWriteFile(uint64_t _mng_handle36, uint64_t _mng_bytes37, uint64_t _mng_buffer38);
extern uint64_t TlHeapHits;
extern uint64_t TlBumpBytesUsed;
extern uint64_t TlBumpHits;
extern void TlInitializeHashTable(uint64_t _mng_hashtable39);
extern void TlSummarizeHashTable(uint64_t _mng_hashtable40);
extern void TlInsertHashTable(uint64_t _mng_hashtable41, uint64_t _mng_entry42, uint64_t _mng_key43);
extern uint64_t TlLookupOrInsertHashTable(uint64_t _mng_hashtable44, uint64_t _mng_entry45, uint64_t _mng_key46);
extern uint64_t TlLookupOrAllocateEntryHashTable(uint64_t _mng_hashtable47, uint64_t _mng_entrysize48, uint64_t _mng_key49, uint64_t _mng_o_created);
extern uint64_t TlLookupHashTable(uint64_t _mng_hashtable50, uint64_t _mng_key51);
extern void TlRemoveHashTable(uint64_t _mng_entry52);
extern void TlEnumerateHashTable(uint64_t _mng_hashtable53, uint64_t _mng_enumfunc54);
extern uint64_t TlLookupHashTableByHash(uint64_t _mng_hashtable55, uint64_t _mng_key56, uint64_t _mng_hash57);
extern uint64_t TlHashString(uint64_t _mng_str58);
extern void TlInitializeSymbolTable(uint64_t _mng_symboltable59, uint64_t _mng_outerscope60, uint64_t _mng_deletefunc61);
extern uint64_t TlCreateSymbolTable(uint64_t _mng_outerscope62, uint64_t _mng_deletefunc63);
extern uint64_t TlDeleteSymbolTable(uint64_t _mng_symboltable64);
extern uint64_t TlLookupSymbolTable(uint64_t _mng_symboltable65, uint64_t _mng_name66);
extern void TlInsertSymbolTable(uint64_t _mng_symboltable67, uint64_t _mng_entry68, uint64_t _mng_name69);
extern void TlRemoveSymbolTable(uint64_t _mng_entry70);
extern void TlInitializeDynamicBuffer(uint64_t _mng_array71);
extern void TlUninitializeDynamicBuffer(uint64_t _mng_array72);
extern void TlInsertDynamicBuffer(uint64_t _mng_array73, uint64_t _mng_byte74);
extern void TlCopyIntoDynamicBuffer(uint64_t _mng_array75, uint64_t _mng_srcbuf76, uint64_t _mng_length77);
extern void TlInsertNumberDynamicBuffer(uint64_t _mng_array78, uint64_t _mng_number79, uint64_t _mng_base80);
extern uint64_t TlPopDynamicBuffer(uint64_t _mng_array81);
extern uint64_t TlMatchPath(uint64_t _mng_path82, uint64_t _mng_pathset83, uint64_t _mng_resultingpath84, uint64_t _mng_o_handle);
extern void TlCopyParentPath(uint64_t _mng_srcpath85, uint64_t _mng_destpath86);
extern uint64_t TlGetFileName(uint64_t _mng_path87);
extern uint64_t TlIsPathDirectory(uint64_t _mng_path88);
extern uint64_t TlPathExists(uint64_t _mng_path89);
extern uint64_t TlIterateDirectory(uint64_t _mng_path90, uint64_t _mng_callback91, uint64_t _mng_context92);
extern uint64_t TlGetPathExtension(uint64_t _mng_path93);
extern uint64_t TlStatFile(uint64_t _mng_path94, uint64_t _mng_statrecord95);
extern uint64_t TlCreateDirectory(uint64_t _mng_path96);
extern uint64_t TlSwitchDirectory(uint64_t _mng_path97);
extern void TlInitializeZone(uint64_t _mng_zone98, uint64_t _mng_blocksize99);
extern uint64_t TlAllocateFromZone(uint64_t _mng_zone100);
extern void TlFreeToZone(uint64_t _mng_zone101, uint64_t _mng_block102);
extern uint64_t TlIsPowerOfTwo(uint64_t _mng_constant103);
extern void TlPunchValue(uint64_t _mng_ptr104, uint64_t _mng_value105, uint64_t _mng_bytes106);
extern uint64_t TlTokenize(uint64_t _mng_buffer107, uint64_t _mng_tokenbuffer108, uint64_t _mng_bufsize109, uint64_t _mng_delimiter110);
extern uint64_t TlStringToNumber(uint64_t _mng_src111, uint64_t _mng_bufsize112, uint64_t _mng_o_num);
extern void TlSetTerminationHandler(uint64_t _mng_handler113);
extern uint64_t TlCreateThread(uint64_t _mng_startroutine114, uint64_t _mng_arg115, uint64_t _mng_o_thread);
extern uint64_t TlJoinThread(uint64_t _mng_thread116);
extern uint64_t TlCreateMutex();
extern void TlAcquireMutex(uint64_t _mng_mutex117);
extern void TlReleaseMutex(uint64_t _mng_mutex118);
extern uint64_t TlCreateSemaphore(uint64_t _mng_initialvalue119);
extern void TlAcquireSemaphore(uint64_t _mng_semaphore120);
extern void TlReleaseSemaphore(uint64_t _mng_semaphore121);
extern uint64_t TlSystem(uint64_t _mng_cmdline122);
extern uint64_t TlCurrentEpochTime();
extern uint64_t FeInputFile[32];
extern uint64_t FeInputFileHandle;
extern uint64_t FeIsMacroArgument(uint64_t _mng_arg123);
extern uint64_t FeCreateFileBlock(uint64_t _mng_includename124, uint64_t _mng_o_created);
extern void FeCopyPathFileBlock(uint64_t _mng_fileblock125, uint64_t _mng_filepath126);
extern uint64_t LexCharTreatment[32];
extern uint64_t LexCurrentStream;
extern uint64_t LexCurrentMacroScope;
extern uint32_t LexFalseCount;
extern uint32_t LexMacroDepth;
extern void LexInitialize();
extern uint64_t LexCreateSymbolTable(uint64_t _mng_outerscope127);
extern void LexInitializePreprocessor();
extern void LexDefineMacroFromArgumentString(uint64_t _mng_arg128);
extern void LexExpandMacro(uint64_t _mng_macro129, uint64_t _mng_token130);
extern void LexInitializeStreamZone();
extern void LexInitializeStream(uint64_t _mng_stream131, uint64_t _mng_macro132);
extern void LexUninitializeStream(uint64_t _mng_stream133);
extern uint64_t LexAllocateStream();
extern void LexFreeStream(uint64_t _mng_stream134);
extern void LexPushStream(uint64_t _mng_stream135);
extern uint64_t LexPopStream();
extern void LexInitializeFileStream(uint64_t _mng_stream136, uint64_t _mng_fileblock137, uint64_t _mng_handle138);
extern uint64_t LexCreateFileStream(uint64_t _mng_fileblock139, uint64_t _mng_handle140);
extern uint64_t LexStreamNextCharacter();
extern void LexParseDirective();
extern void LexCopyToken(uint64_t _mng_dest141, uint64_t _mng_src142);
extern void LexGetToken(uint64_t _mng_token143);
extern void LexPutbackToken(uint64_t _mng_token144);
extern uint64_t LexMatchToken(uint64_t _mng_token145, uint64_t _mng_type146, uint64_t _mng_subtype147);
extern void LexStreamError(uint64_t _mng_str148, uint64_t _mng_err1149, uint64_t _mng_err2150, uint64_t _mng_err3151);
extern void LexTokenError(uint64_t _mng_token152, uint64_t _mng_str153, uint64_t _mng_err1154, uint64_t _mng_err2155, uint64_t _mng_err3156);
extern uint64_t LexCrunchNumber(uint64_t _mng_token157, uint64_t _mng_buffer158);
extern uint64_t LexExposedMacroListHead[2];
extern uint64_t BtTargetArchitectureName[8];
extern uint64_t BtJobCount;
extern uint64_t BtStatFile(uint64_t _mng_fullpath159);
uint64_t BtTargetHashTable[196];
uint64_t BtCurrentTarget;
uint64_t BtCHost = 0ULL;
uint64_t BtArchHasSuffix = 0ULL;
uint64_t BtCleanUp = 0ULL;
uint64_t BtTargetArchitectureName[8];
uint64_t BtSdkBase[32];
uint64_t BtArchNameSuffix[32];
extern uint64_t FeTargetName[32];
uint64_t BtSelectedTarget;
void BtParseStandardPath(uint64_t _mng_stdpath160, uint64_t _mng_fullpath161, uint64_t _mng_errtoken162) {
    uint64_t __twr_v163;
    uint64_t __twr_v164;
    uint64_t __twr_v165;
    uint64_t _mng_stdpathstr166;
    uint64_t __twr_v167;
    uint64_t __twr_v168;
    uint64_t __twr_v169;
    uint64_t __twr_v170;
    uint64_t __twr_v171;
    uint64_t __twr_v172;
    uint64_t __twr_v173;
    uint64_t __twr_v174;
    uint64_t __twr_v175;
    uint64_t __twr_v176;
    uint64_t _mng_count177;
    uint64_t __twr_v178;
    uint64_t __twr_v179;
    uint64_t __twr_v180;
    uint64_t __twr_v181;
    uint64_t __twr_v182;
    uint64_t __twr_v183;
    uint64_t __twr_v184;
    uint64_t __twr_v185;
    uint64_t __twr_v186;
    uint64_t __twr_v187;
    uint64_t __twr_v188;
    uint64_t __twr_v189;
    uint64_t __twr_v190;
    uint64_t __twr_v191;
    uint64_t __twr_v192;
    uint64_t __twr_v193;
    uint64_t __twr_v194;
    uint64_t __twr_v195;
    uint64_t __twr_v196;
    uint64_t _mng_macro197;
    uint64_t __twr_v198;
    uint64_t __twr_v199;
    uint64_t __twr_v200;
    uint64_t __twr_v201;
    uint64_t __twr_v202;
    uint64_t __twr_v203;
    uint64_t __twr_v204;
    uint64_t __twr_v205;
    uint64_t __twr_v206;
    uint64_t __twr_v207;
    uint64_t __twr_v208;
    uint64_t __twr_v209;
    uint64_t __twr_v210;
    uint64_t __twr_v211;
    uint64_t __twr_v212;
    uint64_t __twr_v213;
    uint64_t __twr_v214;
    uint64_t __twr_v215;
    uint64_t __twr_v216;
    uint64_t __twr_v217;
    uint64_t __twr_v218;
    uint64_t __twr_v219;
    uint64_t __twr_v220;
    uint64_t __twr_v221;
    uint64_t __twr_v222;
    uint64_t __twr_v223;
    uint64_t __twr_v224;
    uint64_t __twr_v225;
    uint64_t __twr_v226;
    uint64_t __twr_v227;
    uint64_t _mng_macro228;
    uint64_t __twr_v229;
    uint64_t __twr_v230;
    uint64_t __twr_v231;
    uint64_t __twr_v232;
    uint64_t __twr_v233;
    uint64_t __twr_v234;
    uint64_t __twr_v235;
    uint64_t __twr_v236;
    uint64_t __twr_v237;
    uint64_t __twr_v238;
    uint64_t __twr_v239;
    uint64_t __twr_v240;
    uint64_t __twr_v241;
    uint64_t __twr_v242;
    uint64_t __twr_v243;
    uint64_t __twr_v244;
    uint64_t __twr_v245;
    uint64_t __twr_v246;
    uint64_t __twr_v247;
    uint64_t __twr_v248;
    uint64_t __twr_v249;
    uint64_t __twr_v250;
    uint64_t __twr_v251;
    uint64_t __twr_v252;
    uint64_t __twr_v253;
    uint64_t __twr_v254;
    uint64_t __twr_v255;
    uint64_t __twr_v256;
    uint64_t __twr_v257;
    uint64_t __twr_v258;
    uint64_t __twr_v259;
    uint64_t __twr_v260;
    uint64_t __twr_v261;
    uint64_t __twr_v262;
    uint64_t __twr_v263;
    uint64_t __twr_v264;
    uint64_t __twr_v265;
    uint64_t __twr_v266;
    uint64_t __twr_v267;
    uint64_t __twr_v268;
    __twr_v163 = 16ULL;
    __twr_v164 = _mng_stdpath160 + __twr_v163;
    __twr_v165 = *(uint64_t*)(__twr_v164);
    _mng_stdpathstr166 = __twr_v165;
    __twr_v167 = *(uint8_t*)(_mng_stdpathstr166);
    if (__twr_v167) { goto __twr_l2; } else { goto __twr_l3; }
    __twr_l3:;
    __twr_v168 = (uint64_t)(&LexTokenError);
    __twr_v169 = (uint64_t)(&"Empty path string");
    __twr_v170 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v168)(_mng_errtoken162, __twr_v169, __twr_v170, __twr_v170, __twr_v170);
    __twr_l2:;
    __twr_v171 = *(uint8_t*)(_mng_stdpathstr166);
    __twr_v172 = 47ULL;
    if (__twr_v171 != __twr_v172) { goto __twr_l4; } else { goto __twr_l5; }
    __twr_l5:;
    __twr_v173 = (uint64_t)(&LexTokenError);
    __twr_v174 = (uint64_t)(&"Expected a relative path, found an absolute path");
    __twr_v175 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v173)(_mng_errtoken162, __twr_v174, __twr_v175, __twr_v175, __twr_v175);
    __twr_l4:;
    __twr_v176 = *(uint64_t*)(_mng_stdpath160);
    _mng_count177 = __twr_v176;
    __twr_v178 = *(uint8_t*)(_mng_stdpathstr166);
    __twr_v179 = 60ULL;
    if (__twr_v178 == __twr_v179) { goto __twr_l8; } else { goto __twr_l7; }
    __twr_l7:;
    __twr_v180 = (uint64_t)(&TlCopyParentPath);
    __twr_v181 = (uint64_t)(&LexCurrentStream);
    __twr_v182 = *(uint64_t*)(__twr_v181);
    __twr_v183 = 8ULL;
    __twr_v184 = __twr_v182 + __twr_v183;
    __twr_v185 = *(uint64_t*)(__twr_v184);
    __twr_v186 = 48ULL;
    __twr_v187 = __twr_v185 + __twr_v186;
    ((void (*)(uint64_t, uint64_t))__twr_v180)(__twr_v187, _mng_fullpath161);
    goto __twr_l6;
    __twr_l8:;
    __twr_v188 = (uint64_t)(&TlCompareStringWithMax);
    __twr_v189 = (uint64_t)(&"<sdk>/");
    __twr_v190 = 5ULL;
    __twr_v191 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v188)(_mng_stdpathstr166, __twr_v189, __twr_v190);
    if (__twr_v191) { goto __twr_l10; } else { goto __twr_l9; }
    __twr_l9:;
    __twr_v192 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v193 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v194 = *(uint64_t*)(__twr_v193);
    __twr_v195 = (uint64_t)(&"SDK_BASE");
    __twr_v196 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v192)(__twr_v194, __twr_v195);
    _mng_macro197 = __twr_v196;
    if (_mng_macro197) { goto __twr_l11; } else { goto __twr_l12; }
    __twr_l12:;
    __twr_v198 = (uint64_t)(&LexTokenError);
    __twr_v199 = (uint64_t)(&"SDK_BASE isn't defined");
    __twr_v200 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v198)(_mng_errtoken162, __twr_v199, __twr_v200, __twr_v200, __twr_v200);
    __twr_l11:;
    __twr_v201 = 264ULL;
    __twr_v202 = _mng_macro197 + __twr_v201;
    __twr_v203 = *(uint8_t*)(__twr_v202);
    if (!(__twr_v203)) { goto __twr_l13; } else { goto __twr_l14; }
    __twr_l14:;
    __twr_v204 = (uint64_t)(&LexTokenError);
    __twr_v205 = (uint64_t)(&"SDK_BASE is a function macro for some reason");
    __twr_v206 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v204)(_mng_errtoken162, __twr_v205, __twr_v206, __twr_v206, __twr_v206);
    __twr_l13:;
    __twr_v207 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v208 = 80ULL;
    __twr_v209 = _mng_macro197 + __twr_v208;
    __twr_v210 = 96ULL;
    __twr_v211 = _mng_macro197 + __twr_v210;
    __twr_v212 = *(uint64_t*)(__twr_v211);
    __twr_v213 = 1ULL;
    __twr_v214 = *(uint64_t*)(__twr_v209);
    __twr_v215 = __twr_v214 - __twr_v213;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v207)(_mng_fullpath161, __twr_v212, __twr_v215);
    __twr_v216 = 6ULL;
    __twr_v217 = _mng_stdpathstr166 + __twr_v216;
    _mng_stdpathstr166 = __twr_v217;
    __twr_v218 = _mng_count177 - __twr_v216;
    _mng_count177 = __twr_v218;
    goto __twr_l6;
    __twr_l10:;
    __twr_v219 = (uint64_t)(&TlCompareStringWithMax);
    __twr_v220 = (uint64_t)(&"<bld>/");
    __twr_v221 = 5ULL;
    __twr_v222 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v219)(_mng_stdpathstr166, __twr_v220, __twr_v221);
    if (__twr_v222) { goto __twr_l16; } else { goto __twr_l15; }
    __twr_l15:;
    __twr_v223 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v224 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v225 = *(uint64_t*)(__twr_v224);
    __twr_v226 = (uint64_t)(&"BUILD_BASE");
    __twr_v227 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v223)(__twr_v225, __twr_v226);
    _mng_macro228 = __twr_v227;
    if (_mng_macro228) { goto __twr_l17; } else { goto __twr_l18; }
    __twr_l18:;
    __twr_v229 = (uint64_t)(&LexTokenError);
    __twr_v230 = (uint64_t)(&"BUILD_BASE isn't defined");
    __twr_v231 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v229)(_mng_errtoken162, __twr_v230, __twr_v231, __twr_v231, __twr_v231);
    __twr_l17:;
    __twr_v232 = 264ULL;
    __twr_v233 = _mng_macro228 + __twr_v232;
    __twr_v234 = *(uint8_t*)(__twr_v233);
    if (!(__twr_v234)) { goto __twr_l19; } else { goto __twr_l20; }
    __twr_l20:;
    __twr_v235 = (uint64_t)(&LexTokenError);
    __twr_v236 = (uint64_t)(&"BUILD_BASE is a function macro for some reason");
    __twr_v237 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v235)(_mng_errtoken162, __twr_v236, __twr_v237, __twr_v237, __twr_v237);
    __twr_l19:;
    __twr_v238 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v239 = 80ULL;
    __twr_v240 = _mng_macro228 + __twr_v239;
    __twr_v241 = 96ULL;
    __twr_v242 = _mng_macro228 + __twr_v241;
    __twr_v243 = *(uint64_t*)(__twr_v242);
    __twr_v244 = 1ULL;
    __twr_v245 = *(uint64_t*)(__twr_v240);
    __twr_v246 = __twr_v245 - __twr_v244;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v238)(_mng_fullpath161, __twr_v243, __twr_v246);
    __twr_v247 = 6ULL;
    __twr_v248 = _mng_stdpathstr166 + __twr_v247;
    _mng_stdpathstr166 = __twr_v248;
    __twr_v249 = _mng_count177 - __twr_v247;
    _mng_count177 = __twr_v249;
    goto __twr_l6;
    __twr_l16:;
    __twr_v250 = (uint64_t)(&LexTokenError);
    __twr_v251 = (uint64_t)(&"Unknown path prefix");
    __twr_v252 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v250)(_mng_errtoken162, __twr_v251, __twr_v252, __twr_v252, __twr_v252);
    __twr_l6:;
    __twr_v253 = *(uint64_t*)(_mng_fullpath161);
    if (__twr_v253) { goto __twr_l23; } else { goto __twr_l22; }
    __twr_l22:;
    __twr_v254 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v255 = 46ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v254)(_mng_fullpath161, __twr_v255);
    __twr_v256 = 47ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v254)(_mng_fullpath161, __twr_v256);
    goto __twr_l21;
    __twr_l23:;
    __twr_v257 = 16ULL;
    __twr_v258 = _mng_fullpath161 + __twr_v257;
    __twr_v259 = *(uint64_t*)(__twr_v258);
    __twr_v260 = *(uint64_t*)(_mng_fullpath161);
    __twr_v261 = 1ULL;
    __twr_v262 = __twr_v260 - __twr_v261;
    __twr_v263 = __twr_v259 + __twr_v262;
    __twr_v264 = *(uint8_t*)(__twr_v263);
    __twr_v265 = 47ULL;
    if (__twr_v264 == __twr_v265) { goto __twr_l21; } else { goto __twr_l24; }
    __twr_l24:;
    __twr_v266 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v267 = 47ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v266)(_mng_fullpath161, __twr_v267);
    __twr_l21:;
    __twr_v268 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v268)(_mng_fullpath161, _mng_stdpathstr166, _mng_count177);
    __twr_l1:;
    _jkl_epilogue:;
}
void BtTargetInfoFile() {
    uint64_t __twr_v269;
    uint64_t __twr_v270;
    uint64_t _mng_token271[4];
    uint64_t __twr_v272;
    uint64_t __twr_v273;
    uint64_t __twr_v274;
    uint64_t __twr_v275;
    uint64_t __twr_v276;
    uint64_t __twr_v277;
    uint64_t __twr_v278;
    uint64_t __twr_v279;
    uint64_t __twr_v280;
    uint64_t _mng_string281;
    uint64_t __twr_v282;
    uint64_t __twr_v283;
    uint64_t __twr_v284;
    uint64_t __twr_v285;
    uint64_t __twr_v286;
    uint64_t __twr_v287;
    uint64_t __twr_v288;
    uint64_t __twr_v289;
    uint64_t __twr_v290;
    uint64_t __twr_v291;
    uint64_t __twr_v292;
    uint64_t __twr_v293;
    uint64_t __twr_v294;
    uint64_t __twr_v295;
    uint64_t __twr_v296;
    uint64_t __twr_v297;
    uint64_t __twr_v298;
    __twr_v269 = (uint64_t)(&LexMatchToken);
    __twr_v270 = (uint64_t)(&_mng_token271);
    __twr_v272 = 4ULL;
    __twr_v273 = 0ULL;
    __twr_v274 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v269)(__twr_v270, __twr_v272, __twr_v273);
    if (__twr_v274) { goto __twr_l26; } else { goto __twr_l27; }
    __twr_l27:;
    __twr_v275 = (uint64_t)(&LexTokenError);
    __twr_v276 = (uint64_t)(&_mng_token271);
    __twr_v277 = (uint64_t)(&"Expected a string");
    __twr_v278 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v275)(__twr_v276, __twr_v277, __twr_v278, __twr_v278, __twr_v278);
    __twr_l26:;
    __twr_v279 = (uint64_t)(&_mng_token271);
    __twr_v280 = *(uint64_t*)(__twr_v279);
    _mng_string281 = __twr_v280;
    __twr_v282 = (uint64_t)(&TlUninitializeDynamicBuffer);
    __twr_v283 = (uint64_t)(&BtCurrentTarget);
    __twr_v284 = *(uint64_t*)(__twr_v283);
    __twr_v285 = 608ULL;
    __twr_v286 = __twr_v284 + __twr_v285;
    ((void (*)(uint64_t))__twr_v282)(__twr_v286);
    __twr_v287 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v288 = *(uint64_t*)(__twr_v283);
    __twr_v289 = __twr_v288 + __twr_v285;
    ((void (*)(uint64_t))__twr_v287)(__twr_v289);
    __twr_v290 = (uint64_t)(&BtParseStandardPath);
    __twr_v291 = 48ULL;
    __twr_v292 = _mng_string281 + __twr_v291;
    __twr_v293 = *(uint64_t*)(__twr_v283);
    __twr_v294 = __twr_v293 + __twr_v285;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v290)(__twr_v292, __twr_v294, __twr_v279);
    __twr_v295 = 1ULL;
    __twr_v296 = *(uint64_t*)(__twr_v283);
    __twr_v297 = 825ULL;
    __twr_v298 = __twr_v296 + __twr_v297;
    *(uint8_t*)(__twr_v298) = __twr_v295;
    __twr_l25:;
    _jkl_epilogue:;
}
void BtTargetInfoDepend() {
    uint64_t __twr_v299;
    uint64_t __twr_v300;
    uint64_t _mng_token301[4];
    uint64_t __twr_v302;
    uint64_t __twr_v303;
    uint64_t __twr_v304;
    uint64_t __twr_v305;
    uint64_t __twr_v306;
    uint64_t __twr_v307;
    uint64_t __twr_v308;
    uint64_t __twr_v309;
    uint64_t __twr_v310;
    uint64_t _mng_string311;
    uint64_t __twr_v312;
    uint64_t __twr_v313;
    uint64_t __twr_v314;
    uint64_t __twr_v315;
    uint64_t __twr_v316;
    uint64_t __twr_v317;
    uint64_t _mng_target318;
    uint64_t __twr_v319;
    uint64_t __twr_v320;
    uint64_t __twr_v321;
    uint64_t __twr_v322;
    uint64_t __twr_v323;
    uint64_t __twr_v324;
    uint64_t __twr_v325;
    uint64_t __twr_v326;
    uint64_t _mng_head327;
    uint64_t __twr_v328;
    uint64_t _mng_listentry329;
    uint64_t _mng_entry330;
    uint64_t __twr_v331;
    uint64_t __twr_v332;
    uint64_t __twr_v333;
    uint64_t __twr_v334;
    uint64_t __twr_v335;
    uint64_t __twr_v336;
    uint64_t __twr_v337;
    uint64_t _mng_entry338;
    uint64_t _mng_status339;
    uint64_t __twr_v340;
    uint64_t __twr_v341;
    uint64_t __twr_v342;
    uint64_t __twr_v343;
    uint64_t __twr_v344;
    uint64_t __twr_v345;
    uint64_t __twr_v346;
    uint64_t __twr_v347;
    uint64_t __twr_v348;
    uint64_t _mng_listhead349;
    uint64_t _mng_listentry350;
    uint64_t __twr_v351;
    uint64_t __twr_v352;
    uint64_t __twr_v353;
    uint64_t _mng_last354;
    uint64_t __twr_v355;
    __twr_v299 = (uint64_t)(&LexMatchToken);
    __twr_v300 = (uint64_t)(&_mng_token301);
    __twr_v302 = 4ULL;
    __twr_v303 = 0ULL;
    __twr_v304 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v299)(__twr_v300, __twr_v302, __twr_v303);
    if (__twr_v304) { goto __twr_l29; } else { goto __twr_l30; }
    __twr_l30:;
    __twr_v305 = (uint64_t)(&LexTokenError);
    __twr_v306 = (uint64_t)(&_mng_token301);
    __twr_v307 = (uint64_t)(&"Expected a string");
    __twr_v308 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v305)(__twr_v306, __twr_v307, __twr_v308, __twr_v308, __twr_v308);
    __twr_l29:;
    __twr_v309 = (uint64_t)(&_mng_token301);
    __twr_v310 = *(uint64_t*)(__twr_v309);
    _mng_string311 = __twr_v310;
    __twr_v312 = (uint64_t)(&TlLookupHashTable);
    __twr_v313 = (uint64_t)(&BtTargetHashTable);
    __twr_v314 = 64ULL;
    __twr_v315 = _mng_string311 + __twr_v314;
    __twr_v316 = *(uint64_t*)(__twr_v315);
    __twr_v317 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v312)(__twr_v313, __twr_v316);
    _mng_target318 = __twr_v317;
    if (_mng_target318) { goto __twr_l31; } else { goto __twr_l32; }
    __twr_l32:;
    __twr_v319 = (uint64_t)(&LexTokenError);
    __twr_v320 = (uint64_t)(&_mng_token301);
    __twr_v321 = (uint64_t)(&"Target not defined");
    __twr_v322 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v319)(__twr_v320, __twr_v321, __twr_v322, __twr_v322, __twr_v322);
    __twr_l31:;
    __twr_v323 = (uint64_t)(&BtCurrentTarget);
    __twr_v324 = *(uint64_t*)(__twr_v323);
    __twr_v325 = 576ULL;
    __twr_v326 = __twr_v324 + __twr_v325;
    _mng_head327 = __twr_v326;
    __twr_v328 = *(uint64_t*)(_mng_head327);
    _mng_listentry329 = __twr_v328;
    if (_mng_head327 == _mng_listentry329) { goto __twr_l34; } else { goto __twr_l33; }
    __twr_l33:;
    _mng_entry330 = _mng_listentry329;
    __twr_v331 = 16ULL;
    __twr_v332 = _mng_entry330 + __twr_v331;
    __twr_v333 = *(uint64_t*)(__twr_v332);
    if (__twr_v333 != _mng_target318) { goto __twr_l36; } else { goto __twr_l37; }
    __twr_l37:;
    goto _jkl_epilogue;
    __twr_l36:;
    __twr_v334 = *(uint64_t*)(_mng_listentry329);
    _mng_listentry329 = __twr_v334;
    __twr_l35:;
    if (_mng_head327 != _mng_listentry329) { goto __twr_l33; } else { goto __twr_l34; }
    __twr_l34:;
    __twr_v335 = (uint64_t)(&TlBumpAlloc);
    __twr_v336 = 24ULL;
    __twr_v337 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v335)(__twr_v336, (uint64_t)(&_mng_entry338));
    _mng_status339 = __twr_v337;
    if (!(_mng_status339)) { goto __twr_l38; } else { goto __twr_l39; }
    __twr_l39:;
    __twr_v340 = (uint64_t)(&TlInternalError);
    __twr_v341 = (uint64_t)(&"Failed to allocate depends list entry");
    __twr_v342 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v340)(__twr_v341, __twr_v342, __twr_v342, __twr_v342);
    __twr_l38:;
    __twr_v343 = 16ULL;
    __twr_v344 = _mng_entry338 + __twr_v343;
    *(uint64_t*)(__twr_v344) = _mng_target318;
    __twr_v345 = (uint64_t)(&BtCurrentTarget);
    __twr_v346 = *(uint64_t*)(__twr_v345);
    __twr_v347 = 576ULL;
    __twr_v348 = __twr_v346 + __twr_v347;
    _mng_listhead349 = __twr_v348;
    _mng_listentry350 = _mng_entry338;
    __twr_v351 = 8ULL;
    __twr_v352 = _mng_listhead349 + __twr_v351;
    __twr_v353 = *(uint64_t*)(__twr_v352);
    _mng_last354 = __twr_v353;
    __twr_v355 = _mng_listentry350 + __twr_v351;
    *(uint64_t*)(__twr_v355) = _mng_last354;
    *(uint64_t*)(_mng_listentry350) = _mng_listhead349;
    *(uint64_t*)(_mng_last354) = _mng_listentry350;
    *(uint64_t*)(__twr_v352) = _mng_listentry350;
    __twr_l28:;
    _jkl_epilogue:;
}
void BtTargetInfoSources() {
    uint64_t __twr_v356;
    uint64_t __twr_v357;
    uint64_t _mng_token358[4];
    uint64_t __twr_v359;
    uint64_t __twr_v360;
    uint64_t __twr_v361;
    uint64_t __twr_v362;
    uint64_t __twr_v363;
    uint64_t __twr_v364;
    uint64_t __twr_v365;
    uint64_t __twr_v366;
    uint64_t __twr_v367;
    uint64_t _mng_string368;
    uint64_t __twr_v369;
    uint64_t __twr_v370;
    uint64_t __twr_v371;
    uint64_t __twr_v372;
    uint64_t __twr_v373;
    uint64_t __twr_v374;
    uint64_t __twr_v375;
    uint64_t __twr_v376;
    uint64_t __twr_v377;
    uint64_t __twr_v378;
    uint64_t __twr_v379;
    uint64_t __twr_v380;
    uint64_t _mng_entry381;
    uint64_t _mng_status382;
    uint64_t __twr_v383;
    uint64_t __twr_v384;
    uint64_t __twr_v385;
    uint64_t __twr_v386;
    uint64_t __twr_v387;
    uint64_t _mng_filepath388;
    uint64_t __twr_v389;
    uint64_t __twr_v390;
    uint64_t __twr_v391;
    uint64_t __twr_v392;
    uint64_t __twr_v393;
    uint64_t __twr_v394;
    uint64_t __twr_v395;
    uint64_t __twr_v396;
    uint64_t __twr_v397;
    uint64_t __twr_v398;
    uint64_t __twr_v399;
    uint64_t __twr_v400;
    uint64_t __twr_v401;
    uint64_t __twr_v402;
    uint64_t __twr_v403;
    uint64_t __twr_v404;
    uint64_t __twr_v405;
    uint64_t _mng_listhead406;
    uint64_t _mng_listentry407;
    uint64_t __twr_v408;
    uint64_t __twr_v409;
    uint64_t __twr_v410;
    uint64_t _mng_last411;
    uint64_t __twr_v412;
    __twr_v356 = (uint64_t)(&LexMatchToken);
    __twr_v357 = (uint64_t)(&_mng_token358);
    __twr_v359 = 4ULL;
    __twr_v360 = 0ULL;
    __twr_v361 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v356)(__twr_v357, __twr_v359, __twr_v360);
    if (__twr_v361) { goto __twr_l41; } else { goto __twr_l42; }
    __twr_l42:;
    __twr_v362 = (uint64_t)(&LexTokenError);
    __twr_v363 = (uint64_t)(&_mng_token358);
    __twr_v364 = (uint64_t)(&"Expected a string");
    __twr_v365 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v362)(__twr_v363, __twr_v364, __twr_v365, __twr_v365, __twr_v365);
    __twr_l41:;
    __twr_v366 = (uint64_t)(&_mng_token358);
    __twr_v367 = *(uint64_t*)(__twr_v366);
    _mng_string368 = __twr_v367;
    __twr_v369 = (uint64_t)(&BtCurrentTarget);
    __twr_v370 = *(uint64_t*)(__twr_v369);
    __twr_v371 = 825ULL;
    __twr_v372 = __twr_v370 + __twr_v371;
    __twr_v373 = *(uint8_t*)(__twr_v372);
    if (__twr_v373) { goto __twr_l43; } else { goto __twr_l44; }
    __twr_l44:;
    __twr_v374 = (uint64_t)(&LexTokenError);
    __twr_v375 = (uint64_t)(&_mng_token358);
    __twr_v376 = (uint64_t)(&"Sourceful target needs FILE name");
    __twr_v377 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v374)(__twr_v375, __twr_v376, __twr_v377, __twr_v377, __twr_v377);
    __twr_l43:;
    __twr_v378 = (uint64_t)(&TlBumpAlloc);
    __twr_v379 = 104ULL;
    __twr_v380 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v378)(__twr_v379, (uint64_t)(&_mng_entry381));
    _mng_status382 = __twr_v380;
    if (!(_mng_status382)) { goto __twr_l45; } else { goto __twr_l46; }
    __twr_l46:;
    __twr_v383 = (uint64_t)(&TlInternalError);
    __twr_v384 = (uint64_t)(&"Failed to allocate sources record");
    __twr_v385 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v383)(__twr_v384, __twr_v385, __twr_v385, __twr_v385);
    __twr_l45:;
    __twr_v386 = 16ULL;
    __twr_v387 = _mng_entry381 + __twr_v386;
    _mng_filepath388 = __twr_v387;
    __twr_v389 = (uint64_t)(&TlInitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v389)(_mng_filepath388);
    __twr_v390 = (uint64_t)(&BtParseStandardPath);
    __twr_v391 = 48ULL;
    __twr_v392 = _mng_string368 + __twr_v391;
    __twr_v393 = (uint64_t)(&_mng_token358);
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v390)(__twr_v392, _mng_filepath388, __twr_v393);
    __twr_v394 = (uint64_t)(&TlIsPathDirectory);
    __twr_v395 = _mng_filepath388 + __twr_v386;
    __twr_v396 = *(uint64_t*)(__twr_v395);
    __twr_v397 = ((uint64_t (*)(uint64_t))__twr_v394)(__twr_v396);
    if (__twr_v397) { goto __twr_l47; } else { goto __twr_l48; }
    __twr_l48:;
    __twr_v398 = (uint64_t)(&LexTokenError);
    __twr_v399 = (uint64_t)(&_mng_token358);
    __twr_v400 = (uint64_t)(&"Doesn't exist or not a directory");
    __twr_v401 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v398)(__twr_v399, __twr_v400, __twr_v401, __twr_v401, __twr_v401);
    __twr_l47:;
    __twr_v402 = (uint64_t)(&BtCurrentTarget);
    __twr_v403 = *(uint64_t*)(__twr_v402);
    __twr_v404 = 592ULL;
    __twr_v405 = __twr_v403 + __twr_v404;
    _mng_listhead406 = __twr_v405;
    _mng_listentry407 = _mng_entry381;
    __twr_v408 = 8ULL;
    __twr_v409 = _mng_listhead406 + __twr_v408;
    __twr_v410 = *(uint64_t*)(__twr_v409);
    _mng_last411 = __twr_v410;
    __twr_v412 = _mng_listentry407 + __twr_v408;
    *(uint64_t*)(__twr_v412) = _mng_last411;
    *(uint64_t*)(_mng_listentry407) = _mng_listhead406;
    *(uint64_t*)(_mng_last411) = _mng_listentry407;
    *(uint64_t*)(__twr_v409) = _mng_listentry407;
    __twr_l40:;
    _jkl_epilogue:;
}
void BtTargetInfoJklInclude() {
    uint64_t __twr_v413;
    uint64_t __twr_v414;
    uint64_t _mng_token415[4];
    uint64_t __twr_v416;
    uint64_t __twr_v417;
    uint64_t __twr_v418;
    uint64_t __twr_v419;
    uint64_t __twr_v420;
    uint64_t __twr_v421;
    uint64_t __twr_v422;
    uint64_t __twr_v423;
    uint64_t __twr_v424;
    uint64_t _mng_string425;
    uint64_t __twr_v426;
    uint64_t __twr_v427;
    uint64_t _mng_filepath428[11];
    uint64_t __twr_v429;
    uint64_t __twr_v430;
    uint64_t __twr_v431;
    uint64_t __twr_v432;
    uint64_t __twr_v433;
    uint64_t __twr_v434;
    uint64_t __twr_v435;
    uint64_t __twr_v436;
    uint64_t __twr_v437;
    uint64_t __twr_v438;
    uint64_t __twr_v439;
    uint64_t __twr_v440;
    uint64_t __twr_v441;
    uint64_t __twr_v442;
    uint64_t __twr_v443;
    uint64_t __twr_v444;
    uint64_t __twr_v445;
    uint64_t __twr_v446;
    uint64_t __twr_v447;
    uint64_t __twr_v448;
    uint64_t __twr_v449;
    uint64_t __twr_v450;
    uint64_t __twr_v451;
    uint64_t __twr_v452;
    uint64_t __twr_v453;
    uint64_t __twr_v454;
    uint64_t __twr_v455;
    __twr_v413 = (uint64_t)(&LexMatchToken);
    __twr_v414 = (uint64_t)(&_mng_token415);
    __twr_v416 = 4ULL;
    __twr_v417 = 0ULL;
    __twr_v418 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v413)(__twr_v414, __twr_v416, __twr_v417);
    if (__twr_v418) { goto __twr_l50; } else { goto __twr_l51; }
    __twr_l51:;
    __twr_v419 = (uint64_t)(&LexTokenError);
    __twr_v420 = (uint64_t)(&_mng_token415);
    __twr_v421 = (uint64_t)(&"Expected a string");
    __twr_v422 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v419)(__twr_v420, __twr_v421, __twr_v422, __twr_v422, __twr_v422);
    __twr_l50:;
    __twr_v423 = (uint64_t)(&_mng_token415);
    __twr_v424 = *(uint64_t*)(__twr_v423);
    _mng_string425 = __twr_v424;
    __twr_v426 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v427 = (uint64_t)(&_mng_filepath428);
    ((void (*)(uint64_t))__twr_v426)(__twr_v427);
    __twr_v429 = (uint64_t)(&BtParseStandardPath);
    __twr_v430 = 48ULL;
    __twr_v431 = _mng_string425 + __twr_v430;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v429)(__twr_v431, __twr_v427, __twr_v423);
    __twr_v432 = (uint64_t)(&BtCurrentTarget);
    __twr_v433 = *(uint64_t*)(__twr_v432);
    __twr_v434 = 400ULL;
    __twr_v435 = __twr_v433 + __twr_v434;
    __twr_v436 = *(uint64_t*)(__twr_v435);
    if (!(__twr_v436)) { goto __twr_l52; } else { goto __twr_l53; }
    __twr_l53:;
    __twr_v437 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v438 = (uint64_t)(&BtCurrentTarget);
    __twr_v439 = *(uint64_t*)(__twr_v438);
    __twr_v440 = 400ULL;
    __twr_v441 = __twr_v439 + __twr_v440;
    __twr_v442 = 58ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v437)(__twr_v441, __twr_v442);
    __twr_l52:;
    __twr_v443 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v444 = (uint64_t)(&BtCurrentTarget);
    __twr_v445 = *(uint64_t*)(__twr_v444);
    __twr_v446 = 400ULL;
    __twr_v447 = __twr_v445 + __twr_v446;
    __twr_v448 = (uint64_t)(&_mng_filepath428);
    __twr_v449 = 16ULL;
    __twr_v450 = __twr_v448 + __twr_v449;
    __twr_v451 = *(uint64_t*)(__twr_v450);
    __twr_v452 = *(uint64_t*)(__twr_v448);
    __twr_v453 = 1ULL;
    __twr_v454 = __twr_v452 - __twr_v453;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v443)(__twr_v447, __twr_v451, __twr_v454);
    __twr_v455 = (uint64_t)(&TlUninitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v455)(__twr_v448);
    __twr_l49:;
    _jkl_epilogue:;
}
void BtTargetInfoLibDir() {
    uint64_t __twr_v456;
    uint64_t __twr_v457;
    uint64_t _mng_token458[4];
    uint64_t __twr_v459;
    uint64_t __twr_v460;
    uint64_t __twr_v461;
    uint64_t __twr_v462;
    uint64_t __twr_v463;
    uint64_t __twr_v464;
    uint64_t __twr_v465;
    uint64_t __twr_v466;
    uint64_t __twr_v467;
    uint64_t _mng_string468;
    uint64_t __twr_v469;
    uint64_t __twr_v470;
    uint64_t _mng_filepath471[11];
    uint64_t __twr_v472;
    uint64_t __twr_v473;
    uint64_t __twr_v474;
    uint64_t __twr_v475;
    uint64_t __twr_v476;
    uint64_t __twr_v477;
    uint64_t __twr_v478;
    uint64_t __twr_v479;
    uint64_t __twr_v480;
    uint64_t __twr_v481;
    uint64_t __twr_v482;
    uint64_t __twr_v483;
    uint64_t __twr_v484;
    uint64_t __twr_v485;
    uint64_t __twr_v486;
    uint64_t __twr_v487;
    uint64_t __twr_v488;
    uint64_t __twr_v489;
    uint64_t __twr_v490;
    uint64_t __twr_v491;
    uint64_t __twr_v492;
    uint64_t __twr_v493;
    uint64_t __twr_v494;
    uint64_t __twr_v495;
    uint64_t __twr_v496;
    uint64_t __twr_v497;
    uint64_t __twr_v498;
    __twr_v456 = (uint64_t)(&LexMatchToken);
    __twr_v457 = (uint64_t)(&_mng_token458);
    __twr_v459 = 4ULL;
    __twr_v460 = 0ULL;
    __twr_v461 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v456)(__twr_v457, __twr_v459, __twr_v460);
    if (__twr_v461) { goto __twr_l55; } else { goto __twr_l56; }
    __twr_l56:;
    __twr_v462 = (uint64_t)(&LexTokenError);
    __twr_v463 = (uint64_t)(&_mng_token458);
    __twr_v464 = (uint64_t)(&"Expected a string");
    __twr_v465 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v462)(__twr_v463, __twr_v464, __twr_v465, __twr_v465, __twr_v465);
    __twr_l55:;
    __twr_v466 = (uint64_t)(&_mng_token458);
    __twr_v467 = *(uint64_t*)(__twr_v466);
    _mng_string468 = __twr_v467;
    __twr_v469 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v470 = (uint64_t)(&_mng_filepath471);
    ((void (*)(uint64_t))__twr_v469)(__twr_v470);
    __twr_v472 = (uint64_t)(&BtParseStandardPath);
    __twr_v473 = 48ULL;
    __twr_v474 = _mng_string468 + __twr_v473;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v472)(__twr_v474, __twr_v470, __twr_v466);
    __twr_v475 = (uint64_t)(&BtCurrentTarget);
    __twr_v476 = *(uint64_t*)(__twr_v475);
    __twr_v477 = 488ULL;
    __twr_v478 = __twr_v476 + __twr_v477;
    __twr_v479 = *(uint64_t*)(__twr_v478);
    if (!(__twr_v479)) { goto __twr_l57; } else { goto __twr_l58; }
    __twr_l58:;
    __twr_v480 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v481 = (uint64_t)(&BtCurrentTarget);
    __twr_v482 = *(uint64_t*)(__twr_v481);
    __twr_v483 = 488ULL;
    __twr_v484 = __twr_v482 + __twr_v483;
    __twr_v485 = 58ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v480)(__twr_v484, __twr_v485);
    __twr_l57:;
    __twr_v486 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v487 = (uint64_t)(&BtCurrentTarget);
    __twr_v488 = *(uint64_t*)(__twr_v487);
    __twr_v489 = 488ULL;
    __twr_v490 = __twr_v488 + __twr_v489;
    __twr_v491 = (uint64_t)(&_mng_filepath471);
    __twr_v492 = 16ULL;
    __twr_v493 = __twr_v491 + __twr_v492;
    __twr_v494 = *(uint64_t*)(__twr_v493);
    __twr_v495 = *(uint64_t*)(__twr_v491);
    __twr_v496 = 1ULL;
    __twr_v497 = __twr_v495 - __twr_v496;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v486)(__twr_v490, __twr_v494, __twr_v497);
    __twr_v498 = (uint64_t)(&TlUninitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v498)(__twr_v491);
    __twr_l54:;
    _jkl_epilogue:;
}
void BtTargetInfoLinkOpt() {
    uint64_t __twr_v499;
    uint64_t __twr_v500;
    uint64_t _mng_token501[4];
    uint64_t __twr_v502;
    uint64_t __twr_v503;
    uint64_t __twr_v504;
    uint64_t __twr_v505;
    uint64_t __twr_v506;
    uint64_t __twr_v507;
    uint64_t __twr_v508;
    uint64_t __twr_v509;
    uint64_t __twr_v510;
    uint64_t _mng_string511;
    uint64_t __twr_v512;
    uint64_t __twr_v513;
    uint64_t _mng_str514;
    uint64_t __twr_v515;
    uint64_t __twr_v516;
    uint64_t __twr_v517;
    uint64_t __twr_v518;
    uint64_t __twr_v519;
    uint64_t __twr_v520;
    uint64_t __twr_v521;
    uint64_t __twr_v522;
    uint64_t __twr_v523;
    uint64_t __twr_v524;
    uint64_t __twr_v525;
    uint64_t __twr_v526;
    uint64_t __twr_v527;
    uint64_t __twr_v528;
    uint64_t __twr_v529;
    uint64_t __twr_v530;
    uint64_t __twr_v531;
    uint64_t __twr_v532;
    uint64_t __twr_v533;
    uint64_t __twr_v534;
    uint64_t __twr_v535;
    __twr_v499 = (uint64_t)(&LexMatchToken);
    __twr_v500 = (uint64_t)(&_mng_token501);
    __twr_v502 = 4ULL;
    __twr_v503 = 0ULL;
    __twr_v504 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v499)(__twr_v500, __twr_v502, __twr_v503);
    if (__twr_v504) { goto __twr_l60; } else { goto __twr_l61; }
    __twr_l61:;
    __twr_v505 = (uint64_t)(&LexTokenError);
    __twr_v506 = (uint64_t)(&_mng_token501);
    __twr_v507 = (uint64_t)(&"Expected a string");
    __twr_v508 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v505)(__twr_v506, __twr_v507, __twr_v508, __twr_v508, __twr_v508);
    __twr_l60:;
    __twr_v509 = (uint64_t)(&_mng_token501);
    __twr_v510 = *(uint64_t*)(__twr_v509);
    _mng_string511 = __twr_v510;
    __twr_v512 = 48ULL;
    __twr_v513 = _mng_string511 + __twr_v512;
    _mng_str514 = __twr_v513;
    __twr_v515 = (uint64_t)(&BtCurrentTarget);
    __twr_v516 = *(uint64_t*)(__twr_v515);
    __twr_v517 = __twr_v516 + __twr_v512;
    __twr_v518 = *(uint64_t*)(__twr_v517);
    if (!(__twr_v518)) { goto __twr_l62; } else { goto __twr_l63; }
    __twr_l63:;
    __twr_v519 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v520 = (uint64_t)(&BtCurrentTarget);
    __twr_v521 = *(uint64_t*)(__twr_v520);
    __twr_v522 = 48ULL;
    __twr_v523 = __twr_v521 + __twr_v522;
    __twr_v524 = 32ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v519)(__twr_v523, __twr_v524);
    __twr_l62:;
    __twr_v525 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v526 = (uint64_t)(&BtCurrentTarget);
    __twr_v527 = *(uint64_t*)(__twr_v526);
    __twr_v528 = 48ULL;
    __twr_v529 = __twr_v527 + __twr_v528;
    __twr_v530 = 16ULL;
    __twr_v531 = _mng_str514 + __twr_v530;
    __twr_v532 = *(uint64_t*)(__twr_v531);
    __twr_v533 = *(uint64_t*)(_mng_str514);
    __twr_v534 = 1ULL;
    __twr_v535 = __twr_v533 - __twr_v534;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v525)(__twr_v529, __twr_v532, __twr_v535);
    __twr_l59:;
    _jkl_epilogue:;
}
void BtTargetInfoJklOpt() {
    uint64_t __twr_v536;
    uint64_t __twr_v537;
    uint64_t _mng_token538[4];
    uint64_t __twr_v539;
    uint64_t __twr_v540;
    uint64_t __twr_v541;
    uint64_t __twr_v542;
    uint64_t __twr_v543;
    uint64_t __twr_v544;
    uint64_t __twr_v545;
    uint64_t __twr_v546;
    uint64_t __twr_v547;
    uint64_t _mng_string548;
    uint64_t __twr_v549;
    uint64_t __twr_v550;
    uint64_t _mng_str551;
    uint64_t __twr_v552;
    uint64_t __twr_v553;
    uint64_t __twr_v554;
    uint64_t __twr_v555;
    uint64_t __twr_v556;
    uint64_t __twr_v557;
    uint64_t __twr_v558;
    uint64_t __twr_v559;
    uint64_t __twr_v560;
    uint64_t __twr_v561;
    uint64_t __twr_v562;
    uint64_t __twr_v563;
    uint64_t __twr_v564;
    uint64_t __twr_v565;
    uint64_t __twr_v566;
    uint64_t __twr_v567;
    uint64_t __twr_v568;
    uint64_t __twr_v569;
    uint64_t __twr_v570;
    uint64_t __twr_v571;
    uint64_t __twr_v572;
    uint64_t __twr_v573;
    __twr_v536 = (uint64_t)(&LexMatchToken);
    __twr_v537 = (uint64_t)(&_mng_token538);
    __twr_v539 = 4ULL;
    __twr_v540 = 0ULL;
    __twr_v541 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v536)(__twr_v537, __twr_v539, __twr_v540);
    if (__twr_v541) { goto __twr_l65; } else { goto __twr_l66; }
    __twr_l66:;
    __twr_v542 = (uint64_t)(&LexTokenError);
    __twr_v543 = (uint64_t)(&_mng_token538);
    __twr_v544 = (uint64_t)(&"Expected a string");
    __twr_v545 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v542)(__twr_v543, __twr_v544, __twr_v545, __twr_v545, __twr_v545);
    __twr_l65:;
    __twr_v546 = (uint64_t)(&_mng_token538);
    __twr_v547 = *(uint64_t*)(__twr_v546);
    _mng_string548 = __twr_v547;
    __twr_v549 = 48ULL;
    __twr_v550 = _mng_string548 + __twr_v549;
    _mng_str551 = __twr_v550;
    __twr_v552 = (uint64_t)(&BtCurrentTarget);
    __twr_v553 = *(uint64_t*)(__twr_v552);
    __twr_v554 = 312ULL;
    __twr_v555 = __twr_v553 + __twr_v554;
    __twr_v556 = *(uint64_t*)(__twr_v555);
    if (!(__twr_v556)) { goto __twr_l67; } else { goto __twr_l68; }
    __twr_l68:;
    __twr_v557 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v558 = (uint64_t)(&BtCurrentTarget);
    __twr_v559 = *(uint64_t*)(__twr_v558);
    __twr_v560 = 312ULL;
    __twr_v561 = __twr_v559 + __twr_v560;
    __twr_v562 = 32ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v557)(__twr_v561, __twr_v562);
    __twr_l67:;
    __twr_v563 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v564 = (uint64_t)(&BtCurrentTarget);
    __twr_v565 = *(uint64_t*)(__twr_v564);
    __twr_v566 = 312ULL;
    __twr_v567 = __twr_v565 + __twr_v566;
    __twr_v568 = 16ULL;
    __twr_v569 = _mng_str551 + __twr_v568;
    __twr_v570 = *(uint64_t*)(__twr_v569);
    __twr_v571 = *(uint64_t*)(_mng_str551);
    __twr_v572 = 1ULL;
    __twr_v573 = __twr_v571 - __twr_v572;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v563)(__twr_v567, __twr_v570, __twr_v573);
    __twr_l64:;
    _jkl_epilogue:;
}
void BtTargetInfoLink() {
    uint64_t __twr_v574;
    uint64_t __twr_v575;
    uint64_t _mng_token576[4];
    uint64_t __twr_v577;
    uint64_t __twr_v578;
    uint64_t __twr_v579;
    uint64_t __twr_v580;
    uint64_t __twr_v581;
    uint64_t __twr_v582;
    uint64_t __twr_v583;
    uint64_t __twr_v584;
    uint64_t __twr_v585;
    uint64_t _mng_string586;
    uint64_t __twr_v587;
    uint64_t __twr_v588;
    uint64_t _mng_filepath589[11];
    uint64_t __twr_v590;
    uint64_t __twr_v591;
    uint64_t __twr_v592;
    uint64_t __twr_v593;
    uint64_t __twr_v594;
    uint64_t __twr_v595;
    uint64_t __twr_v596;
    uint64_t __twr_v597;
    uint64_t __twr_v598;
    uint64_t __twr_v599;
    uint64_t __twr_v600;
    uint64_t __twr_v601;
    uint64_t __twr_v602;
    uint64_t __twr_v603;
    uint64_t __twr_v604;
    uint64_t __twr_v605;
    uint64_t __twr_v606;
    uint64_t __twr_v607;
    uint64_t __twr_v608;
    uint64_t __twr_v609;
    uint64_t __twr_v610;
    uint64_t __twr_v611;
    uint64_t __twr_v612;
    uint64_t __twr_v613;
    uint64_t __twr_v614;
    uint64_t __twr_v615;
    uint64_t __twr_v616;
    __twr_v574 = (uint64_t)(&LexMatchToken);
    __twr_v575 = (uint64_t)(&_mng_token576);
    __twr_v577 = 4ULL;
    __twr_v578 = 0ULL;
    __twr_v579 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v574)(__twr_v575, __twr_v577, __twr_v578);
    if (__twr_v579) { goto __twr_l70; } else { goto __twr_l71; }
    __twr_l71:;
    __twr_v580 = (uint64_t)(&LexTokenError);
    __twr_v581 = (uint64_t)(&_mng_token576);
    __twr_v582 = (uint64_t)(&"Expected a string");
    __twr_v583 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v580)(__twr_v581, __twr_v582, __twr_v583, __twr_v583, __twr_v583);
    __twr_l70:;
    __twr_v584 = (uint64_t)(&_mng_token576);
    __twr_v585 = *(uint64_t*)(__twr_v584);
    _mng_string586 = __twr_v585;
    __twr_v587 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v588 = (uint64_t)(&_mng_filepath589);
    ((void (*)(uint64_t))__twr_v587)(__twr_v588);
    __twr_v590 = (uint64_t)(&BtParseStandardPath);
    __twr_v591 = 48ULL;
    __twr_v592 = _mng_string586 + __twr_v591;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v590)(__twr_v592, __twr_v588, __twr_v584);
    __twr_v593 = (uint64_t)(&BtCurrentTarget);
    __twr_v594 = *(uint64_t*)(__twr_v593);
    __twr_v595 = 136ULL;
    __twr_v596 = __twr_v594 + __twr_v595;
    __twr_v597 = *(uint64_t*)(__twr_v596);
    if (!(__twr_v597)) { goto __twr_l72; } else { goto __twr_l73; }
    __twr_l73:;
    __twr_v598 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v599 = (uint64_t)(&BtCurrentTarget);
    __twr_v600 = *(uint64_t*)(__twr_v599);
    __twr_v601 = 136ULL;
    __twr_v602 = __twr_v600 + __twr_v601;
    __twr_v603 = 32ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v598)(__twr_v602, __twr_v603);
    __twr_l72:;
    __twr_v604 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v605 = (uint64_t)(&BtCurrentTarget);
    __twr_v606 = *(uint64_t*)(__twr_v605);
    __twr_v607 = 136ULL;
    __twr_v608 = __twr_v606 + __twr_v607;
    __twr_v609 = (uint64_t)(&_mng_filepath589);
    __twr_v610 = 16ULL;
    __twr_v611 = __twr_v609 + __twr_v610;
    __twr_v612 = *(uint64_t*)(__twr_v611);
    __twr_v613 = *(uint64_t*)(__twr_v609);
    __twr_v614 = 1ULL;
    __twr_v615 = __twr_v613 - __twr_v614;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v604)(__twr_v608, __twr_v612, __twr_v615);
    __twr_v616 = (uint64_t)(&TlUninitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v616)(__twr_v609);
    __twr_l69:;
    _jkl_epilogue:;
}
void BtTargetInfoDyLink() {
    uint64_t __twr_v617;
    uint64_t __twr_v618;
    uint64_t _mng_token619[4];
    uint64_t __twr_v620;
    uint64_t __twr_v621;
    uint64_t __twr_v622;
    uint64_t __twr_v623;
    uint64_t __twr_v624;
    uint64_t __twr_v625;
    uint64_t __twr_v626;
    uint64_t __twr_v627;
    uint64_t __twr_v628;
    uint64_t __twr_v629;
    uint64_t _mng_rtstring630;
    uint64_t __twr_v631;
    uint64_t __twr_v632;
    uint64_t _mng_ctpathtoken633[4];
    uint64_t __twr_v634;
    uint64_t __twr_v635;
    uint64_t __twr_v636;
    uint64_t __twr_v637;
    uint64_t __twr_v638;
    uint64_t __twr_v639;
    uint64_t __twr_v640;
    uint64_t __twr_v641;
    uint64_t _mng_ctstring642;
    uint64_t __twr_v643;
    uint64_t __twr_v644;
    uint64_t _mng_filepath645[11];
    uint64_t __twr_v646;
    uint64_t __twr_v647;
    uint64_t __twr_v648;
    uint64_t __twr_v649;
    uint64_t __twr_v650;
    uint64_t __twr_v651;
    uint64_t __twr_v652;
    uint64_t __twr_v653;
    uint64_t __twr_v654;
    uint64_t __twr_v655;
    uint64_t __twr_v656;
    uint64_t __twr_v657;
    uint64_t __twr_v658;
    uint64_t __twr_v659;
    uint64_t __twr_v660;
    uint64_t __twr_v661;
    uint64_t __twr_v662;
    uint64_t __twr_v663;
    uint64_t __twr_v664;
    uint64_t __twr_v665;
    uint64_t __twr_v666;
    uint64_t __twr_v667;
    uint64_t __twr_v668;
    uint64_t __twr_v669;
    uint64_t __twr_v670;
    uint64_t __twr_v671;
    uint64_t __twr_v672;
    uint64_t __twr_v673;
    uint64_t __twr_v674;
    uint64_t __twr_v675;
    uint64_t __twr_v676;
    uint64_t __twr_v677;
    uint64_t __twr_v678;
    uint64_t __twr_v679;
    uint64_t __twr_v680;
    uint64_t __twr_v681;
    uint64_t __twr_v682;
    uint64_t __twr_v683;
    uint64_t __twr_v684;
    uint64_t __twr_v685;
    __twr_v617 = (uint64_t)(&LexMatchToken);
    __twr_v618 = (uint64_t)(&_mng_token619);
    __twr_v620 = 4ULL;
    __twr_v621 = 0ULL;
    __twr_v622 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v617)(__twr_v618, __twr_v620, __twr_v621);
    if (__twr_v622) { goto __twr_l75; } else { goto __twr_l76; }
    __twr_l76:;
    __twr_v623 = (uint64_t)(&LexTokenError);
    __twr_v624 = (uint64_t)(&_mng_token619);
    __twr_v625 = (uint64_t)(&"Expected a string");
    __twr_v626 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v623)(__twr_v624, __twr_v625, __twr_v626, __twr_v626, __twr_v626);
    __twr_l75:;
    __twr_v627 = (uint64_t)(&_mng_token619);
    __twr_v628 = 0ULL;
    __twr_v629 = *(uint64_t*)(__twr_v627);
    _mng_rtstring630 = __twr_v629;
    __twr_v631 = (uint64_t)(&LexMatchToken);
    __twr_v632 = (uint64_t)(&_mng_ctpathtoken633);
    __twr_v634 = 4ULL;
    __twr_v635 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v631)(__twr_v632, __twr_v634, __twr_v628);
    if (__twr_v635) { goto __twr_l77; } else { goto __twr_l78; }
    __twr_l78:;
    __twr_v636 = (uint64_t)(&LexTokenError);
    __twr_v637 = (uint64_t)(&_mng_ctpathtoken633);
    __twr_v638 = (uint64_t)(&"Expected a string");
    __twr_v639 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v636)(__twr_v637, __twr_v638, __twr_v639, __twr_v639, __twr_v639);
    __twr_l77:;
    __twr_v640 = (uint64_t)(&_mng_ctpathtoken633);
    __twr_v641 = *(uint64_t*)(__twr_v640);
    _mng_ctstring642 = __twr_v641;
    __twr_v643 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v644 = (uint64_t)(&_mng_filepath645);
    ((void (*)(uint64_t))__twr_v643)(__twr_v644);
    __twr_v646 = (uint64_t)(&BtParseStandardPath);
    __twr_v647 = 48ULL;
    __twr_v648 = _mng_ctstring642 + __twr_v647;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v646)(__twr_v648, __twr_v644, __twr_v640);
    __twr_v649 = (uint64_t)(&BtCurrentTarget);
    __twr_v650 = *(uint64_t*)(__twr_v649);
    __twr_v651 = 224ULL;
    __twr_v652 = __twr_v650 + __twr_v651;
    __twr_v653 = *(uint64_t*)(__twr_v652);
    if (!(__twr_v653)) { goto __twr_l79; } else { goto __twr_l80; }
    __twr_l80:;
    __twr_v654 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v655 = (uint64_t)(&BtCurrentTarget);
    __twr_v656 = *(uint64_t*)(__twr_v655);
    __twr_v657 = 224ULL;
    __twr_v658 = __twr_v656 + __twr_v657;
    __twr_v659 = 32ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v654)(__twr_v658, __twr_v659);
    __twr_l79:;
    __twr_v660 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v661 = (uint64_t)(&BtCurrentTarget);
    __twr_v662 = *(uint64_t*)(__twr_v661);
    __twr_v663 = 224ULL;
    __twr_v664 = __twr_v662 + __twr_v663;
    __twr_v665 = 48ULL;
    __twr_v666 = _mng_rtstring630 + __twr_v665;
    __twr_v667 = 16ULL;
    __twr_v668 = 64ULL;
    __twr_v669 = _mng_rtstring630 + __twr_v668;
    __twr_v670 = *(uint64_t*)(__twr_v669);
    __twr_v671 = *(uint64_t*)(__twr_v666);
    __twr_v672 = 1ULL;
    __twr_v673 = __twr_v671 - __twr_v672;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v660)(__twr_v664, __twr_v670, __twr_v673);
    __twr_v674 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v675 = *(uint64_t*)(__twr_v661);
    __twr_v676 = __twr_v675 + __twr_v663;
    __twr_v677 = 58ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v674)(__twr_v676, __twr_v677);
    __twr_v678 = *(uint64_t*)(__twr_v661);
    __twr_v679 = __twr_v678 + __twr_v663;
    __twr_v680 = (uint64_t)(&_mng_filepath645);
    __twr_v681 = __twr_v680 + __twr_v667;
    __twr_v682 = *(uint64_t*)(__twr_v681);
    __twr_v683 = *(uint64_t*)(__twr_v680);
    __twr_v684 = __twr_v683 - __twr_v672;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v660)(__twr_v679, __twr_v682, __twr_v684);
    __twr_v685 = (uint64_t)(&TlUninitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v685)(__twr_v680);
    __twr_l74:;
    _jkl_epilogue:;
}
void BtTargetInfoPrebuilt() {
    uint64_t __twr_v686;
    uint64_t __twr_v687;
    uint64_t _mng_token688[4];
    uint64_t __twr_v689;
    uint64_t __twr_v690;
    uint64_t __twr_v691;
    uint64_t __twr_v692;
    uint64_t __twr_v693;
    uint64_t __twr_v694;
    uint64_t __twr_v695;
    uint64_t __twr_v696;
    uint64_t __twr_v697;
    uint64_t _mng_string698;
    uint64_t __twr_v699;
    uint64_t __twr_v700;
    uint64_t __twr_v701;
    uint64_t __twr_v702;
    uint64_t __twr_v703;
    uint64_t __twr_v704;
    uint64_t __twr_v705;
    uint64_t __twr_v706;
    uint64_t __twr_v707;
    uint64_t __twr_v708;
    uint64_t __twr_v709;
    uint64_t __twr_v710;
    uint64_t __twr_v711;
    uint64_t __twr_v712;
    uint64_t __twr_v713;
    uint64_t __twr_v714;
    uint64_t __twr_v715;
    __twr_v686 = (uint64_t)(&LexMatchToken);
    __twr_v687 = (uint64_t)(&_mng_token688);
    __twr_v689 = 4ULL;
    __twr_v690 = 0ULL;
    __twr_v691 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v686)(__twr_v687, __twr_v689, __twr_v690);
    if (__twr_v691) { goto __twr_l82; } else { goto __twr_l83; }
    __twr_l83:;
    __twr_v692 = (uint64_t)(&LexTokenError);
    __twr_v693 = (uint64_t)(&_mng_token688);
    __twr_v694 = (uint64_t)(&"Expected a string");
    __twr_v695 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v692)(__twr_v693, __twr_v694, __twr_v695, __twr_v695, __twr_v695);
    __twr_l82:;
    __twr_v696 = (uint64_t)(&_mng_token688);
    __twr_v697 = *(uint64_t*)(__twr_v696);
    _mng_string698 = __twr_v697;
    __twr_v699 = (uint64_t)(&TlUninitializeDynamicBuffer);
    __twr_v700 = (uint64_t)(&BtCurrentTarget);
    __twr_v701 = *(uint64_t*)(__twr_v700);
    __twr_v702 = 696ULL;
    __twr_v703 = __twr_v701 + __twr_v702;
    ((void (*)(uint64_t))__twr_v699)(__twr_v703);
    __twr_v704 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v705 = *(uint64_t*)(__twr_v700);
    __twr_v706 = __twr_v705 + __twr_v702;
    ((void (*)(uint64_t))__twr_v704)(__twr_v706);
    __twr_v707 = (uint64_t)(&BtParseStandardPath);
    __twr_v708 = 48ULL;
    __twr_v709 = _mng_string698 + __twr_v708;
    __twr_v710 = *(uint64_t*)(__twr_v700);
    __twr_v711 = __twr_v710 + __twr_v702;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v707)(__twr_v709, __twr_v711, __twr_v696);
    __twr_v712 = 1ULL;
    __twr_v713 = *(uint64_t*)(__twr_v700);
    __twr_v714 = 826ULL;
    __twr_v715 = __twr_v713 + __twr_v714;
    *(uint8_t*)(__twr_v715) = __twr_v712;
    __twr_l81:;
    _jkl_epilogue:;
}
uint64_t BtTargetInfoSpecifiers[10] = {
    (uint64_t)(&BtTargetInfoFile),
    (uint64_t)(&BtTargetInfoDepend),
    (uint64_t)(&BtTargetInfoSources),
    (uint64_t)(&BtTargetInfoJklInclude),
    (uint64_t)(&BtTargetInfoLibDir),
    (uint64_t)(&BtTargetInfoLinkOpt),
    (uint64_t)(&BtTargetInfoJklOpt),
    (uint64_t)(&BtTargetInfoLink),
    (uint64_t)(&BtTargetInfoDyLink),
    (uint64_t)(&BtTargetInfoPrebuilt),
};
uint64_t BtParseTarget() {
    uint64_t _jkl_retv;
    uint64_t __twr_v716;
    uint64_t __twr_v717;
    uint64_t _mng_token718[4];
    uint64_t __twr_v719;
    uint64_t __twr_v720;
    uint64_t __twr_v721;
    uint64_t __twr_v722;
    uint64_t __twr_v723;
    uint64_t __twr_v724;
    uint64_t __twr_v725;
    uint64_t __twr_v726;
    uint64_t __twr_v727;
    uint64_t __twr_v728;
    uint64_t __twr_v729;
    uint64_t __twr_v730;
    uint64_t __twr_v731;
    uint64_t __twr_v732;
    uint64_t __twr_v733;
    uint64_t __twr_v734;
    uint64_t _mng_nametoken735[4];
    uint64_t __twr_v736;
    uint64_t __twr_v737;
    uint64_t __twr_v738;
    uint64_t __twr_v739;
    uint64_t __twr_v740;
    uint64_t __twr_v741;
    uint64_t __twr_v742;
    uint64_t __twr_v743;
    uint64_t __twr_v744;
    uint64_t _mng_namestring745;
    uint64_t __twr_v746;
    uint64_t __twr_v747;
    uint64_t __twr_v748;
    uint64_t __twr_v749;
    uint64_t __twr_v750;
    uint64_t __twr_v751;
    uint64_t __twr_v752;
    uint64_t __twr_v753;
    uint64_t __twr_v754;
    uint64_t __twr_v755;
    uint64_t __twr_v756;
    uint64_t __twr_v757;
    uint64_t __twr_v758;
    uint64_t _mng_target759;
    uint64_t _mng_status760;
    uint64_t __twr_v761;
    uint64_t __twr_v762;
    uint64_t __twr_v763;
    uint64_t __twr_v764;
    uint64_t __twr_v765;
    uint64_t __twr_v766;
    uint64_t __twr_v767;
    uint64_t __twr_v768;
    uint64_t __twr_v769;
    uint64_t __twr_v770;
    uint64_t __twr_v771;
    uint64_t __twr_v772;
    uint64_t __twr_v773;
    uint64_t __twr_v774;
    uint64_t __twr_v775;
    uint64_t __twr_v776;
    uint64_t __twr_v777;
    uint64_t __twr_v778;
    uint64_t __twr_v779;
    uint64_t __twr_v780;
    uint64_t __twr_v781;
    uint64_t __twr_v782;
    uint64_t __twr_v783;
    uint64_t __twr_v784;
    uint64_t __twr_v785;
    uint64_t __twr_v786;
    uint64_t __twr_v787;
    uint64_t __twr_v788;
    uint64_t __twr_v789;
    uint64_t _mng_listhead790;
    uint64_t __twr_v791;
    uint64_t __twr_v792;
    uint64_t __twr_v793;
    uint64_t __twr_v794;
    uint64_t _mng_listhead795;
    uint64_t __twr_v796;
    uint64_t __twr_v797;
    uint64_t __twr_v798;
    uint64_t _mng_listhead799;
    uint64_t __twr_v800;
    uint64_t __twr_v801;
    uint64_t __twr_v802;
    uint64_t _mng_listhead803;
    uint64_t __twr_v804;
    uint64_t __twr_v805;
    uint64_t __twr_v806;
    uint64_t _mng_listhead807;
    uint64_t __twr_v808;
    uint64_t _mng_listentry809;
    uint64_t __twr_v810;
    uint64_t __twr_v811;
    uint64_t _mng_macro812;
    uint64_t __twr_v813;
    uint64_t __twr_v814;
    uint64_t __twr_v815;
    uint64_t _mng_exprec816;
    uint64_t __twr_v817;
    uint64_t __twr_v818;
    uint64_t __twr_v819;
    uint64_t __twr_v820;
    uint64_t __twr_v821;
    uint64_t __twr_v822;
    uint64_t __twr_v823;
    uint64_t _mng_listhead824;
    uint64_t _mng_listentry825;
    uint64_t __twr_v826;
    uint64_t __twr_v827;
    uint64_t __twr_v828;
    uint64_t _mng_last829;
    uint64_t __twr_v830;
    uint64_t __twr_v831;
    uint64_t __twr_v832;
    uint64_t __twr_v833;
    uint64_t __twr_v834;
    uint64_t __twr_v835;
    uint64_t __twr_v836;
    uint64_t __twr_v837;
    uint64_t __twr_v838;
    uint64_t __twr_v839;
    uint64_t __twr_v840;
    uint64_t __twr_v841;
    uint64_t __twr_v842;
    uint64_t __twr_v843;
    uint64_t __twr_v844;
    uint64_t __twr_v845;
    uint64_t __twr_v846;
    uint64_t __twr_v847;
    uint64_t __twr_v848;
    uint64_t __twr_v849;
    uint64_t __twr_v850;
    uint64_t __twr_v851;
    uint64_t __twr_v852;
    uint64_t __twr_v853;
    uint64_t __twr_v854;
    uint64_t __twr_v855;
    uint64_t __twr_v856;
    uint64_t __twr_v857;
    uint64_t __twr_v858;
    uint64_t __twr_v859;
    uint64_t __twr_v860;
    uint64_t __twr_v861;
    uint64_t __twr_v862;
    uint64_t __twr_v863;
    uint64_t __twr_v864;
    uint64_t __twr_v865;
    uint64_t __twr_v866;
    uint64_t __twr_v867;
    uint64_t __twr_v868;
    uint64_t __twr_v869;
    uint64_t __twr_v870;
    uint64_t __twr_v871;
    uint64_t __twr_v872;
    __twr_v716 = (uint64_t)(&LexGetToken);
    __twr_v717 = (uint64_t)(&_mng_token718);
    ((void (*)(uint64_t))__twr_v716)(__twr_v717);
    __twr_v719 = 24ULL;
    __twr_v720 = __twr_v717 + __twr_v719;
    __twr_v721 = *(uint8_t*)(__twr_v720);
    __twr_v722 = 6ULL;
    if (__twr_v721 != __twr_v722) { goto __twr_l85; } else { goto __twr_l86; }
    __twr_l86:;
    __twr_v723 = 0ULL;
    _jkl_retv = __twr_v723;
    goto _jkl_epilogue;
    __twr_l85:;
    __twr_v724 = (uint64_t)(&_mng_token718);
    __twr_v725 = 24ULL;
    __twr_v726 = __twr_v724 + __twr_v725;
    __twr_v727 = *(uint8_t*)(__twr_v726);
    __twr_v728 = 1ULL;
    if (__twr_v727 == __twr_v728) { goto __twr_l87; } else { goto __twr_l88; }
    __twr_l88:;
    __twr_v729 = (uint64_t)(&LexTokenError);
    __twr_v730 = (uint64_t)(&_mng_token718);
    __twr_v731 = (uint64_t)(&"Expected TARGET");
    __twr_v732 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v729)(__twr_v730, __twr_v731, __twr_v732, __twr_v732, __twr_v732);
    __twr_l87:;
    __twr_v733 = (uint64_t)(&LexMatchToken);
    __twr_v734 = (uint64_t)(&_mng_nametoken735);
    __twr_v736 = 4ULL;
    __twr_v737 = 0ULL;
    __twr_v738 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v733)(__twr_v734, __twr_v736, __twr_v737);
    if (__twr_v738) { goto __twr_l89; } else { goto __twr_l90; }
    __twr_l90:;
    __twr_v739 = (uint64_t)(&LexTokenError);
    __twr_v740 = (uint64_t)(&_mng_nametoken735);
    __twr_v741 = (uint64_t)(&"Expected a string");
    __twr_v742 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v739)(__twr_v740, __twr_v741, __twr_v742, __twr_v742, __twr_v742);
    __twr_l89:;
    __twr_v743 = (uint64_t)(&_mng_nametoken735);
    __twr_v744 = *(uint64_t*)(__twr_v743);
    _mng_namestring745 = __twr_v744;
    __twr_v746 = (uint64_t)(&TlLookupHashTable);
    __twr_v747 = (uint64_t)(&BtTargetHashTable);
    __twr_v748 = 64ULL;
    __twr_v749 = _mng_namestring745 + __twr_v748;
    __twr_v750 = *(uint64_t*)(__twr_v749);
    __twr_v751 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v746)(__twr_v747, __twr_v750);
    if (!(__twr_v751)) { goto __twr_l91; } else { goto __twr_l92; }
    __twr_l92:;
    __twr_v752 = (uint64_t)(&LexTokenError);
    __twr_v753 = (uint64_t)(&_mng_nametoken735);
    __twr_v754 = (uint64_t)(&"Target already defined");
    __twr_v755 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v752)(__twr_v753, __twr_v754, __twr_v755, __twr_v755, __twr_v755);
    __twr_l91:;
    __twr_v756 = (uint64_t)(&TlBumpAlloc);
    __twr_v757 = 827ULL;
    __twr_v758 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v756)(__twr_v757, (uint64_t)(&_mng_target759));
    _mng_status760 = __twr_v758;
    if (!(_mng_status760)) { goto __twr_l93; } else { goto __twr_l94; }
    __twr_l94:;
    __twr_v761 = (uint64_t)(&TlInternalError);
    __twr_v762 = (uint64_t)(&"Failed to allocate target");
    __twr_v763 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v761)(__twr_v762, __twr_v763, __twr_v763, __twr_v763);
    __twr_l93:;
    __twr_v764 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v765 = 48ULL;
    __twr_v766 = _mng_target759 + __twr_v765;
    ((void (*)(uint64_t))__twr_v764)(__twr_v766);
    __twr_v767 = 312ULL;
    __twr_v768 = _mng_target759 + __twr_v767;
    ((void (*)(uint64_t))__twr_v764)(__twr_v768);
    __twr_v769 = 400ULL;
    __twr_v770 = _mng_target759 + __twr_v769;
    ((void (*)(uint64_t))__twr_v764)(__twr_v770);
    __twr_v771 = 488ULL;
    __twr_v772 = _mng_target759 + __twr_v771;
    ((void (*)(uint64_t))__twr_v764)(__twr_v772);
    __twr_v773 = 136ULL;
    __twr_v774 = _mng_target759 + __twr_v773;
    ((void (*)(uint64_t))__twr_v764)(__twr_v774);
    __twr_v775 = 224ULL;
    __twr_v776 = _mng_target759 + __twr_v775;
    ((void (*)(uint64_t))__twr_v764)(__twr_v776);
    __twr_v777 = 608ULL;
    __twr_v778 = _mng_target759 + __twr_v777;
    ((void (*)(uint64_t))__twr_v764)(__twr_v778);
    __twr_v779 = 696ULL;
    __twr_v780 = _mng_target759 + __twr_v779;
    ((void (*)(uint64_t))__twr_v764)(__twr_v780);
    __twr_v781 = 0ULL;
    __twr_v782 = 824ULL;
    __twr_v783 = _mng_target759 + __twr_v782;
    *(uint8_t*)(__twr_v783) = __twr_v781;
    __twr_v784 = 825ULL;
    __twr_v785 = _mng_target759 + __twr_v784;
    *(uint8_t*)(__twr_v785) = __twr_v781;
    __twr_v786 = 826ULL;
    __twr_v787 = _mng_target759 + __twr_v786;
    *(uint8_t*)(__twr_v787) = __twr_v781;
    __twr_v788 = 576ULL;
    __twr_v789 = _mng_target759 + __twr_v788;
    _mng_listhead790 = __twr_v789;
    __twr_v791 = 8ULL;
    __twr_v792 = _mng_listhead790 + __twr_v791;
    *(uint64_t*)(__twr_v792) = _mng_listhead790;
    *(uint64_t*)(_mng_listhead790) = _mng_listhead790;
    __twr_v793 = 592ULL;
    __twr_v794 = _mng_target759 + __twr_v793;
    _mng_listhead795 = __twr_v794;
    __twr_v796 = _mng_listhead795 + __twr_v791;
    *(uint64_t*)(__twr_v796) = _mng_listhead795;
    *(uint64_t*)(_mng_listhead795) = _mng_listhead795;
    __twr_v797 = 784ULL;
    __twr_v798 = _mng_target759 + __twr_v797;
    _mng_listhead799 = __twr_v798;
    __twr_v800 = _mng_listhead799 + __twr_v791;
    *(uint64_t*)(__twr_v800) = _mng_listhead799;
    *(uint64_t*)(_mng_listhead799) = _mng_listhead799;
    __twr_v801 = 800ULL;
    __twr_v802 = _mng_target759 + __twr_v801;
    _mng_listhead803 = __twr_v802;
    __twr_v804 = _mng_listhead803 + __twr_v791;
    *(uint64_t*)(__twr_v804) = _mng_listhead803;
    *(uint64_t*)(_mng_listhead803) = _mng_listhead803;
    __twr_v805 = (uint64_t)(&BtCurrentTarget);
    *(uint64_t*)(__twr_v805) = _mng_target759;
    __twr_v806 = (uint64_t)(&LexExposedMacroListHead);
    _mng_listhead807 = __twr_v806;
    __twr_v808 = *(uint64_t*)(_mng_listhead807);
    _mng_listentry809 = __twr_v808;
    if (_mng_listentry809 == _mng_listhead807) { goto __twr_l96; } else { goto __twr_l95; }
    __twr_l95:;
    __twr_v810 = 232ULL;
    __twr_v811 = _mng_listentry809 - __twr_v810;
    _mng_macro812 = __twr_v811;
    __twr_v813 = (uint64_t)(&TlBumpAlloc);
    __twr_v814 = 24ULL;
    __twr_v815 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v813)(__twr_v814, (uint64_t)(&_mng_exprec816));
    _mng_status760 = __twr_v815;
    if (!(_mng_status760)) { goto __twr_l98; } else { goto __twr_l99; }
    __twr_l99:;
    __twr_v817 = (uint64_t)(&TlInternalError);
    __twr_v818 = (uint64_t)(&"Failed to allocate exposed macro record");
    __twr_v819 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v817)(__twr_v818, __twr_v819, __twr_v819, __twr_v819);
    __twr_l98:;
    __twr_v820 = 16ULL;
    __twr_v821 = _mng_exprec816 + __twr_v820;
    *(uint64_t*)(__twr_v821) = _mng_macro812;
    __twr_v822 = 800ULL;
    __twr_v823 = _mng_target759 + __twr_v822;
    _mng_listhead824 = __twr_v823;
    _mng_listentry825 = _mng_exprec816;
    __twr_v826 = 8ULL;
    __twr_v827 = _mng_listhead824 + __twr_v826;
    __twr_v828 = *(uint64_t*)(__twr_v827);
    _mng_last829 = __twr_v828;
    __twr_v830 = _mng_listentry825 + __twr_v826;
    *(uint64_t*)(__twr_v830) = _mng_last829;
    *(uint64_t*)(_mng_listentry825) = _mng_listhead824;
    *(uint64_t*)(_mng_last829) = _mng_listentry825;
    *(uint64_t*)(__twr_v827) = _mng_listentry825;
    __twr_v831 = *(uint64_t*)(_mng_listentry809);
    _mng_listentry809 = __twr_v831;
    __twr_l97:;
    if (_mng_listentry809 != _mng_listhead807) { goto __twr_l95; } else { goto __twr_l96; }
    __twr_l96:;
    __twr_v832 = (uint64_t)(&LexMatchToken);
    __twr_v833 = (uint64_t)(&_mng_token718);
    __twr_v834 = 3ULL;
    __twr_v835 = 0ULL;
    __twr_v836 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v832)(__twr_v833, __twr_v834, __twr_v835);
    if (__twr_v836) { goto __twr_l101; } else { goto __twr_l100; }
    __twr_l100:;
    __twr_v837 = (uint64_t)(&LexMatchToken);
    __twr_v838 = (uint64_t)(&_mng_token718);
    __twr_v839 = 2ULL;
    __twr_v840 = 0ULL;
    __twr_v841 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v837)(__twr_v838, __twr_v839, __twr_v840);
    if (__twr_v841) { goto __twr_l103; } else { goto __twr_l104; }
    __twr_l104:;
    __twr_v842 = (uint64_t)(&LexTokenError);
    __twr_v843 = (uint64_t)(&_mng_token718);
    __twr_v844 = (uint64_t)(&"Expected a target info specifier");
    __twr_v845 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v842)(__twr_v843, __twr_v844, __twr_v845, __twr_v845, __twr_v845);
    __twr_l103:;
    __twr_v846 = (uint64_t)(&BtTargetInfoSpecifiers);
    __twr_v847 = (uint64_t)(&_mng_token718);
    __twr_v848 = 25ULL;
    __twr_v849 = __twr_v847 + __twr_v848;
    __twr_v850 = *(uint8_t*)(__twr_v849);
    __twr_v851 = 3ULL;
    __twr_v852 = __twr_v850 << __twr_v851;
    __twr_v853 = __twr_v846 + __twr_v852;
    __twr_v854 = *(uint64_t*)(__twr_v853);
    ((void (*)())__twr_v854)();
    __twr_l102:;
    __twr_v855 = (uint64_t)(&LexMatchToken);
    __twr_v856 = (uint64_t)(&_mng_token718);
    __twr_v857 = 3ULL;
    __twr_v858 = 0ULL;
    __twr_v859 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v855)(__twr_v856, __twr_v857, __twr_v858);
    if (!(__twr_v859)) { goto __twr_l100; } else { goto __twr_l101; }
    __twr_l101:;
    __twr_v860 = (uint64_t)(&TlInsertHashTable);
    __twr_v861 = (uint64_t)(&BtTargetHashTable);
    __twr_v862 = 64ULL;
    __twr_v863 = _mng_namestring745 + __twr_v862;
    __twr_v864 = *(uint64_t*)(__twr_v863);
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v860)(__twr_v861, _mng_target759, __twr_v864);
    __twr_v865 = 826ULL;
    __twr_v866 = _mng_target759 + __twr_v865;
    __twr_v867 = *(uint8_t*)(__twr_v866);
    if (!(__twr_v867)) { goto __twr_l105; } else { goto __twr_l106; }
    __twr_l106:;
    __twr_v868 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v869 = 696ULL;
    __twr_v870 = _mng_target759 + __twr_v869;
    __twr_v871 = 0ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v868)(__twr_v870, __twr_v871);
    __twr_l105:;
    __twr_v872 = 1ULL;
    _jkl_retv = __twr_v872;
    goto _jkl_epilogue;
    __twr_l84:;
    _jkl_epilogue:;
    return _jkl_retv;
}
void BtParse() {
    uint64_t __twr_v873;
    uint64_t __twr_v874;
    uint64_t __twr_v875;
    uint64_t __twr_v876;
    uint64_t __twr_v877;
    uint64_t __twr_v878;
    uint64_t __twr_v879;
    uint64_t __twr_v880;
    uint64_t __twr_v881;
    uint64_t __twr_v882;
    uint64_t _mng_target883;
    uint64_t __twr_v884;
    uint64_t __twr_v885;
    uint64_t __twr_v886;
    uint64_t __twr_v887;
    __twr_v873 = (uint64_t)(&TlInitializeHashTable);
    __twr_v874 = (uint64_t)(&BtTargetHashTable);
    ((void (*)(uint64_t))__twr_v873)(__twr_v874);
    __twr_v875 = (uint64_t)(&BtParseTarget);
    __twr_v876 = ((uint64_t (*)())__twr_v875)();
    if (!(__twr_v876)) { goto __twr_l109; } else { goto __twr_l108; }
    __twr_l108:;
    __twr_l110:;
    __twr_v877 = (uint64_t)(&BtParseTarget);
    __twr_v878 = ((uint64_t (*)())__twr_v877)();
    if (__twr_v878) { goto __twr_l108; } else { goto __twr_l109; }
    __twr_l109:;
    __twr_v879 = (uint64_t)(&TlLookupHashTable);
    __twr_v880 = (uint64_t)(&BtTargetHashTable);
    __twr_v881 = (uint64_t)(&FeTargetName);
    __twr_v882 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v879)(__twr_v880, __twr_v881);
    _mng_target883 = __twr_v882;
    if (_mng_target883) { goto __twr_l111; } else { goto __twr_l112; }
    __twr_l112:;
    __twr_v884 = (uint64_t)(&TlUserError);
    __twr_v885 = (uint64_t)(&"Target not defined");
    __twr_v886 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v884)(__twr_v885, __twr_v886, __twr_v886, __twr_v886);
    __twr_l111:;
    __twr_v887 = (uint64_t)(&BtSelectedTarget);
    *(uint64_t*)(__twr_v887) = _mng_target883;
    __twr_l107:;
    _jkl_epilogue:;
}
void BtLookupConfigMacros() {
    uint64_t __twr_v888;
    uint64_t __twr_v889;
    uint64_t __twr_v890;
    uint64_t __twr_v891;
    uint64_t __twr_v892;
    uint64_t _mng_macro893;
    uint64_t __twr_v894;
    uint64_t __twr_v895;
    uint64_t __twr_v896;
    uint64_t __twr_v897;
    uint64_t __twr_v898;
    uint64_t __twr_v899;
    uint64_t __twr_v900;
    uint64_t __twr_v901;
    uint64_t __twr_v902;
    uint64_t __twr_v903;
    uint64_t __twr_v904;
    uint64_t __twr_v905;
    uint64_t __twr_v906;
    uint64_t __twr_v907;
    uint64_t __twr_v908;
    uint64_t __twr_v909;
    uint64_t __twr_v910;
    uint64_t __twr_v911;
    uint64_t __twr_v912;
    uint64_t __twr_v913;
    uint64_t __twr_v914;
    uint64_t __twr_v915;
    uint64_t __twr_v916;
    uint64_t __twr_v917;
    uint64_t __twr_v918;
    uint64_t __twr_v919;
    uint64_t __twr_v920;
    uint64_t __twr_v921;
    uint64_t __twr_v922;
    uint64_t __twr_v923;
    uint64_t __twr_v924;
    uint64_t __twr_v925;
    uint64_t __twr_v926;
    uint64_t __twr_v927;
    uint64_t __twr_v928;
    uint64_t __twr_v929;
    uint64_t __twr_v930;
    uint64_t __twr_v931;
    uint64_t __twr_v932;
    uint64_t __twr_v933;
    uint64_t __twr_v934;
    uint64_t __twr_v935;
    uint64_t __twr_v936;
    uint64_t __twr_v937;
    uint64_t __twr_v938;
    uint64_t __twr_v939;
    uint64_t __twr_v940;
    uint64_t __twr_v941;
    uint64_t __twr_v942;
    uint64_t __twr_v943;
    uint64_t __twr_v944;
    uint64_t __twr_v945;
    uint64_t __twr_v946;
    uint64_t __twr_v947;
    uint64_t __twr_v948;
    uint64_t __twr_v949;
    uint64_t __twr_v950;
    uint64_t __twr_v951;
    uint64_t __twr_v952;
    uint64_t __twr_v953;
    uint64_t __twr_v954;
    uint64_t __twr_v955;
    uint64_t __twr_v956;
    uint64_t __twr_v957;
    uint64_t __twr_v958;
    uint64_t __twr_v959;
    uint64_t __twr_v960;
    uint64_t __twr_v961;
    uint64_t __twr_v962;
    uint64_t __twr_v963;
    uint64_t __twr_v964;
    uint64_t __twr_v965;
    uint64_t __twr_v966;
    uint64_t __twr_v967;
    uint64_t __twr_v968;
    uint64_t __twr_v969;
    uint64_t __twr_v970;
    uint64_t __twr_v971;
    uint64_t __twr_v972;
    uint64_t __twr_v973;
    uint64_t __twr_v974;
    uint64_t __twr_v975;
    uint64_t __twr_v976;
    uint64_t __twr_v977;
    uint64_t __twr_v978;
    uint64_t __twr_v979;
    uint64_t __twr_v980;
    uint64_t __twr_v981;
    uint64_t __twr_v982;
    uint64_t __twr_v983;
    uint64_t __twr_v984;
    uint64_t __twr_v985;
    uint64_t __twr_v986;
    uint64_t __twr_v987;
    uint64_t __twr_v988;
    uint64_t __twr_v989;
    uint64_t __twr_v990;
    uint64_t __twr_v991;
    uint64_t __twr_v992;
    uint64_t __twr_v993;
    uint64_t __twr_v994;
    __twr_v888 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v889 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v890 = *(uint64_t*)(__twr_v889);
    __twr_v891 = (uint64_t)(&"ARCHITECTURE");
    __twr_v892 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v888)(__twr_v890, __twr_v891);
    _mng_macro893 = __twr_v892;
    if (_mng_macro893) { goto __twr_l114; } else { goto __twr_l115; }
    __twr_l115:;
    __twr_v894 = (uint64_t)(&TlUserError);
    __twr_v895 = (uint64_t)(&"ARCHITECTURE wasn't defined in the config");
    __twr_v896 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v894)(__twr_v895, __twr_v896, __twr_v896, __twr_v896);
    __twr_l114:;
    __twr_v897 = 264ULL;
    __twr_v898 = _mng_macro893 + __twr_v897;
    __twr_v899 = *(uint8_t*)(__twr_v898);
    if (!(__twr_v899)) { goto __twr_l116; } else { goto __twr_l117; }
    __twr_l117:;
    __twr_v900 = (uint64_t)(&TlUserError);
    __twr_v901 = (uint64_t)(&"ARCHITECTURE is a function macro for some reason");
    __twr_v902 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v900)(__twr_v901, __twr_v902, __twr_v902, __twr_v902);
    __twr_l116:;
    __twr_v903 = (uint64_t)(&TlCopyString);
    __twr_v904 = (uint64_t)(&BtTargetArchitectureName);
    __twr_v905 = 96ULL;
    __twr_v906 = _mng_macro893 + __twr_v905;
    __twr_v907 = *(uint64_t*)(__twr_v906);
    __twr_v908 = 64ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v903)(__twr_v904, __twr_v907, __twr_v908);
    __twr_v909 = (uint64_t)(&TlCompareString);
    __twr_v910 = (uint64_t)(&"CHost");
    __twr_v911 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v909)(__twr_v904, __twr_v910);
    if (__twr_v911) { goto __twr_l118; } else { goto __twr_l119; }
    __twr_l119:;
    __twr_v912 = 1ULL;
    __twr_v913 = (uint64_t)(&BtCHost);
    *(uint64_t*)(__twr_v913) = __twr_v912;
    __twr_l118:;
    __twr_v914 = 1ULL;
    __twr_v915 = (uint64_t)(&BtJobCount);
    *(uint64_t*)(__twr_v915) = __twr_v914;
    __twr_v916 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v917 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v918 = *(uint64_t*)(__twr_v917);
    __twr_v919 = (uint64_t)(&"JOBS");
    __twr_v920 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v916)(__twr_v918, __twr_v919);
    _mng_macro893 = __twr_v920;
    if (!(_mng_macro893)) { goto __twr_l120; } else { goto __twr_l121; }
    __twr_l121:;
    __twr_v921 = 264ULL;
    __twr_v922 = _mng_macro893 + __twr_v921;
    __twr_v923 = *(uint8_t*)(__twr_v922);
    if (!(__twr_v923)) { goto __twr_l122; } else { goto __twr_l123; }
    __twr_l123:;
    __twr_v924 = (uint64_t)(&TlUserError);
    __twr_v925 = (uint64_t)(&"JOBS is a function macro for some reason");
    __twr_v926 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v924)(__twr_v925, __twr_v926, __twr_v926, __twr_v926);
    __twr_l122:;
    __twr_v927 = (uint64_t)(&TlStringToNumber);
    __twr_v928 = 96ULL;
    __twr_v929 = _mng_macro893 + __twr_v928;
    __twr_v930 = *(uint64_t*)(__twr_v929);
    __twr_v931 = 18446744073709551615ULL;
    __twr_v932 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v927)(__twr_v930, __twr_v931, (uint64_t)(&__twr_v933));
    __twr_v934 = (uint64_t)(&BtJobCount);
    *(uint64_t*)(__twr_v934) = __twr_v933;
    if (__twr_v932) { goto __twr_l124; } else { goto __twr_l125; }
    __twr_l125:;
    __twr_v935 = (uint64_t)(&TlUserError);
    __twr_v936 = (uint64_t)(&"JOBS wasn't a numeric value");
    __twr_v937 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v935)(__twr_v936, __twr_v937, __twr_v937, __twr_v937);
    __twr_l124:;
    __twr_v938 = (uint64_t)(&BtJobCount);
    __twr_v939 = *(uint64_t*)(__twr_v938);
    if (__twr_v939) { goto __twr_l126; } else { goto __twr_l127; }
    __twr_l127:;
    __twr_v940 = (uint64_t)(&TlUserError);
    __twr_v941 = (uint64_t)(&"Zero JOBS specified");
    __twr_v942 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v940)(__twr_v941, __twr_v942, __twr_v942, __twr_v942);
    __twr_l126:;
    __twr_l120:;
    __twr_v943 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v944 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v945 = *(uint64_t*)(__twr_v944);
    __twr_v946 = (uint64_t)(&"SDK_BASE");
    __twr_v947 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v943)(__twr_v945, __twr_v946);
    _mng_macro893 = __twr_v947;
    if (_mng_macro893) { goto __twr_l128; } else { goto __twr_l129; }
    __twr_l129:;
    __twr_v948 = (uint64_t)(&TlUserError);
    __twr_v949 = (uint64_t)(&"SDK_BASE wasn't defined in the config");
    __twr_v950 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v948)(__twr_v949, __twr_v950, __twr_v950, __twr_v950);
    __twr_l128:;
    __twr_v951 = 264ULL;
    __twr_v952 = _mng_macro893 + __twr_v951;
    __twr_v953 = *(uint8_t*)(__twr_v952);
    if (!(__twr_v953)) { goto __twr_l130; } else { goto __twr_l131; }
    __twr_l131:;
    __twr_v954 = (uint64_t)(&TlUserError);
    __twr_v955 = (uint64_t)(&"SDK_BASE is a function macro for some reason");
    __twr_v956 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v954)(__twr_v955, __twr_v956, __twr_v956, __twr_v956);
    __twr_l130:;
    __twr_v957 = (uint64_t)(&TlCopyString);
    __twr_v958 = (uint64_t)(&BtSdkBase);
    __twr_v959 = 96ULL;
    __twr_v960 = _mng_macro893 + __twr_v959;
    __twr_v961 = *(uint64_t*)(__twr_v960);
    __twr_v962 = 64ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v957)(__twr_v958, __twr_v961, __twr_v962);
    __twr_v963 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v964 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v965 = *(uint64_t*)(__twr_v964);
    __twr_v966 = (uint64_t)(&"ARCH_NAME_SUFFIX");
    __twr_v967 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v963)(__twr_v965, __twr_v966);
    _mng_macro893 = __twr_v967;
    if (!(_mng_macro893)) { goto __twr_l132; } else { goto __twr_l133; }
    __twr_l133:;
    __twr_v968 = 264ULL;
    __twr_v969 = _mng_macro893 + __twr_v968;
    __twr_v970 = *(uint8_t*)(__twr_v969);
    if (!(__twr_v970)) { goto __twr_l134; } else { goto __twr_l135; }
    __twr_l135:;
    __twr_v971 = (uint64_t)(&TlUserError);
    __twr_v972 = (uint64_t)(&"ARCH_NAME_SUFFIX is a function macro for some reason");
    __twr_v973 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v971)(__twr_v972, __twr_v973, __twr_v973, __twr_v973);
    __twr_l134:;
    __twr_v974 = (uint64_t)(&TlCopyString);
    __twr_v975 = (uint64_t)(&BtArchNameSuffix);
    __twr_v976 = 1ULL;
    __twr_v977 = 96ULL;
    __twr_v978 = _mng_macro893 + __twr_v977;
    __twr_v979 = *(uint64_t*)(__twr_v978);
    __twr_v980 = 256ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v974)(__twr_v975, __twr_v979, __twr_v980);
    __twr_v981 = (uint64_t)(&BtArchHasSuffix);
    *(uint64_t*)(__twr_v981) = __twr_v976;
    __twr_l132:;
    __twr_v982 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v983 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v984 = *(uint64_t*)(__twr_v983);
    __twr_v985 = (uint64_t)(&"CLEANUP");
    __twr_v986 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v982)(__twr_v984, __twr_v985);
    _mng_macro893 = __twr_v986;
    if (!(_mng_macro893)) { goto __twr_l136; } else { goto __twr_l137; }
    __twr_l137:;
    __twr_v987 = 264ULL;
    __twr_v988 = _mng_macro893 + __twr_v987;
    __twr_v989 = *(uint8_t*)(__twr_v988);
    if (!(__twr_v989)) { goto __twr_l138; } else { goto __twr_l139; }
    __twr_l139:;
    __twr_v990 = (uint64_t)(&TlUserError);
    __twr_v991 = (uint64_t)(&"CLEANUP is a function macro for some reason");
    __twr_v992 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v990)(__twr_v991, __twr_v992, __twr_v992, __twr_v992);
    __twr_l138:;
    __twr_v993 = 1ULL;
    __twr_v994 = (uint64_t)(&BtCleanUp);
    *(uint64_t*)(__twr_v994) = __twr_v993;
    __twr_l136:;
    __twr_l113:;
    _jkl_epilogue:;
}
