#include <stdint.h>
extern void TlMain(uint64_t _mng_argc1, uint64_t _mng_argv2);
extern void TlInitialize();
extern uint64_t TlMeasureString(uint64_t _mng_str3);
extern void TlFillMemoryWithByte(uint64_t _mng_ptr4, uint64_t _mng_sz5, uint64_t _mng_byte6);
extern void TlCopyMemory(uint64_t _mng_dest7, uint64_t _mng_src8, uint64_t _mng_sz9);
extern void TlPrintString(uint64_t _mng_str10);
extern void TlPrintNumber(uint64_t _mng_num11);
extern void TlPrintHex(uint64_t _mng_num12);
extern void TlPrintCharacter(uint64_t _mng_byte13);
extern void TlInternalError(uint64_t _mng_str14, uint64_t _mng_err115, uint64_t _mng_err216, uint64_t _mng_err317);
extern void TlUserError(uint64_t _mng_str18, uint64_t _mng_err119, uint64_t _mng_err220, uint64_t _mng_err321);
extern void TlErrorExit();
extern uint64_t TlBumpAlloc(uint64_t _mng_bytes22, uint64_t _mng_o_ptr);
extern uint64_t TlAlloc(uint64_t _mng_bytes23, uint64_t _mng_o_ptr);
extern void TlFree(uint64_t _mng_ptr24);
extern uint64_t TlCompareString(uint64_t _mng_str125, uint64_t _mng_str226);
extern uint64_t TlCompareStringWithMax(uint64_t _mng_str127, uint64_t _mng_str228, uint64_t _mng_count29);
extern void TlCopyString(uint64_t _mng_dest30, uint64_t _mng_src31, uint64_t _mng_bufsize32);
extern uint64_t TlOpenSource(uint64_t _mng_filename33, uint64_t _mng_o_handle);
extern uint64_t TlOpenDestination(uint64_t _mng_filename34, uint64_t _mng_o_handle);
extern void TlClose(uint64_t _mng_handle35);
extern uint64_t TlReadFile(uint64_t _mng_handle36, uint64_t _mng_bytes37, uint64_t _mng_buffer38);
extern uint64_t TlWriteFile(uint64_t _mng_handle39, uint64_t _mng_bytes40, uint64_t _mng_buffer41);
extern uint64_t TlHeapHits;
extern uint64_t TlBumpBytesUsed;
extern uint64_t TlBumpHits;
extern void TlInitializeHashTable(uint64_t _mng_hashtable42);
extern void TlSummarizeHashTable(uint64_t _mng_hashtable43);
extern void TlInsertHashTable(uint64_t _mng_hashtable44, uint64_t _mng_entry45, uint64_t _mng_key46);
extern uint64_t TlLookupOrInsertHashTable(uint64_t _mng_hashtable47, uint64_t _mng_entry48, uint64_t _mng_key49);
extern uint64_t TlLookupOrAllocateEntryHashTable(uint64_t _mng_hashtable50, uint64_t _mng_entrysize51, uint64_t _mng_key52, uint64_t _mng_o_created);
extern uint64_t TlLookupHashTable(uint64_t _mng_hashtable53, uint64_t _mng_key54);
extern void TlRemoveHashTable(uint64_t _mng_entry55);
extern void TlEnumerateHashTable(uint64_t _mng_hashtable56, uint64_t _mng_enumfunc57);
extern uint64_t TlLookupHashTableByHash(uint64_t _mng_hashtable58, uint64_t _mng_key59, uint64_t _mng_hash60);
extern uint64_t TlHashString(uint64_t _mng_str61);
extern void TlInitializeSymbolTable(uint64_t _mng_symboltable62, uint64_t _mng_outerscope63, uint64_t _mng_deletefunc64);
extern uint64_t TlCreateSymbolTable(uint64_t _mng_outerscope65, uint64_t _mng_deletefunc66);
extern uint64_t TlDeleteSymbolTable(uint64_t _mng_symboltable67);
extern uint64_t TlLookupSymbolTable(uint64_t _mng_symboltable68, uint64_t _mng_name69);
extern void TlInsertSymbolTable(uint64_t _mng_symboltable70, uint64_t _mng_entry71, uint64_t _mng_name72);
extern void TlRemoveSymbolTable(uint64_t _mng_entry73);
extern void TlInitializeDynamicBuffer(uint64_t _mng_array74);
extern void TlUninitializeDynamicBuffer(uint64_t _mng_array75);
extern void TlInsertDynamicBuffer(uint64_t _mng_array76, uint64_t _mng_byte77);
extern void TlCopyIntoDynamicBuffer(uint64_t _mng_array78, uint64_t _mng_srcbuf79, uint64_t _mng_length80);
extern void TlInsertNumberDynamicBuffer(uint64_t _mng_array81, uint64_t _mng_number82, uint64_t _mng_base83);
extern uint64_t TlPopDynamicBuffer(uint64_t _mng_array84);
extern uint64_t TlMatchPath(uint64_t _mng_path85, uint64_t _mng_pathset86, uint64_t _mng_resultingpath87, uint64_t _mng_o_handle);
extern void TlCopyParentPath(uint64_t _mng_srcpath88, uint64_t _mng_destpath89);
extern uint64_t TlGetFileName(uint64_t _mng_path90);
extern uint64_t TlIsPathDirectory(uint64_t _mng_path91);
extern uint64_t TlPathExists(uint64_t _mng_path92);
extern uint64_t TlIterateDirectory(uint64_t _mng_path93, uint64_t _mng_callback94, uint64_t _mng_context95);
extern uint64_t TlGetPathExtension(uint64_t _mng_path96);
extern uint64_t TlStatFile(uint64_t _mng_path97, uint64_t _mng_statrecord98);
extern uint64_t TlCreateDirectory(uint64_t _mng_path99);
extern uint64_t TlSwitchDirectory(uint64_t _mng_path100);
extern void TlInitializeZone(uint64_t _mng_zone101, uint64_t _mng_blocksize102);
extern uint64_t TlAllocateFromZone(uint64_t _mng_zone103);
extern void TlFreeToZone(uint64_t _mng_zone104, uint64_t _mng_block105);
extern uint64_t TlIsPowerOfTwo(uint64_t _mng_constant106);
extern void TlPunchValue(uint64_t _mng_ptr107, uint64_t _mng_value108, uint64_t _mng_bytes109);
extern uint64_t TlTokenize(uint64_t _mng_buffer110, uint64_t _mng_tokenbuffer111, uint64_t _mng_bufsize112, uint64_t _mng_delimiter113);
extern uint64_t TlStringToNumber(uint64_t _mng_src114, uint64_t _mng_bufsize115, uint64_t _mng_o_num);
extern void TlSetTerminationHandler(uint64_t _mng_handler116);
extern uint64_t TlCreateThread(uint64_t _mng_startroutine117, uint64_t _mng_arg118, uint64_t _mng_o_thread);
extern uint64_t TlJoinThread(uint64_t _mng_thread119);
extern uint64_t TlCreateMutex();
extern void TlAcquireMutex(uint64_t _mng_mutex120);
extern void TlReleaseMutex(uint64_t _mng_mutex121);
extern uint64_t TlCreateSemaphore(uint64_t _mng_initialvalue122);
extern void TlAcquireSemaphore(uint64_t _mng_semaphore123);
extern void TlReleaseSemaphore(uint64_t _mng_semaphore124);
extern uint64_t TlSystem(uint64_t _mng_cmdline125);
extern uint64_t TlCurrentEpochTime();
extern uint64_t FeInputFile[32];
extern uint64_t FeInputFileHandle;
extern uint64_t FeIsMacroArgument(uint64_t _mng_arg126);
extern uint64_t FeCreateFileBlock(uint64_t _mng_includename127, uint64_t _mng_o_created);
extern void FeCopyPathFileBlock(uint64_t _mng_fileblock128, uint64_t _mng_filepath129);
extern uint64_t LexCharTreatment[32];
extern uint64_t LexCurrentStream;
extern uint64_t LexCurrentMacroScope;
extern uint32_t LexFalseCount;
extern uint32_t LexMacroDepth;
extern void LexInitialize();
extern uint64_t LexCreateSymbolTable(uint64_t _mng_outerscope130);
extern void LexInitializePreprocessor();
extern void LexDefineMacroFromArgumentString(uint64_t _mng_arg131);
extern void LexExpandMacro(uint64_t _mng_macro132, uint64_t _mng_token133);
extern void LexInitializeStreamZone();
extern void LexInitializeStream(uint64_t _mng_stream134, uint64_t _mng_macro135);
extern void LexUninitializeStream(uint64_t _mng_stream136);
extern uint64_t LexAllocateStream();
extern void LexFreeStream(uint64_t _mng_stream137);
extern void LexPushStream(uint64_t _mng_stream138);
extern uint64_t LexPopStream();
extern void LexInitializeFileStream(uint64_t _mng_stream139, uint64_t _mng_fileblock140, uint64_t _mng_handle141);
extern uint64_t LexCreateFileStream(uint64_t _mng_fileblock142, uint64_t _mng_handle143);
extern uint64_t LexStreamNextCharacter();
extern void LexParseDirective();
extern void LexCopyToken(uint64_t _mng_dest144, uint64_t _mng_src145);
extern void LexGetToken(uint64_t _mng_token146);
extern void LexPutbackToken(uint64_t _mng_token147);
extern uint64_t LexMatchToken(uint64_t _mng_token148, uint64_t _mng_type149, uint64_t _mng_subtype150);
extern void LexStreamError(uint64_t _mng_str151, uint64_t _mng_err1152, uint64_t _mng_err2153, uint64_t _mng_err3154);
extern void LexTokenError(uint64_t _mng_token155, uint64_t _mng_str156, uint64_t _mng_err1157, uint64_t _mng_err2158, uint64_t _mng_err3159);
extern uint64_t LexCrunchNumber(uint64_t _mng_token160, uint64_t _mng_buffer161);
extern uint64_t LexExposedMacroListHead[2];
extern uint64_t BtTargetArchitectureName[8];
extern uint64_t BtJobCount;
extern uint64_t BtVerbose;
extern uint64_t BtStatFile(uint64_t _mng_fullpath162);
uint64_t BtTargetHashTable[196];
uint64_t BtCurrentTarget;
uint64_t BtCHost = 0ULL;
uint64_t BtArchHasSuffix = 0ULL;
uint64_t BtCleanUp = 0ULL;
uint64_t BtVerbose = 0ULL;
uint64_t BtTargetArchitectureName[8];
uint64_t BtSdkBase[32];
uint64_t BtArchNameSuffix[32];
extern uint64_t FeTargetName[32];
uint64_t BtSelectedTarget;
void BtParseStandardPath(uint64_t _mng_stdpath163, uint64_t _mng_fullpath164, uint64_t _mng_errtoken165) {
    uint64_t __twr_v166;
    uint64_t __twr_v167;
    uint64_t __twr_v168;
    uint64_t _mng_stdpathstr169;
    uint64_t __twr_v170;
    uint64_t __twr_v171;
    uint64_t __twr_v172;
    uint64_t __twr_v173;
    uint64_t __twr_v174;
    uint64_t __twr_v175;
    uint64_t __twr_v176;
    uint64_t __twr_v177;
    uint64_t __twr_v178;
    uint64_t __twr_v179;
    uint64_t _mng_count180;
    uint64_t __twr_v181;
    uint64_t __twr_v182;
    uint64_t __twr_v183;
    uint64_t __twr_v184;
    uint64_t __twr_v185;
    uint64_t __twr_v186;
    uint64_t __twr_v187;
    uint64_t __twr_v188;
    uint64_t __twr_v189;
    uint64_t __twr_v190;
    uint64_t __twr_v191;
    uint64_t __twr_v192;
    uint64_t __twr_v193;
    uint64_t __twr_v194;
    uint64_t __twr_v195;
    uint64_t __twr_v196;
    uint64_t __twr_v197;
    uint64_t __twr_v198;
    uint64_t __twr_v199;
    uint64_t _mng_macro200;
    uint64_t __twr_v201;
    uint64_t __twr_v202;
    uint64_t __twr_v203;
    uint64_t __twr_v204;
    uint64_t __twr_v205;
    uint64_t __twr_v206;
    uint64_t __twr_v207;
    uint64_t __twr_v208;
    uint64_t __twr_v209;
    uint64_t __twr_v210;
    uint64_t __twr_v211;
    uint64_t __twr_v212;
    uint64_t __twr_v213;
    uint64_t __twr_v214;
    uint64_t __twr_v215;
    uint64_t __twr_v216;
    uint64_t __twr_v217;
    uint64_t __twr_v218;
    uint64_t __twr_v219;
    uint64_t __twr_v220;
    uint64_t __twr_v221;
    uint64_t __twr_v222;
    uint64_t __twr_v223;
    uint64_t __twr_v224;
    uint64_t __twr_v225;
    uint64_t __twr_v226;
    uint64_t __twr_v227;
    uint64_t __twr_v228;
    uint64_t __twr_v229;
    uint64_t __twr_v230;
    uint64_t _mng_macro231;
    uint64_t __twr_v232;
    uint64_t __twr_v233;
    uint64_t __twr_v234;
    uint64_t __twr_v235;
    uint64_t __twr_v236;
    uint64_t __twr_v237;
    uint64_t __twr_v238;
    uint64_t __twr_v239;
    uint64_t __twr_v240;
    uint64_t __twr_v241;
    uint64_t __twr_v242;
    uint64_t __twr_v243;
    uint64_t __twr_v244;
    uint64_t __twr_v245;
    uint64_t __twr_v246;
    uint64_t __twr_v247;
    uint64_t __twr_v248;
    uint64_t __twr_v249;
    uint64_t __twr_v250;
    uint64_t __twr_v251;
    uint64_t __twr_v252;
    uint64_t __twr_v253;
    uint64_t __twr_v254;
    uint64_t __twr_v255;
    uint64_t __twr_v256;
    uint64_t __twr_v257;
    uint64_t __twr_v258;
    uint64_t __twr_v259;
    uint64_t __twr_v260;
    uint64_t __twr_v261;
    uint64_t __twr_v262;
    uint64_t __twr_v263;
    uint64_t __twr_v264;
    uint64_t __twr_v265;
    uint64_t __twr_v266;
    uint64_t __twr_v267;
    uint64_t __twr_v268;
    uint64_t __twr_v269;
    uint64_t __twr_v270;
    uint64_t __twr_v271;
    __twr_v166 = 16ULL;
    __twr_v167 = _mng_stdpath163 + __twr_v166;
    __twr_v168 = *(uint64_t*)(__twr_v167);
    _mng_stdpathstr169 = __twr_v168;
    __twr_v170 = *(uint8_t*)(_mng_stdpathstr169);
    if (__twr_v170) { goto __twr_l2; } else { goto __twr_l3; }
    __twr_l3:;
    __twr_v171 = (uint64_t)(&LexTokenError);
    __twr_v172 = (uint64_t)(&"Empty path string");
    __twr_v173 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v171)(_mng_errtoken165, __twr_v172, __twr_v173, __twr_v173, __twr_v173);
    __twr_l2:;
    __twr_v174 = *(uint8_t*)(_mng_stdpathstr169);
    __twr_v175 = 47ULL;
    if (__twr_v174 != __twr_v175) { goto __twr_l4; } else { goto __twr_l5; }
    __twr_l5:;
    __twr_v176 = (uint64_t)(&LexTokenError);
    __twr_v177 = (uint64_t)(&"Expected a relative path, found an absolute path");
    __twr_v178 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v176)(_mng_errtoken165, __twr_v177, __twr_v178, __twr_v178, __twr_v178);
    __twr_l4:;
    __twr_v179 = *(uint64_t*)(_mng_stdpath163);
    _mng_count180 = __twr_v179;
    __twr_v181 = *(uint8_t*)(_mng_stdpathstr169);
    __twr_v182 = 60ULL;
    if (__twr_v181 == __twr_v182) { goto __twr_l8; } else { goto __twr_l7; }
    __twr_l7:;
    __twr_v183 = (uint64_t)(&TlCopyParentPath);
    __twr_v184 = (uint64_t)(&LexCurrentStream);
    __twr_v185 = *(uint64_t*)(__twr_v184);
    __twr_v186 = 8ULL;
    __twr_v187 = __twr_v185 + __twr_v186;
    __twr_v188 = *(uint64_t*)(__twr_v187);
    __twr_v189 = 48ULL;
    __twr_v190 = __twr_v188 + __twr_v189;
    ((void (*)(uint64_t, uint64_t))__twr_v183)(__twr_v190, _mng_fullpath164);
    goto __twr_l6;
    __twr_l8:;
    __twr_v191 = (uint64_t)(&TlCompareStringWithMax);
    __twr_v192 = (uint64_t)(&"<sdk>/");
    __twr_v193 = 5ULL;
    __twr_v194 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v191)(_mng_stdpathstr169, __twr_v192, __twr_v193);
    if (__twr_v194) { goto __twr_l10; } else { goto __twr_l9; }
    __twr_l9:;
    __twr_v195 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v196 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v197 = *(uint64_t*)(__twr_v196);
    __twr_v198 = (uint64_t)(&"SDK_BASE");
    __twr_v199 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v195)(__twr_v197, __twr_v198);
    _mng_macro200 = __twr_v199;
    if (_mng_macro200) { goto __twr_l11; } else { goto __twr_l12; }
    __twr_l12:;
    __twr_v201 = (uint64_t)(&LexTokenError);
    __twr_v202 = (uint64_t)(&"SDK_BASE isn't defined");
    __twr_v203 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v201)(_mng_errtoken165, __twr_v202, __twr_v203, __twr_v203, __twr_v203);
    __twr_l11:;
    __twr_v204 = 264ULL;
    __twr_v205 = _mng_macro200 + __twr_v204;
    __twr_v206 = *(uint8_t*)(__twr_v205);
    if (!(__twr_v206)) { goto __twr_l13; } else { goto __twr_l14; }
    __twr_l14:;
    __twr_v207 = (uint64_t)(&LexTokenError);
    __twr_v208 = (uint64_t)(&"SDK_BASE is a function macro for some reason");
    __twr_v209 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v207)(_mng_errtoken165, __twr_v208, __twr_v209, __twr_v209, __twr_v209);
    __twr_l13:;
    __twr_v210 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v211 = 80ULL;
    __twr_v212 = _mng_macro200 + __twr_v211;
    __twr_v213 = 96ULL;
    __twr_v214 = _mng_macro200 + __twr_v213;
    __twr_v215 = *(uint64_t*)(__twr_v214);
    __twr_v216 = 1ULL;
    __twr_v217 = *(uint64_t*)(__twr_v212);
    __twr_v218 = __twr_v217 - __twr_v216;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v210)(_mng_fullpath164, __twr_v215, __twr_v218);
    __twr_v219 = 6ULL;
    __twr_v220 = _mng_stdpathstr169 + __twr_v219;
    _mng_stdpathstr169 = __twr_v220;
    __twr_v221 = _mng_count180 - __twr_v219;
    _mng_count180 = __twr_v221;
    goto __twr_l6;
    __twr_l10:;
    __twr_v222 = (uint64_t)(&TlCompareStringWithMax);
    __twr_v223 = (uint64_t)(&"<bld>/");
    __twr_v224 = 5ULL;
    __twr_v225 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v222)(_mng_stdpathstr169, __twr_v223, __twr_v224);
    if (__twr_v225) { goto __twr_l16; } else { goto __twr_l15; }
    __twr_l15:;
    __twr_v226 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v227 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v228 = *(uint64_t*)(__twr_v227);
    __twr_v229 = (uint64_t)(&"BUILD_BASE");
    __twr_v230 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v226)(__twr_v228, __twr_v229);
    _mng_macro231 = __twr_v230;
    if (_mng_macro231) { goto __twr_l17; } else { goto __twr_l18; }
    __twr_l18:;
    __twr_v232 = (uint64_t)(&LexTokenError);
    __twr_v233 = (uint64_t)(&"BUILD_BASE isn't defined");
    __twr_v234 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v232)(_mng_errtoken165, __twr_v233, __twr_v234, __twr_v234, __twr_v234);
    __twr_l17:;
    __twr_v235 = 264ULL;
    __twr_v236 = _mng_macro231 + __twr_v235;
    __twr_v237 = *(uint8_t*)(__twr_v236);
    if (!(__twr_v237)) { goto __twr_l19; } else { goto __twr_l20; }
    __twr_l20:;
    __twr_v238 = (uint64_t)(&LexTokenError);
    __twr_v239 = (uint64_t)(&"BUILD_BASE is a function macro for some reason");
    __twr_v240 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v238)(_mng_errtoken165, __twr_v239, __twr_v240, __twr_v240, __twr_v240);
    __twr_l19:;
    __twr_v241 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v242 = 80ULL;
    __twr_v243 = _mng_macro231 + __twr_v242;
    __twr_v244 = 96ULL;
    __twr_v245 = _mng_macro231 + __twr_v244;
    __twr_v246 = *(uint64_t*)(__twr_v245);
    __twr_v247 = 1ULL;
    __twr_v248 = *(uint64_t*)(__twr_v243);
    __twr_v249 = __twr_v248 - __twr_v247;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v241)(_mng_fullpath164, __twr_v246, __twr_v249);
    __twr_v250 = 6ULL;
    __twr_v251 = _mng_stdpathstr169 + __twr_v250;
    _mng_stdpathstr169 = __twr_v251;
    __twr_v252 = _mng_count180 - __twr_v250;
    _mng_count180 = __twr_v252;
    goto __twr_l6;
    __twr_l16:;
    __twr_v253 = (uint64_t)(&LexTokenError);
    __twr_v254 = (uint64_t)(&"Unknown path prefix");
    __twr_v255 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v253)(_mng_errtoken165, __twr_v254, __twr_v255, __twr_v255, __twr_v255);
    __twr_l6:;
    __twr_v256 = *(uint64_t*)(_mng_fullpath164);
    if (__twr_v256) { goto __twr_l23; } else { goto __twr_l22; }
    __twr_l22:;
    __twr_v257 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v258 = 46ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v257)(_mng_fullpath164, __twr_v258);
    __twr_v259 = 47ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v257)(_mng_fullpath164, __twr_v259);
    goto __twr_l21;
    __twr_l23:;
    __twr_v260 = 16ULL;
    __twr_v261 = _mng_fullpath164 + __twr_v260;
    __twr_v262 = *(uint64_t*)(__twr_v261);
    __twr_v263 = *(uint64_t*)(_mng_fullpath164);
    __twr_v264 = 1ULL;
    __twr_v265 = __twr_v263 - __twr_v264;
    __twr_v266 = __twr_v262 + __twr_v265;
    __twr_v267 = *(uint8_t*)(__twr_v266);
    __twr_v268 = 47ULL;
    if (__twr_v267 == __twr_v268) { goto __twr_l21; } else { goto __twr_l24; }
    __twr_l24:;
    __twr_v269 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v270 = 47ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v269)(_mng_fullpath164, __twr_v270);
    __twr_l21:;
    __twr_v271 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v271)(_mng_fullpath164, _mng_stdpathstr169, _mng_count180);
    __twr_l1:;
    _jkl_epilogue:;
}
void BtTargetInfoFile() {
    uint64_t __twr_v272;
    uint64_t __twr_v273;
    uint64_t _mng_token274[4];
    uint64_t __twr_v275;
    uint64_t __twr_v276;
    uint64_t __twr_v277;
    uint64_t __twr_v278;
    uint64_t __twr_v279;
    uint64_t __twr_v280;
    uint64_t __twr_v281;
    uint64_t __twr_v282;
    uint64_t __twr_v283;
    uint64_t _mng_string284;
    uint64_t __twr_v285;
    uint64_t __twr_v286;
    uint64_t __twr_v287;
    uint64_t __twr_v288;
    uint64_t __twr_v289;
    uint64_t __twr_v290;
    uint64_t __twr_v291;
    uint64_t __twr_v292;
    uint64_t __twr_v293;
    uint64_t __twr_v294;
    uint64_t __twr_v295;
    uint64_t __twr_v296;
    uint64_t __twr_v297;
    uint64_t __twr_v298;
    uint64_t __twr_v299;
    uint64_t __twr_v300;
    uint64_t __twr_v301;
    __twr_v272 = (uint64_t)(&LexMatchToken);
    __twr_v273 = (uint64_t)(&_mng_token274);
    __twr_v275 = 4ULL;
    __twr_v276 = 0ULL;
    __twr_v277 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v272)(__twr_v273, __twr_v275, __twr_v276);
    if (__twr_v277) { goto __twr_l26; } else { goto __twr_l27; }
    __twr_l27:;
    __twr_v278 = (uint64_t)(&LexTokenError);
    __twr_v279 = (uint64_t)(&_mng_token274);
    __twr_v280 = (uint64_t)(&"Expected a string");
    __twr_v281 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v278)(__twr_v279, __twr_v280, __twr_v281, __twr_v281, __twr_v281);
    __twr_l26:;
    __twr_v282 = (uint64_t)(&_mng_token274);
    __twr_v283 = *(uint64_t*)(__twr_v282);
    _mng_string284 = __twr_v283;
    __twr_v285 = (uint64_t)(&TlUninitializeDynamicBuffer);
    __twr_v286 = (uint64_t)(&BtCurrentTarget);
    __twr_v287 = *(uint64_t*)(__twr_v286);
    __twr_v288 = 608ULL;
    __twr_v289 = __twr_v287 + __twr_v288;
    ((void (*)(uint64_t))__twr_v285)(__twr_v289);
    __twr_v290 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v291 = *(uint64_t*)(__twr_v286);
    __twr_v292 = __twr_v291 + __twr_v288;
    ((void (*)(uint64_t))__twr_v290)(__twr_v292);
    __twr_v293 = (uint64_t)(&BtParseStandardPath);
    __twr_v294 = 48ULL;
    __twr_v295 = _mng_string284 + __twr_v294;
    __twr_v296 = *(uint64_t*)(__twr_v286);
    __twr_v297 = __twr_v296 + __twr_v288;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v293)(__twr_v295, __twr_v297, __twr_v282);
    __twr_v298 = 1ULL;
    __twr_v299 = *(uint64_t*)(__twr_v286);
    __twr_v300 = 825ULL;
    __twr_v301 = __twr_v299 + __twr_v300;
    *(uint8_t*)(__twr_v301) = __twr_v298;
    __twr_l25:;
    _jkl_epilogue:;
}
void BtTargetInfoDepend() {
    uint64_t __twr_v302;
    uint64_t __twr_v303;
    uint64_t _mng_token304[4];
    uint64_t __twr_v305;
    uint64_t __twr_v306;
    uint64_t __twr_v307;
    uint64_t __twr_v308;
    uint64_t __twr_v309;
    uint64_t __twr_v310;
    uint64_t __twr_v311;
    uint64_t __twr_v312;
    uint64_t __twr_v313;
    uint64_t _mng_string314;
    uint64_t __twr_v315;
    uint64_t __twr_v316;
    uint64_t __twr_v317;
    uint64_t __twr_v318;
    uint64_t __twr_v319;
    uint64_t __twr_v320;
    uint64_t _mng_target321;
    uint64_t __twr_v322;
    uint64_t __twr_v323;
    uint64_t __twr_v324;
    uint64_t __twr_v325;
    uint64_t __twr_v326;
    uint64_t __twr_v327;
    uint64_t __twr_v328;
    uint64_t __twr_v329;
    uint64_t _mng_head330;
    uint64_t __twr_v331;
    uint64_t _mng_listentry332;
    uint64_t _mng_entry333;
    uint64_t __twr_v334;
    uint64_t __twr_v335;
    uint64_t __twr_v336;
    uint64_t __twr_v337;
    uint64_t __twr_v338;
    uint64_t __twr_v339;
    uint64_t __twr_v340;
    uint64_t _mng_entry341;
    uint64_t _mng_status342;
    uint64_t __twr_v343;
    uint64_t __twr_v344;
    uint64_t __twr_v345;
    uint64_t __twr_v346;
    uint64_t __twr_v347;
    uint64_t __twr_v348;
    uint64_t __twr_v349;
    uint64_t __twr_v350;
    uint64_t __twr_v351;
    uint64_t _mng_listhead352;
    uint64_t _mng_listentry353;
    uint64_t __twr_v354;
    uint64_t __twr_v355;
    uint64_t __twr_v356;
    uint64_t _mng_last357;
    uint64_t __twr_v358;
    __twr_v302 = (uint64_t)(&LexMatchToken);
    __twr_v303 = (uint64_t)(&_mng_token304);
    __twr_v305 = 4ULL;
    __twr_v306 = 0ULL;
    __twr_v307 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v302)(__twr_v303, __twr_v305, __twr_v306);
    if (__twr_v307) { goto __twr_l29; } else { goto __twr_l30; }
    __twr_l30:;
    __twr_v308 = (uint64_t)(&LexTokenError);
    __twr_v309 = (uint64_t)(&_mng_token304);
    __twr_v310 = (uint64_t)(&"Expected a string");
    __twr_v311 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v308)(__twr_v309, __twr_v310, __twr_v311, __twr_v311, __twr_v311);
    __twr_l29:;
    __twr_v312 = (uint64_t)(&_mng_token304);
    __twr_v313 = *(uint64_t*)(__twr_v312);
    _mng_string314 = __twr_v313;
    __twr_v315 = (uint64_t)(&TlLookupHashTable);
    __twr_v316 = (uint64_t)(&BtTargetHashTable);
    __twr_v317 = 64ULL;
    __twr_v318 = _mng_string314 + __twr_v317;
    __twr_v319 = *(uint64_t*)(__twr_v318);
    __twr_v320 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v315)(__twr_v316, __twr_v319);
    _mng_target321 = __twr_v320;
    if (_mng_target321) { goto __twr_l31; } else { goto __twr_l32; }
    __twr_l32:;
    __twr_v322 = (uint64_t)(&LexTokenError);
    __twr_v323 = (uint64_t)(&_mng_token304);
    __twr_v324 = (uint64_t)(&"Target not defined");
    __twr_v325 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v322)(__twr_v323, __twr_v324, __twr_v325, __twr_v325, __twr_v325);
    __twr_l31:;
    __twr_v326 = (uint64_t)(&BtCurrentTarget);
    __twr_v327 = *(uint64_t*)(__twr_v326);
    __twr_v328 = 576ULL;
    __twr_v329 = __twr_v327 + __twr_v328;
    _mng_head330 = __twr_v329;
    __twr_v331 = *(uint64_t*)(_mng_head330);
    _mng_listentry332 = __twr_v331;
    if (_mng_head330 == _mng_listentry332) { goto __twr_l34; } else { goto __twr_l33; }
    __twr_l33:;
    _mng_entry333 = _mng_listentry332;
    __twr_v334 = 16ULL;
    __twr_v335 = _mng_entry333 + __twr_v334;
    __twr_v336 = *(uint64_t*)(__twr_v335);
    if (__twr_v336 != _mng_target321) { goto __twr_l36; } else { goto __twr_l37; }
    __twr_l37:;
    goto _jkl_epilogue;
    __twr_l36:;
    __twr_v337 = *(uint64_t*)(_mng_listentry332);
    _mng_listentry332 = __twr_v337;
    __twr_l35:;
    if (_mng_head330 != _mng_listentry332) { goto __twr_l33; } else { goto __twr_l34; }
    __twr_l34:;
    __twr_v338 = (uint64_t)(&TlBumpAlloc);
    __twr_v339 = 24ULL;
    __twr_v340 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v338)(__twr_v339, (uint64_t)(&_mng_entry341));
    _mng_status342 = __twr_v340;
    if (!(_mng_status342)) { goto __twr_l38; } else { goto __twr_l39; }
    __twr_l39:;
    __twr_v343 = (uint64_t)(&TlInternalError);
    __twr_v344 = (uint64_t)(&"Failed to allocate depends list entry");
    __twr_v345 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v343)(__twr_v344, __twr_v345, __twr_v345, __twr_v345);
    __twr_l38:;
    __twr_v346 = 16ULL;
    __twr_v347 = _mng_entry341 + __twr_v346;
    *(uint64_t*)(__twr_v347) = _mng_target321;
    __twr_v348 = (uint64_t)(&BtCurrentTarget);
    __twr_v349 = *(uint64_t*)(__twr_v348);
    __twr_v350 = 576ULL;
    __twr_v351 = __twr_v349 + __twr_v350;
    _mng_listhead352 = __twr_v351;
    _mng_listentry353 = _mng_entry341;
    __twr_v354 = 8ULL;
    __twr_v355 = _mng_listhead352 + __twr_v354;
    __twr_v356 = *(uint64_t*)(__twr_v355);
    _mng_last357 = __twr_v356;
    __twr_v358 = _mng_listentry353 + __twr_v354;
    *(uint64_t*)(__twr_v358) = _mng_last357;
    *(uint64_t*)(_mng_listentry353) = _mng_listhead352;
    *(uint64_t*)(_mng_last357) = _mng_listentry353;
    *(uint64_t*)(__twr_v355) = _mng_listentry353;
    __twr_l28:;
    _jkl_epilogue:;
}
void BtTargetInfoSources() {
    uint64_t __twr_v359;
    uint64_t __twr_v360;
    uint64_t _mng_token361[4];
    uint64_t __twr_v362;
    uint64_t __twr_v363;
    uint64_t __twr_v364;
    uint64_t __twr_v365;
    uint64_t __twr_v366;
    uint64_t __twr_v367;
    uint64_t __twr_v368;
    uint64_t __twr_v369;
    uint64_t __twr_v370;
    uint64_t _mng_string371;
    uint64_t __twr_v372;
    uint64_t __twr_v373;
    uint64_t __twr_v374;
    uint64_t _mng_entry375;
    uint64_t _mng_status376;
    uint64_t __twr_v377;
    uint64_t __twr_v378;
    uint64_t __twr_v379;
    uint64_t __twr_v380;
    uint64_t __twr_v381;
    uint64_t __twr_v382;
    uint64_t __twr_v383;
    uint64_t __twr_v384;
    uint64_t _mng_filepath385;
    uint64_t __twr_v386;
    uint64_t __twr_v387;
    uint64_t __twr_v388;
    uint64_t __twr_v389;
    uint64_t __twr_v390;
    uint64_t __twr_v391;
    uint64_t __twr_v392;
    uint64_t __twr_v393;
    uint64_t __twr_v394;
    uint64_t __twr_v395;
    uint64_t __twr_v396;
    uint64_t __twr_v397;
    uint64_t __twr_v398;
    uint64_t __twr_v399;
    uint64_t __twr_v400;
    uint64_t __twr_v401;
    uint64_t __twr_v402;
    uint64_t _mng_listhead403;
    uint64_t _mng_listentry404;
    uint64_t __twr_v405;
    uint64_t __twr_v406;
    uint64_t __twr_v407;
    uint64_t _mng_last408;
    uint64_t __twr_v409;
    __twr_v359 = (uint64_t)(&LexMatchToken);
    __twr_v360 = (uint64_t)(&_mng_token361);
    __twr_v362 = 4ULL;
    __twr_v363 = 0ULL;
    __twr_v364 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v359)(__twr_v360, __twr_v362, __twr_v363);
    if (__twr_v364) { goto __twr_l41; } else { goto __twr_l42; }
    __twr_l42:;
    __twr_v365 = (uint64_t)(&LexTokenError);
    __twr_v366 = (uint64_t)(&_mng_token361);
    __twr_v367 = (uint64_t)(&"Expected a string");
    __twr_v368 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v365)(__twr_v366, __twr_v367, __twr_v368, __twr_v368, __twr_v368);
    __twr_l41:;
    __twr_v369 = (uint64_t)(&_mng_token361);
    __twr_v370 = *(uint64_t*)(__twr_v369);
    _mng_string371 = __twr_v370;
    __twr_v372 = (uint64_t)(&TlBumpAlloc);
    __twr_v373 = 105ULL;
    __twr_v374 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v372)(__twr_v373, (uint64_t)(&_mng_entry375));
    _mng_status376 = __twr_v374;
    if (!(_mng_status376)) { goto __twr_l43; } else { goto __twr_l44; }
    __twr_l44:;
    __twr_v377 = (uint64_t)(&TlInternalError);
    __twr_v378 = (uint64_t)(&"Failed to allocate sources record");
    __twr_v379 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v377)(__twr_v378, __twr_v379, __twr_v379, __twr_v379);
    __twr_l43:;
    __twr_v380 = 0ULL;
    __twr_v381 = 104ULL;
    __twr_v382 = _mng_entry375 + __twr_v381;
    *(uint8_t*)(__twr_v382) = __twr_v380;
    __twr_v383 = 16ULL;
    __twr_v384 = _mng_entry375 + __twr_v383;
    _mng_filepath385 = __twr_v384;
    __twr_v386 = (uint64_t)(&TlInitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v386)(_mng_filepath385);
    __twr_v387 = (uint64_t)(&BtParseStandardPath);
    __twr_v388 = 48ULL;
    __twr_v389 = _mng_string371 + __twr_v388;
    __twr_v390 = (uint64_t)(&_mng_token361);
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v387)(__twr_v389, _mng_filepath385, __twr_v390);
    __twr_v391 = (uint64_t)(&TlIsPathDirectory);
    __twr_v392 = _mng_filepath385 + __twr_v383;
    __twr_v393 = *(uint64_t*)(__twr_v392);
    __twr_v394 = ((uint64_t (*)(uint64_t))__twr_v391)(__twr_v393);
    if (__twr_v394) { goto __twr_l45; } else { goto __twr_l46; }
    __twr_l46:;
    __twr_v395 = (uint64_t)(&LexTokenError);
    __twr_v396 = (uint64_t)(&_mng_token361);
    __twr_v397 = (uint64_t)(&"Doesn't exist or not a directory");
    __twr_v398 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v395)(__twr_v396, __twr_v397, __twr_v398, __twr_v398, __twr_v398);
    __twr_l45:;
    __twr_v399 = (uint64_t)(&BtCurrentTarget);
    __twr_v400 = *(uint64_t*)(__twr_v399);
    __twr_v401 = 592ULL;
    __twr_v402 = __twr_v400 + __twr_v401;
    _mng_listhead403 = __twr_v402;
    _mng_listentry404 = _mng_entry375;
    __twr_v405 = 8ULL;
    __twr_v406 = _mng_listhead403 + __twr_v405;
    __twr_v407 = *(uint64_t*)(__twr_v406);
    _mng_last408 = __twr_v407;
    __twr_v409 = _mng_listentry404 + __twr_v405;
    *(uint64_t*)(__twr_v409) = _mng_last408;
    *(uint64_t*)(_mng_listentry404) = _mng_listhead403;
    *(uint64_t*)(_mng_last408) = _mng_listentry404;
    *(uint64_t*)(__twr_v406) = _mng_listentry404;
    __twr_l40:;
    _jkl_epilogue:;
}
void BtTargetInfoObjects() {
    uint64_t __twr_v410;
    uint64_t __twr_v411;
    uint64_t _mng_token412[4];
    uint64_t __twr_v413;
    uint64_t __twr_v414;
    uint64_t __twr_v415;
    uint64_t __twr_v416;
    uint64_t __twr_v417;
    uint64_t __twr_v418;
    uint64_t __twr_v419;
    uint64_t __twr_v420;
    uint64_t __twr_v421;
    uint64_t _mng_string422;
    uint64_t __twr_v423;
    uint64_t __twr_v424;
    uint64_t __twr_v425;
    uint64_t _mng_entry426;
    uint64_t _mng_status427;
    uint64_t __twr_v428;
    uint64_t __twr_v429;
    uint64_t __twr_v430;
    uint64_t __twr_v431;
    uint64_t __twr_v432;
    uint64_t _mng_filepath433;
    uint64_t __twr_v434;
    uint64_t __twr_v435;
    uint64_t __twr_v436;
    uint64_t __twr_v437;
    uint64_t __twr_v438;
    uint64_t __twr_v439;
    uint64_t __twr_v440;
    uint64_t __twr_v441;
    uint64_t __twr_v442;
    uint64_t __twr_v443;
    uint64_t __twr_v444;
    uint64_t __twr_v445;
    uint64_t __twr_v446;
    uint64_t __twr_v447;
    uint64_t __twr_v448;
    uint64_t __twr_v449;
    uint64_t __twr_v450;
    uint64_t __twr_v451;
    uint64_t __twr_v452;
    uint64_t __twr_v453;
    uint64_t _mng_listhead454;
    uint64_t _mng_listentry455;
    uint64_t __twr_v456;
    uint64_t __twr_v457;
    uint64_t __twr_v458;
    uint64_t _mng_last459;
    uint64_t __twr_v460;
    __twr_v410 = (uint64_t)(&LexMatchToken);
    __twr_v411 = (uint64_t)(&_mng_token412);
    __twr_v413 = 4ULL;
    __twr_v414 = 0ULL;
    __twr_v415 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v410)(__twr_v411, __twr_v413, __twr_v414);
    if (__twr_v415) { goto __twr_l48; } else { goto __twr_l49; }
    __twr_l49:;
    __twr_v416 = (uint64_t)(&LexTokenError);
    __twr_v417 = (uint64_t)(&_mng_token412);
    __twr_v418 = (uint64_t)(&"Expected a string");
    __twr_v419 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v416)(__twr_v417, __twr_v418, __twr_v419, __twr_v419, __twr_v419);
    __twr_l48:;
    __twr_v420 = (uint64_t)(&_mng_token412);
    __twr_v421 = *(uint64_t*)(__twr_v420);
    _mng_string422 = __twr_v421;
    __twr_v423 = (uint64_t)(&TlBumpAlloc);
    __twr_v424 = 105ULL;
    __twr_v425 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v423)(__twr_v424, (uint64_t)(&_mng_entry426));
    _mng_status427 = __twr_v425;
    if (!(_mng_status427)) { goto __twr_l50; } else { goto __twr_l51; }
    __twr_l51:;
    __twr_v428 = (uint64_t)(&TlInternalError);
    __twr_v429 = (uint64_t)(&"Failed to allocate sources record");
    __twr_v430 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v428)(__twr_v429, __twr_v430, __twr_v430, __twr_v430);
    __twr_l50:;
    __twr_v431 = 16ULL;
    __twr_v432 = _mng_entry426 + __twr_v431;
    _mng_filepath433 = __twr_v432;
    __twr_v434 = 1ULL;
    __twr_v435 = 104ULL;
    __twr_v436 = _mng_entry426 + __twr_v435;
    *(uint8_t*)(__twr_v436) = __twr_v434;
    __twr_v437 = (uint64_t)(&TlInitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v437)(_mng_filepath433);
    __twr_v438 = (uint64_t)(&BtParseStandardPath);
    __twr_v439 = 48ULL;
    __twr_v440 = _mng_string422 + __twr_v439;
    __twr_v441 = (uint64_t)(&_mng_token412);
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v438)(__twr_v440, _mng_filepath433, __twr_v441);
    __twr_v442 = (uint64_t)(&TlIsPathDirectory);
    __twr_v443 = _mng_filepath433 + __twr_v431;
    __twr_v444 = *(uint64_t*)(__twr_v443);
    __twr_v445 = ((uint64_t (*)(uint64_t))__twr_v442)(__twr_v444);
    if (__twr_v445) { goto __twr_l52; } else { goto __twr_l53; }
    __twr_l53:;
    __twr_v446 = (uint64_t)(&LexTokenError);
    __twr_v447 = (uint64_t)(&_mng_token412);
    __twr_v448 = (uint64_t)(&"Doesn't exist or not a directory");
    __twr_v449 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v446)(__twr_v447, __twr_v448, __twr_v449, __twr_v449, __twr_v449);
    __twr_l52:;
    __twr_v450 = (uint64_t)(&BtCurrentTarget);
    __twr_v451 = *(uint64_t*)(__twr_v450);
    __twr_v452 = 592ULL;
    __twr_v453 = __twr_v451 + __twr_v452;
    _mng_listhead454 = __twr_v453;
    _mng_listentry455 = _mng_entry426;
    __twr_v456 = 8ULL;
    __twr_v457 = _mng_listhead454 + __twr_v456;
    __twr_v458 = *(uint64_t*)(__twr_v457);
    _mng_last459 = __twr_v458;
    __twr_v460 = _mng_listentry455 + __twr_v456;
    *(uint64_t*)(__twr_v460) = _mng_last459;
    *(uint64_t*)(_mng_listentry455) = _mng_listhead454;
    *(uint64_t*)(_mng_last459) = _mng_listentry455;
    *(uint64_t*)(__twr_v457) = _mng_listentry455;
    __twr_l47:;
    _jkl_epilogue:;
}
void BtTargetInfoJklInclude() {
    uint64_t __twr_v461;
    uint64_t __twr_v462;
    uint64_t _mng_token463[4];
    uint64_t __twr_v464;
    uint64_t __twr_v465;
    uint64_t __twr_v466;
    uint64_t __twr_v467;
    uint64_t __twr_v468;
    uint64_t __twr_v469;
    uint64_t __twr_v470;
    uint64_t __twr_v471;
    uint64_t __twr_v472;
    uint64_t _mng_string473;
    uint64_t __twr_v474;
    uint64_t __twr_v475;
    uint64_t _mng_filepath476[11];
    uint64_t __twr_v477;
    uint64_t __twr_v478;
    uint64_t __twr_v479;
    uint64_t __twr_v480;
    uint64_t __twr_v481;
    uint64_t __twr_v482;
    uint64_t __twr_v483;
    uint64_t __twr_v484;
    uint64_t __twr_v485;
    uint64_t __twr_v486;
    uint64_t __twr_v487;
    uint64_t __twr_v488;
    uint64_t __twr_v489;
    uint64_t __twr_v490;
    uint64_t __twr_v491;
    uint64_t __twr_v492;
    uint64_t __twr_v493;
    uint64_t __twr_v494;
    uint64_t __twr_v495;
    uint64_t __twr_v496;
    uint64_t __twr_v497;
    uint64_t __twr_v498;
    uint64_t __twr_v499;
    uint64_t __twr_v500;
    uint64_t __twr_v501;
    uint64_t __twr_v502;
    uint64_t __twr_v503;
    __twr_v461 = (uint64_t)(&LexMatchToken);
    __twr_v462 = (uint64_t)(&_mng_token463);
    __twr_v464 = 4ULL;
    __twr_v465 = 0ULL;
    __twr_v466 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v461)(__twr_v462, __twr_v464, __twr_v465);
    if (__twr_v466) { goto __twr_l55; } else { goto __twr_l56; }
    __twr_l56:;
    __twr_v467 = (uint64_t)(&LexTokenError);
    __twr_v468 = (uint64_t)(&_mng_token463);
    __twr_v469 = (uint64_t)(&"Expected a string");
    __twr_v470 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v467)(__twr_v468, __twr_v469, __twr_v470, __twr_v470, __twr_v470);
    __twr_l55:;
    __twr_v471 = (uint64_t)(&_mng_token463);
    __twr_v472 = *(uint64_t*)(__twr_v471);
    _mng_string473 = __twr_v472;
    __twr_v474 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v475 = (uint64_t)(&_mng_filepath476);
    ((void (*)(uint64_t))__twr_v474)(__twr_v475);
    __twr_v477 = (uint64_t)(&BtParseStandardPath);
    __twr_v478 = 48ULL;
    __twr_v479 = _mng_string473 + __twr_v478;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v477)(__twr_v479, __twr_v475, __twr_v471);
    __twr_v480 = (uint64_t)(&BtCurrentTarget);
    __twr_v481 = *(uint64_t*)(__twr_v480);
    __twr_v482 = 400ULL;
    __twr_v483 = __twr_v481 + __twr_v482;
    __twr_v484 = *(uint64_t*)(__twr_v483);
    if (!(__twr_v484)) { goto __twr_l57; } else { goto __twr_l58; }
    __twr_l58:;
    __twr_v485 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v486 = (uint64_t)(&BtCurrentTarget);
    __twr_v487 = *(uint64_t*)(__twr_v486);
    __twr_v488 = 400ULL;
    __twr_v489 = __twr_v487 + __twr_v488;
    __twr_v490 = 58ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v485)(__twr_v489, __twr_v490);
    __twr_l57:;
    __twr_v491 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v492 = (uint64_t)(&BtCurrentTarget);
    __twr_v493 = *(uint64_t*)(__twr_v492);
    __twr_v494 = 400ULL;
    __twr_v495 = __twr_v493 + __twr_v494;
    __twr_v496 = (uint64_t)(&_mng_filepath476);
    __twr_v497 = 16ULL;
    __twr_v498 = __twr_v496 + __twr_v497;
    __twr_v499 = *(uint64_t*)(__twr_v498);
    __twr_v500 = *(uint64_t*)(__twr_v496);
    __twr_v501 = 1ULL;
    __twr_v502 = __twr_v500 - __twr_v501;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v491)(__twr_v495, __twr_v499, __twr_v502);
    __twr_v503 = (uint64_t)(&TlUninitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v503)(__twr_v496);
    __twr_l54:;
    _jkl_epilogue:;
}
void BtTargetInfoLibDir() {
    uint64_t __twr_v504;
    uint64_t __twr_v505;
    uint64_t _mng_token506[4];
    uint64_t __twr_v507;
    uint64_t __twr_v508;
    uint64_t __twr_v509;
    uint64_t __twr_v510;
    uint64_t __twr_v511;
    uint64_t __twr_v512;
    uint64_t __twr_v513;
    uint64_t __twr_v514;
    uint64_t __twr_v515;
    uint64_t _mng_string516;
    uint64_t __twr_v517;
    uint64_t __twr_v518;
    uint64_t _mng_filepath519[11];
    uint64_t __twr_v520;
    uint64_t __twr_v521;
    uint64_t __twr_v522;
    uint64_t __twr_v523;
    uint64_t __twr_v524;
    uint64_t __twr_v525;
    uint64_t __twr_v526;
    uint64_t __twr_v527;
    uint64_t __twr_v528;
    uint64_t __twr_v529;
    uint64_t __twr_v530;
    uint64_t __twr_v531;
    uint64_t __twr_v532;
    uint64_t __twr_v533;
    uint64_t __twr_v534;
    uint64_t __twr_v535;
    uint64_t __twr_v536;
    uint64_t __twr_v537;
    uint64_t __twr_v538;
    uint64_t __twr_v539;
    uint64_t __twr_v540;
    uint64_t __twr_v541;
    uint64_t __twr_v542;
    uint64_t __twr_v543;
    uint64_t __twr_v544;
    uint64_t __twr_v545;
    uint64_t __twr_v546;
    __twr_v504 = (uint64_t)(&LexMatchToken);
    __twr_v505 = (uint64_t)(&_mng_token506);
    __twr_v507 = 4ULL;
    __twr_v508 = 0ULL;
    __twr_v509 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v504)(__twr_v505, __twr_v507, __twr_v508);
    if (__twr_v509) { goto __twr_l60; } else { goto __twr_l61; }
    __twr_l61:;
    __twr_v510 = (uint64_t)(&LexTokenError);
    __twr_v511 = (uint64_t)(&_mng_token506);
    __twr_v512 = (uint64_t)(&"Expected a string");
    __twr_v513 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v510)(__twr_v511, __twr_v512, __twr_v513, __twr_v513, __twr_v513);
    __twr_l60:;
    __twr_v514 = (uint64_t)(&_mng_token506);
    __twr_v515 = *(uint64_t*)(__twr_v514);
    _mng_string516 = __twr_v515;
    __twr_v517 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v518 = (uint64_t)(&_mng_filepath519);
    ((void (*)(uint64_t))__twr_v517)(__twr_v518);
    __twr_v520 = (uint64_t)(&BtParseStandardPath);
    __twr_v521 = 48ULL;
    __twr_v522 = _mng_string516 + __twr_v521;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v520)(__twr_v522, __twr_v518, __twr_v514);
    __twr_v523 = (uint64_t)(&BtCurrentTarget);
    __twr_v524 = *(uint64_t*)(__twr_v523);
    __twr_v525 = 488ULL;
    __twr_v526 = __twr_v524 + __twr_v525;
    __twr_v527 = *(uint64_t*)(__twr_v526);
    if (!(__twr_v527)) { goto __twr_l62; } else { goto __twr_l63; }
    __twr_l63:;
    __twr_v528 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v529 = (uint64_t)(&BtCurrentTarget);
    __twr_v530 = *(uint64_t*)(__twr_v529);
    __twr_v531 = 488ULL;
    __twr_v532 = __twr_v530 + __twr_v531;
    __twr_v533 = 58ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v528)(__twr_v532, __twr_v533);
    __twr_l62:;
    __twr_v534 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v535 = (uint64_t)(&BtCurrentTarget);
    __twr_v536 = *(uint64_t*)(__twr_v535);
    __twr_v537 = 488ULL;
    __twr_v538 = __twr_v536 + __twr_v537;
    __twr_v539 = (uint64_t)(&_mng_filepath519);
    __twr_v540 = 16ULL;
    __twr_v541 = __twr_v539 + __twr_v540;
    __twr_v542 = *(uint64_t*)(__twr_v541);
    __twr_v543 = *(uint64_t*)(__twr_v539);
    __twr_v544 = 1ULL;
    __twr_v545 = __twr_v543 - __twr_v544;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v534)(__twr_v538, __twr_v542, __twr_v545);
    __twr_v546 = (uint64_t)(&TlUninitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v546)(__twr_v539);
    __twr_l59:;
    _jkl_epilogue:;
}
void BtTargetInfoLinkOpt() {
    uint64_t __twr_v547;
    uint64_t __twr_v548;
    uint64_t _mng_token549[4];
    uint64_t __twr_v550;
    uint64_t __twr_v551;
    uint64_t __twr_v552;
    uint64_t __twr_v553;
    uint64_t __twr_v554;
    uint64_t __twr_v555;
    uint64_t __twr_v556;
    uint64_t __twr_v557;
    uint64_t __twr_v558;
    uint64_t _mng_string559;
    uint64_t __twr_v560;
    uint64_t __twr_v561;
    uint64_t _mng_str562;
    uint64_t __twr_v563;
    uint64_t __twr_v564;
    uint64_t __twr_v565;
    uint64_t __twr_v566;
    uint64_t __twr_v567;
    uint64_t __twr_v568;
    uint64_t __twr_v569;
    uint64_t __twr_v570;
    uint64_t __twr_v571;
    uint64_t __twr_v572;
    uint64_t __twr_v573;
    uint64_t __twr_v574;
    uint64_t __twr_v575;
    uint64_t __twr_v576;
    uint64_t __twr_v577;
    uint64_t __twr_v578;
    uint64_t __twr_v579;
    uint64_t __twr_v580;
    uint64_t __twr_v581;
    uint64_t __twr_v582;
    uint64_t __twr_v583;
    __twr_v547 = (uint64_t)(&LexMatchToken);
    __twr_v548 = (uint64_t)(&_mng_token549);
    __twr_v550 = 4ULL;
    __twr_v551 = 0ULL;
    __twr_v552 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v547)(__twr_v548, __twr_v550, __twr_v551);
    if (__twr_v552) { goto __twr_l65; } else { goto __twr_l66; }
    __twr_l66:;
    __twr_v553 = (uint64_t)(&LexTokenError);
    __twr_v554 = (uint64_t)(&_mng_token549);
    __twr_v555 = (uint64_t)(&"Expected a string");
    __twr_v556 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v553)(__twr_v554, __twr_v555, __twr_v556, __twr_v556, __twr_v556);
    __twr_l65:;
    __twr_v557 = (uint64_t)(&_mng_token549);
    __twr_v558 = *(uint64_t*)(__twr_v557);
    _mng_string559 = __twr_v558;
    __twr_v560 = 48ULL;
    __twr_v561 = _mng_string559 + __twr_v560;
    _mng_str562 = __twr_v561;
    __twr_v563 = (uint64_t)(&BtCurrentTarget);
    __twr_v564 = *(uint64_t*)(__twr_v563);
    __twr_v565 = __twr_v564 + __twr_v560;
    __twr_v566 = *(uint64_t*)(__twr_v565);
    if (!(__twr_v566)) { goto __twr_l67; } else { goto __twr_l68; }
    __twr_l68:;
    __twr_v567 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v568 = (uint64_t)(&BtCurrentTarget);
    __twr_v569 = *(uint64_t*)(__twr_v568);
    __twr_v570 = 48ULL;
    __twr_v571 = __twr_v569 + __twr_v570;
    __twr_v572 = 32ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v567)(__twr_v571, __twr_v572);
    __twr_l67:;
    __twr_v573 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v574 = (uint64_t)(&BtCurrentTarget);
    __twr_v575 = *(uint64_t*)(__twr_v574);
    __twr_v576 = 48ULL;
    __twr_v577 = __twr_v575 + __twr_v576;
    __twr_v578 = 16ULL;
    __twr_v579 = _mng_str562 + __twr_v578;
    __twr_v580 = *(uint64_t*)(__twr_v579);
    __twr_v581 = *(uint64_t*)(_mng_str562);
    __twr_v582 = 1ULL;
    __twr_v583 = __twr_v581 - __twr_v582;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v573)(__twr_v577, __twr_v580, __twr_v583);
    __twr_l64:;
    _jkl_epilogue:;
}
void BtTargetInfoJklOpt() {
    uint64_t __twr_v584;
    uint64_t __twr_v585;
    uint64_t _mng_token586[4];
    uint64_t __twr_v587;
    uint64_t __twr_v588;
    uint64_t __twr_v589;
    uint64_t __twr_v590;
    uint64_t __twr_v591;
    uint64_t __twr_v592;
    uint64_t __twr_v593;
    uint64_t __twr_v594;
    uint64_t __twr_v595;
    uint64_t _mng_string596;
    uint64_t __twr_v597;
    uint64_t __twr_v598;
    uint64_t _mng_str599;
    uint64_t __twr_v600;
    uint64_t __twr_v601;
    uint64_t __twr_v602;
    uint64_t __twr_v603;
    uint64_t __twr_v604;
    uint64_t __twr_v605;
    uint64_t __twr_v606;
    uint64_t __twr_v607;
    uint64_t __twr_v608;
    uint64_t __twr_v609;
    uint64_t __twr_v610;
    uint64_t __twr_v611;
    uint64_t __twr_v612;
    uint64_t __twr_v613;
    uint64_t __twr_v614;
    uint64_t __twr_v615;
    uint64_t __twr_v616;
    uint64_t __twr_v617;
    uint64_t __twr_v618;
    uint64_t __twr_v619;
    uint64_t __twr_v620;
    uint64_t __twr_v621;
    __twr_v584 = (uint64_t)(&LexMatchToken);
    __twr_v585 = (uint64_t)(&_mng_token586);
    __twr_v587 = 4ULL;
    __twr_v588 = 0ULL;
    __twr_v589 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v584)(__twr_v585, __twr_v587, __twr_v588);
    if (__twr_v589) { goto __twr_l70; } else { goto __twr_l71; }
    __twr_l71:;
    __twr_v590 = (uint64_t)(&LexTokenError);
    __twr_v591 = (uint64_t)(&_mng_token586);
    __twr_v592 = (uint64_t)(&"Expected a string");
    __twr_v593 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v590)(__twr_v591, __twr_v592, __twr_v593, __twr_v593, __twr_v593);
    __twr_l70:;
    __twr_v594 = (uint64_t)(&_mng_token586);
    __twr_v595 = *(uint64_t*)(__twr_v594);
    _mng_string596 = __twr_v595;
    __twr_v597 = 48ULL;
    __twr_v598 = _mng_string596 + __twr_v597;
    _mng_str599 = __twr_v598;
    __twr_v600 = (uint64_t)(&BtCurrentTarget);
    __twr_v601 = *(uint64_t*)(__twr_v600);
    __twr_v602 = 312ULL;
    __twr_v603 = __twr_v601 + __twr_v602;
    __twr_v604 = *(uint64_t*)(__twr_v603);
    if (!(__twr_v604)) { goto __twr_l72; } else { goto __twr_l73; }
    __twr_l73:;
    __twr_v605 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v606 = (uint64_t)(&BtCurrentTarget);
    __twr_v607 = *(uint64_t*)(__twr_v606);
    __twr_v608 = 312ULL;
    __twr_v609 = __twr_v607 + __twr_v608;
    __twr_v610 = 32ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v605)(__twr_v609, __twr_v610);
    __twr_l72:;
    __twr_v611 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v612 = (uint64_t)(&BtCurrentTarget);
    __twr_v613 = *(uint64_t*)(__twr_v612);
    __twr_v614 = 312ULL;
    __twr_v615 = __twr_v613 + __twr_v614;
    __twr_v616 = 16ULL;
    __twr_v617 = _mng_str599 + __twr_v616;
    __twr_v618 = *(uint64_t*)(__twr_v617);
    __twr_v619 = *(uint64_t*)(_mng_str599);
    __twr_v620 = 1ULL;
    __twr_v621 = __twr_v619 - __twr_v620;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v611)(__twr_v615, __twr_v618, __twr_v621);
    __twr_l69:;
    _jkl_epilogue:;
}
void BtTargetInfoLink() {
    uint64_t __twr_v622;
    uint64_t __twr_v623;
    uint64_t _mng_token624[4];
    uint64_t __twr_v625;
    uint64_t __twr_v626;
    uint64_t __twr_v627;
    uint64_t __twr_v628;
    uint64_t __twr_v629;
    uint64_t __twr_v630;
    uint64_t __twr_v631;
    uint64_t __twr_v632;
    uint64_t __twr_v633;
    uint64_t _mng_string634;
    uint64_t __twr_v635;
    uint64_t __twr_v636;
    uint64_t _mng_filepath637[11];
    uint64_t __twr_v638;
    uint64_t __twr_v639;
    uint64_t __twr_v640;
    uint64_t __twr_v641;
    uint64_t __twr_v642;
    uint64_t __twr_v643;
    uint64_t __twr_v644;
    uint64_t __twr_v645;
    uint64_t __twr_v646;
    uint64_t __twr_v647;
    uint64_t __twr_v648;
    uint64_t __twr_v649;
    uint64_t __twr_v650;
    uint64_t __twr_v651;
    uint64_t __twr_v652;
    uint64_t __twr_v653;
    uint64_t __twr_v654;
    uint64_t __twr_v655;
    uint64_t __twr_v656;
    uint64_t __twr_v657;
    uint64_t __twr_v658;
    uint64_t __twr_v659;
    uint64_t __twr_v660;
    uint64_t __twr_v661;
    uint64_t __twr_v662;
    uint64_t __twr_v663;
    uint64_t __twr_v664;
    __twr_v622 = (uint64_t)(&LexMatchToken);
    __twr_v623 = (uint64_t)(&_mng_token624);
    __twr_v625 = 4ULL;
    __twr_v626 = 0ULL;
    __twr_v627 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v622)(__twr_v623, __twr_v625, __twr_v626);
    if (__twr_v627) { goto __twr_l75; } else { goto __twr_l76; }
    __twr_l76:;
    __twr_v628 = (uint64_t)(&LexTokenError);
    __twr_v629 = (uint64_t)(&_mng_token624);
    __twr_v630 = (uint64_t)(&"Expected a string");
    __twr_v631 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v628)(__twr_v629, __twr_v630, __twr_v631, __twr_v631, __twr_v631);
    __twr_l75:;
    __twr_v632 = (uint64_t)(&_mng_token624);
    __twr_v633 = *(uint64_t*)(__twr_v632);
    _mng_string634 = __twr_v633;
    __twr_v635 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v636 = (uint64_t)(&_mng_filepath637);
    ((void (*)(uint64_t))__twr_v635)(__twr_v636);
    __twr_v638 = (uint64_t)(&BtParseStandardPath);
    __twr_v639 = 48ULL;
    __twr_v640 = _mng_string634 + __twr_v639;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v638)(__twr_v640, __twr_v636, __twr_v632);
    __twr_v641 = (uint64_t)(&BtCurrentTarget);
    __twr_v642 = *(uint64_t*)(__twr_v641);
    __twr_v643 = 136ULL;
    __twr_v644 = __twr_v642 + __twr_v643;
    __twr_v645 = *(uint64_t*)(__twr_v644);
    if (!(__twr_v645)) { goto __twr_l77; } else { goto __twr_l78; }
    __twr_l78:;
    __twr_v646 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v647 = (uint64_t)(&BtCurrentTarget);
    __twr_v648 = *(uint64_t*)(__twr_v647);
    __twr_v649 = 136ULL;
    __twr_v650 = __twr_v648 + __twr_v649;
    __twr_v651 = 32ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v646)(__twr_v650, __twr_v651);
    __twr_l77:;
    __twr_v652 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v653 = (uint64_t)(&BtCurrentTarget);
    __twr_v654 = *(uint64_t*)(__twr_v653);
    __twr_v655 = 136ULL;
    __twr_v656 = __twr_v654 + __twr_v655;
    __twr_v657 = (uint64_t)(&_mng_filepath637);
    __twr_v658 = 16ULL;
    __twr_v659 = __twr_v657 + __twr_v658;
    __twr_v660 = *(uint64_t*)(__twr_v659);
    __twr_v661 = *(uint64_t*)(__twr_v657);
    __twr_v662 = 1ULL;
    __twr_v663 = __twr_v661 - __twr_v662;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v652)(__twr_v656, __twr_v660, __twr_v663);
    __twr_v664 = (uint64_t)(&TlUninitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v664)(__twr_v657);
    __twr_l74:;
    _jkl_epilogue:;
}
void BtTargetInfoDyLink() {
    uint64_t __twr_v665;
    uint64_t __twr_v666;
    uint64_t _mng_token667[4];
    uint64_t __twr_v668;
    uint64_t __twr_v669;
    uint64_t __twr_v670;
    uint64_t __twr_v671;
    uint64_t __twr_v672;
    uint64_t __twr_v673;
    uint64_t __twr_v674;
    uint64_t __twr_v675;
    uint64_t __twr_v676;
    uint64_t __twr_v677;
    uint64_t _mng_rtstring678;
    uint64_t __twr_v679;
    uint64_t __twr_v680;
    uint64_t _mng_ctpathtoken681[4];
    uint64_t __twr_v682;
    uint64_t __twr_v683;
    uint64_t __twr_v684;
    uint64_t __twr_v685;
    uint64_t __twr_v686;
    uint64_t __twr_v687;
    uint64_t __twr_v688;
    uint64_t __twr_v689;
    uint64_t _mng_ctstring690;
    uint64_t __twr_v691;
    uint64_t __twr_v692;
    uint64_t _mng_filepath693[11];
    uint64_t __twr_v694;
    uint64_t __twr_v695;
    uint64_t __twr_v696;
    uint64_t __twr_v697;
    uint64_t __twr_v698;
    uint64_t __twr_v699;
    uint64_t __twr_v700;
    uint64_t __twr_v701;
    uint64_t __twr_v702;
    uint64_t __twr_v703;
    uint64_t __twr_v704;
    uint64_t __twr_v705;
    uint64_t __twr_v706;
    uint64_t __twr_v707;
    uint64_t __twr_v708;
    uint64_t __twr_v709;
    uint64_t __twr_v710;
    uint64_t __twr_v711;
    uint64_t __twr_v712;
    uint64_t __twr_v713;
    uint64_t __twr_v714;
    uint64_t __twr_v715;
    uint64_t __twr_v716;
    uint64_t __twr_v717;
    uint64_t __twr_v718;
    uint64_t __twr_v719;
    uint64_t __twr_v720;
    uint64_t __twr_v721;
    uint64_t __twr_v722;
    uint64_t __twr_v723;
    uint64_t __twr_v724;
    uint64_t __twr_v725;
    uint64_t __twr_v726;
    uint64_t __twr_v727;
    uint64_t __twr_v728;
    uint64_t __twr_v729;
    uint64_t __twr_v730;
    uint64_t __twr_v731;
    uint64_t __twr_v732;
    uint64_t __twr_v733;
    __twr_v665 = (uint64_t)(&LexMatchToken);
    __twr_v666 = (uint64_t)(&_mng_token667);
    __twr_v668 = 4ULL;
    __twr_v669 = 0ULL;
    __twr_v670 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v665)(__twr_v666, __twr_v668, __twr_v669);
    if (__twr_v670) { goto __twr_l80; } else { goto __twr_l81; }
    __twr_l81:;
    __twr_v671 = (uint64_t)(&LexTokenError);
    __twr_v672 = (uint64_t)(&_mng_token667);
    __twr_v673 = (uint64_t)(&"Expected a string");
    __twr_v674 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v671)(__twr_v672, __twr_v673, __twr_v674, __twr_v674, __twr_v674);
    __twr_l80:;
    __twr_v675 = (uint64_t)(&_mng_token667);
    __twr_v676 = 0ULL;
    __twr_v677 = *(uint64_t*)(__twr_v675);
    _mng_rtstring678 = __twr_v677;
    __twr_v679 = (uint64_t)(&LexMatchToken);
    __twr_v680 = (uint64_t)(&_mng_ctpathtoken681);
    __twr_v682 = 4ULL;
    __twr_v683 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v679)(__twr_v680, __twr_v682, __twr_v676);
    if (__twr_v683) { goto __twr_l82; } else { goto __twr_l83; }
    __twr_l83:;
    __twr_v684 = (uint64_t)(&LexTokenError);
    __twr_v685 = (uint64_t)(&_mng_ctpathtoken681);
    __twr_v686 = (uint64_t)(&"Expected a string");
    __twr_v687 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v684)(__twr_v685, __twr_v686, __twr_v687, __twr_v687, __twr_v687);
    __twr_l82:;
    __twr_v688 = (uint64_t)(&_mng_ctpathtoken681);
    __twr_v689 = *(uint64_t*)(__twr_v688);
    _mng_ctstring690 = __twr_v689;
    __twr_v691 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v692 = (uint64_t)(&_mng_filepath693);
    ((void (*)(uint64_t))__twr_v691)(__twr_v692);
    __twr_v694 = (uint64_t)(&BtParseStandardPath);
    __twr_v695 = 48ULL;
    __twr_v696 = _mng_ctstring690 + __twr_v695;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v694)(__twr_v696, __twr_v692, __twr_v688);
    __twr_v697 = (uint64_t)(&BtCurrentTarget);
    __twr_v698 = *(uint64_t*)(__twr_v697);
    __twr_v699 = 224ULL;
    __twr_v700 = __twr_v698 + __twr_v699;
    __twr_v701 = *(uint64_t*)(__twr_v700);
    if (!(__twr_v701)) { goto __twr_l84; } else { goto __twr_l85; }
    __twr_l85:;
    __twr_v702 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v703 = (uint64_t)(&BtCurrentTarget);
    __twr_v704 = *(uint64_t*)(__twr_v703);
    __twr_v705 = 224ULL;
    __twr_v706 = __twr_v704 + __twr_v705;
    __twr_v707 = 32ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v702)(__twr_v706, __twr_v707);
    __twr_l84:;
    __twr_v708 = (uint64_t)(&TlCopyIntoDynamicBuffer);
    __twr_v709 = (uint64_t)(&BtCurrentTarget);
    __twr_v710 = *(uint64_t*)(__twr_v709);
    __twr_v711 = 224ULL;
    __twr_v712 = __twr_v710 + __twr_v711;
    __twr_v713 = 48ULL;
    __twr_v714 = _mng_rtstring678 + __twr_v713;
    __twr_v715 = 16ULL;
    __twr_v716 = 64ULL;
    __twr_v717 = _mng_rtstring678 + __twr_v716;
    __twr_v718 = *(uint64_t*)(__twr_v717);
    __twr_v719 = *(uint64_t*)(__twr_v714);
    __twr_v720 = 1ULL;
    __twr_v721 = __twr_v719 - __twr_v720;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v708)(__twr_v712, __twr_v718, __twr_v721);
    __twr_v722 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v723 = *(uint64_t*)(__twr_v709);
    __twr_v724 = __twr_v723 + __twr_v711;
    __twr_v725 = 58ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v722)(__twr_v724, __twr_v725);
    __twr_v726 = *(uint64_t*)(__twr_v709);
    __twr_v727 = __twr_v726 + __twr_v711;
    __twr_v728 = (uint64_t)(&_mng_filepath693);
    __twr_v729 = __twr_v728 + __twr_v715;
    __twr_v730 = *(uint64_t*)(__twr_v729);
    __twr_v731 = *(uint64_t*)(__twr_v728);
    __twr_v732 = __twr_v731 - __twr_v720;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v708)(__twr_v727, __twr_v730, __twr_v732);
    __twr_v733 = (uint64_t)(&TlUninitializeDynamicBuffer);
    ((void (*)(uint64_t))__twr_v733)(__twr_v728);
    __twr_l79:;
    _jkl_epilogue:;
}
void BtTargetInfoPrebuilt() {
    uint64_t __twr_v734;
    uint64_t __twr_v735;
    uint64_t _mng_token736[4];
    uint64_t __twr_v737;
    uint64_t __twr_v738;
    uint64_t __twr_v739;
    uint64_t __twr_v740;
    uint64_t __twr_v741;
    uint64_t __twr_v742;
    uint64_t __twr_v743;
    uint64_t __twr_v744;
    uint64_t __twr_v745;
    uint64_t _mng_string746;
    uint64_t __twr_v747;
    uint64_t __twr_v748;
    uint64_t __twr_v749;
    uint64_t __twr_v750;
    uint64_t __twr_v751;
    uint64_t __twr_v752;
    uint64_t __twr_v753;
    uint64_t __twr_v754;
    uint64_t __twr_v755;
    uint64_t __twr_v756;
    uint64_t __twr_v757;
    uint64_t __twr_v758;
    uint64_t __twr_v759;
    uint64_t __twr_v760;
    uint64_t __twr_v761;
    uint64_t __twr_v762;
    uint64_t __twr_v763;
    __twr_v734 = (uint64_t)(&LexMatchToken);
    __twr_v735 = (uint64_t)(&_mng_token736);
    __twr_v737 = 4ULL;
    __twr_v738 = 0ULL;
    __twr_v739 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v734)(__twr_v735, __twr_v737, __twr_v738);
    if (__twr_v739) { goto __twr_l87; } else { goto __twr_l88; }
    __twr_l88:;
    __twr_v740 = (uint64_t)(&LexTokenError);
    __twr_v741 = (uint64_t)(&_mng_token736);
    __twr_v742 = (uint64_t)(&"Expected a string");
    __twr_v743 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v740)(__twr_v741, __twr_v742, __twr_v743, __twr_v743, __twr_v743);
    __twr_l87:;
    __twr_v744 = (uint64_t)(&_mng_token736);
    __twr_v745 = *(uint64_t*)(__twr_v744);
    _mng_string746 = __twr_v745;
    __twr_v747 = (uint64_t)(&TlUninitializeDynamicBuffer);
    __twr_v748 = (uint64_t)(&BtCurrentTarget);
    __twr_v749 = *(uint64_t*)(__twr_v748);
    __twr_v750 = 696ULL;
    __twr_v751 = __twr_v749 + __twr_v750;
    ((void (*)(uint64_t))__twr_v747)(__twr_v751);
    __twr_v752 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v753 = *(uint64_t*)(__twr_v748);
    __twr_v754 = __twr_v753 + __twr_v750;
    ((void (*)(uint64_t))__twr_v752)(__twr_v754);
    __twr_v755 = (uint64_t)(&BtParseStandardPath);
    __twr_v756 = 48ULL;
    __twr_v757 = _mng_string746 + __twr_v756;
    __twr_v758 = *(uint64_t*)(__twr_v748);
    __twr_v759 = __twr_v758 + __twr_v750;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v755)(__twr_v757, __twr_v759, __twr_v744);
    __twr_v760 = 1ULL;
    __twr_v761 = *(uint64_t*)(__twr_v748);
    __twr_v762 = 826ULL;
    __twr_v763 = __twr_v761 + __twr_v762;
    *(uint8_t*)(__twr_v763) = __twr_v760;
    __twr_l86:;
    _jkl_epilogue:;
}
uint64_t BtTargetInfoSpecifiers[11] = {
    (uint64_t)(&BtTargetInfoFile),
    (uint64_t)(&BtTargetInfoDepend),
    (uint64_t)(&BtTargetInfoSources),
    (uint64_t)(&BtTargetInfoJklInclude),
    (uint64_t)(&BtTargetInfoLibDir),
    (uint64_t)(&BtTargetInfoLinkOpt),
    (uint64_t)(&BtTargetInfoJklOpt),
    (uint64_t)(&BtTargetInfoLink),
    (uint64_t)(&BtTargetInfoDyLink),
    (uint64_t)(&BtTargetInfoPrebuilt),
    (uint64_t)(&BtTargetInfoObjects),
};
uint64_t BtParseTarget() {
    uint64_t _jkl_retv;
    uint64_t __twr_v764;
    uint64_t __twr_v765;
    uint64_t _mng_token766[4];
    uint64_t __twr_v767;
    uint64_t __twr_v768;
    uint64_t __twr_v769;
    uint64_t __twr_v770;
    uint64_t __twr_v771;
    uint64_t __twr_v772;
    uint64_t __twr_v773;
    uint64_t __twr_v774;
    uint64_t __twr_v775;
    uint64_t __twr_v776;
    uint64_t __twr_v777;
    uint64_t __twr_v778;
    uint64_t __twr_v779;
    uint64_t __twr_v780;
    uint64_t __twr_v781;
    uint64_t __twr_v782;
    uint64_t _mng_nametoken783[4];
    uint64_t __twr_v784;
    uint64_t __twr_v785;
    uint64_t __twr_v786;
    uint64_t __twr_v787;
    uint64_t __twr_v788;
    uint64_t __twr_v789;
    uint64_t __twr_v790;
    uint64_t __twr_v791;
    uint64_t __twr_v792;
    uint64_t _mng_namestring793;
    uint64_t __twr_v794;
    uint64_t __twr_v795;
    uint64_t __twr_v796;
    uint64_t __twr_v797;
    uint64_t __twr_v798;
    uint64_t __twr_v799;
    uint64_t __twr_v800;
    uint64_t __twr_v801;
    uint64_t __twr_v802;
    uint64_t __twr_v803;
    uint64_t __twr_v804;
    uint64_t __twr_v805;
    uint64_t __twr_v806;
    uint64_t _mng_target807;
    uint64_t _mng_status808;
    uint64_t __twr_v809;
    uint64_t __twr_v810;
    uint64_t __twr_v811;
    uint64_t __twr_v812;
    uint64_t __twr_v813;
    uint64_t __twr_v814;
    uint64_t __twr_v815;
    uint64_t __twr_v816;
    uint64_t __twr_v817;
    uint64_t __twr_v818;
    uint64_t __twr_v819;
    uint64_t __twr_v820;
    uint64_t __twr_v821;
    uint64_t __twr_v822;
    uint64_t __twr_v823;
    uint64_t __twr_v824;
    uint64_t __twr_v825;
    uint64_t __twr_v826;
    uint64_t __twr_v827;
    uint64_t __twr_v828;
    uint64_t __twr_v829;
    uint64_t __twr_v830;
    uint64_t __twr_v831;
    uint64_t __twr_v832;
    uint64_t __twr_v833;
    uint64_t __twr_v834;
    uint64_t __twr_v835;
    uint64_t __twr_v836;
    uint64_t __twr_v837;
    uint64_t _mng_listhead838;
    uint64_t __twr_v839;
    uint64_t __twr_v840;
    uint64_t __twr_v841;
    uint64_t __twr_v842;
    uint64_t _mng_listhead843;
    uint64_t __twr_v844;
    uint64_t __twr_v845;
    uint64_t __twr_v846;
    uint64_t _mng_listhead847;
    uint64_t __twr_v848;
    uint64_t __twr_v849;
    uint64_t __twr_v850;
    uint64_t _mng_listhead851;
    uint64_t __twr_v852;
    uint64_t __twr_v853;
    uint64_t __twr_v854;
    uint64_t _mng_listhead855;
    uint64_t __twr_v856;
    uint64_t _mng_listentry857;
    uint64_t __twr_v858;
    uint64_t __twr_v859;
    uint64_t _mng_macro860;
    uint64_t __twr_v861;
    uint64_t __twr_v862;
    uint64_t __twr_v863;
    uint64_t _mng_exprec864;
    uint64_t __twr_v865;
    uint64_t __twr_v866;
    uint64_t __twr_v867;
    uint64_t __twr_v868;
    uint64_t __twr_v869;
    uint64_t __twr_v870;
    uint64_t __twr_v871;
    uint64_t _mng_listhead872;
    uint64_t _mng_listentry873;
    uint64_t __twr_v874;
    uint64_t __twr_v875;
    uint64_t __twr_v876;
    uint64_t _mng_last877;
    uint64_t __twr_v878;
    uint64_t __twr_v879;
    uint64_t __twr_v880;
    uint64_t __twr_v881;
    uint64_t __twr_v882;
    uint64_t __twr_v883;
    uint64_t __twr_v884;
    uint64_t __twr_v885;
    uint64_t __twr_v886;
    uint64_t __twr_v887;
    uint64_t __twr_v888;
    uint64_t __twr_v889;
    uint64_t __twr_v890;
    uint64_t __twr_v891;
    uint64_t __twr_v892;
    uint64_t __twr_v893;
    uint64_t __twr_v894;
    uint64_t __twr_v895;
    uint64_t __twr_v896;
    uint64_t __twr_v897;
    uint64_t __twr_v898;
    uint64_t __twr_v899;
    uint64_t __twr_v900;
    uint64_t __twr_v901;
    uint64_t __twr_v902;
    uint64_t __twr_v903;
    uint64_t __twr_v904;
    uint64_t __twr_v905;
    uint64_t __twr_v906;
    uint64_t __twr_v907;
    uint64_t __twr_v908;
    uint64_t __twr_v909;
    uint64_t __twr_v910;
    uint64_t __twr_v911;
    uint64_t __twr_v912;
    uint64_t __twr_v913;
    uint64_t __twr_v914;
    uint64_t __twr_v915;
    uint64_t __twr_v916;
    uint64_t __twr_v917;
    uint64_t __twr_v918;
    uint64_t __twr_v919;
    uint64_t __twr_v920;
    __twr_v764 = (uint64_t)(&LexGetToken);
    __twr_v765 = (uint64_t)(&_mng_token766);
    ((void (*)(uint64_t))__twr_v764)(__twr_v765);
    __twr_v767 = 24ULL;
    __twr_v768 = __twr_v765 + __twr_v767;
    __twr_v769 = *(uint8_t*)(__twr_v768);
    __twr_v770 = 6ULL;
    if (__twr_v769 != __twr_v770) { goto __twr_l90; } else { goto __twr_l91; }
    __twr_l91:;
    __twr_v771 = 0ULL;
    _jkl_retv = __twr_v771;
    goto _jkl_epilogue;
    __twr_l90:;
    __twr_v772 = (uint64_t)(&_mng_token766);
    __twr_v773 = 24ULL;
    __twr_v774 = __twr_v772 + __twr_v773;
    __twr_v775 = *(uint8_t*)(__twr_v774);
    __twr_v776 = 1ULL;
    if (__twr_v775 == __twr_v776) { goto __twr_l92; } else { goto __twr_l93; }
    __twr_l93:;
    __twr_v777 = (uint64_t)(&LexTokenError);
    __twr_v778 = (uint64_t)(&_mng_token766);
    __twr_v779 = (uint64_t)(&"Expected TARGET");
    __twr_v780 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v777)(__twr_v778, __twr_v779, __twr_v780, __twr_v780, __twr_v780);
    __twr_l92:;
    __twr_v781 = (uint64_t)(&LexMatchToken);
    __twr_v782 = (uint64_t)(&_mng_nametoken783);
    __twr_v784 = 4ULL;
    __twr_v785 = 0ULL;
    __twr_v786 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v781)(__twr_v782, __twr_v784, __twr_v785);
    if (__twr_v786) { goto __twr_l94; } else { goto __twr_l95; }
    __twr_l95:;
    __twr_v787 = (uint64_t)(&LexTokenError);
    __twr_v788 = (uint64_t)(&_mng_nametoken783);
    __twr_v789 = (uint64_t)(&"Expected a string");
    __twr_v790 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v787)(__twr_v788, __twr_v789, __twr_v790, __twr_v790, __twr_v790);
    __twr_l94:;
    __twr_v791 = (uint64_t)(&_mng_nametoken783);
    __twr_v792 = *(uint64_t*)(__twr_v791);
    _mng_namestring793 = __twr_v792;
    __twr_v794 = (uint64_t)(&TlLookupHashTable);
    __twr_v795 = (uint64_t)(&BtTargetHashTable);
    __twr_v796 = 64ULL;
    __twr_v797 = _mng_namestring793 + __twr_v796;
    __twr_v798 = *(uint64_t*)(__twr_v797);
    __twr_v799 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v794)(__twr_v795, __twr_v798);
    if (!(__twr_v799)) { goto __twr_l96; } else { goto __twr_l97; }
    __twr_l97:;
    __twr_v800 = (uint64_t)(&LexTokenError);
    __twr_v801 = (uint64_t)(&_mng_nametoken783);
    __twr_v802 = (uint64_t)(&"Target already defined");
    __twr_v803 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v800)(__twr_v801, __twr_v802, __twr_v803, __twr_v803, __twr_v803);
    __twr_l96:;
    __twr_v804 = (uint64_t)(&TlBumpAlloc);
    __twr_v805 = 827ULL;
    __twr_v806 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v804)(__twr_v805, (uint64_t)(&_mng_target807));
    _mng_status808 = __twr_v806;
    if (!(_mng_status808)) { goto __twr_l98; } else { goto __twr_l99; }
    __twr_l99:;
    __twr_v809 = (uint64_t)(&TlInternalError);
    __twr_v810 = (uint64_t)(&"Failed to allocate target");
    __twr_v811 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v809)(__twr_v810, __twr_v811, __twr_v811, __twr_v811);
    __twr_l98:;
    __twr_v812 = (uint64_t)(&TlInitializeDynamicBuffer);
    __twr_v813 = 48ULL;
    __twr_v814 = _mng_target807 + __twr_v813;
    ((void (*)(uint64_t))__twr_v812)(__twr_v814);
    __twr_v815 = 312ULL;
    __twr_v816 = _mng_target807 + __twr_v815;
    ((void (*)(uint64_t))__twr_v812)(__twr_v816);
    __twr_v817 = 400ULL;
    __twr_v818 = _mng_target807 + __twr_v817;
    ((void (*)(uint64_t))__twr_v812)(__twr_v818);
    __twr_v819 = 488ULL;
    __twr_v820 = _mng_target807 + __twr_v819;
    ((void (*)(uint64_t))__twr_v812)(__twr_v820);
    __twr_v821 = 136ULL;
    __twr_v822 = _mng_target807 + __twr_v821;
    ((void (*)(uint64_t))__twr_v812)(__twr_v822);
    __twr_v823 = 224ULL;
    __twr_v824 = _mng_target807 + __twr_v823;
    ((void (*)(uint64_t))__twr_v812)(__twr_v824);
    __twr_v825 = 608ULL;
    __twr_v826 = _mng_target807 + __twr_v825;
    ((void (*)(uint64_t))__twr_v812)(__twr_v826);
    __twr_v827 = 696ULL;
    __twr_v828 = _mng_target807 + __twr_v827;
    ((void (*)(uint64_t))__twr_v812)(__twr_v828);
    __twr_v829 = 0ULL;
    __twr_v830 = 824ULL;
    __twr_v831 = _mng_target807 + __twr_v830;
    *(uint8_t*)(__twr_v831) = __twr_v829;
    __twr_v832 = 825ULL;
    __twr_v833 = _mng_target807 + __twr_v832;
    *(uint8_t*)(__twr_v833) = __twr_v829;
    __twr_v834 = 826ULL;
    __twr_v835 = _mng_target807 + __twr_v834;
    *(uint8_t*)(__twr_v835) = __twr_v829;
    __twr_v836 = 576ULL;
    __twr_v837 = _mng_target807 + __twr_v836;
    _mng_listhead838 = __twr_v837;
    __twr_v839 = 8ULL;
    __twr_v840 = _mng_listhead838 + __twr_v839;
    *(uint64_t*)(__twr_v840) = _mng_listhead838;
    *(uint64_t*)(_mng_listhead838) = _mng_listhead838;
    __twr_v841 = 592ULL;
    __twr_v842 = _mng_target807 + __twr_v841;
    _mng_listhead843 = __twr_v842;
    __twr_v844 = _mng_listhead843 + __twr_v839;
    *(uint64_t*)(__twr_v844) = _mng_listhead843;
    *(uint64_t*)(_mng_listhead843) = _mng_listhead843;
    __twr_v845 = 784ULL;
    __twr_v846 = _mng_target807 + __twr_v845;
    _mng_listhead847 = __twr_v846;
    __twr_v848 = _mng_listhead847 + __twr_v839;
    *(uint64_t*)(__twr_v848) = _mng_listhead847;
    *(uint64_t*)(_mng_listhead847) = _mng_listhead847;
    __twr_v849 = 800ULL;
    __twr_v850 = _mng_target807 + __twr_v849;
    _mng_listhead851 = __twr_v850;
    __twr_v852 = _mng_listhead851 + __twr_v839;
    *(uint64_t*)(__twr_v852) = _mng_listhead851;
    *(uint64_t*)(_mng_listhead851) = _mng_listhead851;
    __twr_v853 = (uint64_t)(&BtCurrentTarget);
    *(uint64_t*)(__twr_v853) = _mng_target807;
    __twr_v854 = (uint64_t)(&LexExposedMacroListHead);
    _mng_listhead855 = __twr_v854;
    __twr_v856 = *(uint64_t*)(_mng_listhead855);
    _mng_listentry857 = __twr_v856;
    if (_mng_listentry857 == _mng_listhead855) { goto __twr_l101; } else { goto __twr_l100; }
    __twr_l100:;
    __twr_v858 = 232ULL;
    __twr_v859 = _mng_listentry857 - __twr_v858;
    _mng_macro860 = __twr_v859;
    __twr_v861 = (uint64_t)(&TlBumpAlloc);
    __twr_v862 = 24ULL;
    __twr_v863 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v861)(__twr_v862, (uint64_t)(&_mng_exprec864));
    _mng_status808 = __twr_v863;
    if (!(_mng_status808)) { goto __twr_l103; } else { goto __twr_l104; }
    __twr_l104:;
    __twr_v865 = (uint64_t)(&TlInternalError);
    __twr_v866 = (uint64_t)(&"Failed to allocate exposed macro record");
    __twr_v867 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v865)(__twr_v866, __twr_v867, __twr_v867, __twr_v867);
    __twr_l103:;
    __twr_v868 = 16ULL;
    __twr_v869 = _mng_exprec864 + __twr_v868;
    *(uint64_t*)(__twr_v869) = _mng_macro860;
    __twr_v870 = 800ULL;
    __twr_v871 = _mng_target807 + __twr_v870;
    _mng_listhead872 = __twr_v871;
    _mng_listentry873 = _mng_exprec864;
    __twr_v874 = 8ULL;
    __twr_v875 = _mng_listhead872 + __twr_v874;
    __twr_v876 = *(uint64_t*)(__twr_v875);
    _mng_last877 = __twr_v876;
    __twr_v878 = _mng_listentry873 + __twr_v874;
    *(uint64_t*)(__twr_v878) = _mng_last877;
    *(uint64_t*)(_mng_listentry873) = _mng_listhead872;
    *(uint64_t*)(_mng_last877) = _mng_listentry873;
    *(uint64_t*)(__twr_v875) = _mng_listentry873;
    __twr_v879 = *(uint64_t*)(_mng_listentry857);
    _mng_listentry857 = __twr_v879;
    __twr_l102:;
    if (_mng_listentry857 != _mng_listhead855) { goto __twr_l100; } else { goto __twr_l101; }
    __twr_l101:;
    __twr_v880 = (uint64_t)(&LexMatchToken);
    __twr_v881 = (uint64_t)(&_mng_token766);
    __twr_v882 = 3ULL;
    __twr_v883 = 0ULL;
    __twr_v884 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v880)(__twr_v881, __twr_v882, __twr_v883);
    if (__twr_v884) { goto __twr_l106; } else { goto __twr_l105; }
    __twr_l105:;
    __twr_v885 = (uint64_t)(&LexMatchToken);
    __twr_v886 = (uint64_t)(&_mng_token766);
    __twr_v887 = 2ULL;
    __twr_v888 = 0ULL;
    __twr_v889 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v885)(__twr_v886, __twr_v887, __twr_v888);
    if (__twr_v889) { goto __twr_l108; } else { goto __twr_l109; }
    __twr_l109:;
    __twr_v890 = (uint64_t)(&LexTokenError);
    __twr_v891 = (uint64_t)(&_mng_token766);
    __twr_v892 = (uint64_t)(&"Expected a target info specifier");
    __twr_v893 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))__twr_v890)(__twr_v891, __twr_v892, __twr_v893, __twr_v893, __twr_v893);
    __twr_l108:;
    __twr_v894 = (uint64_t)(&BtTargetInfoSpecifiers);
    __twr_v895 = (uint64_t)(&_mng_token766);
    __twr_v896 = 25ULL;
    __twr_v897 = __twr_v895 + __twr_v896;
    __twr_v898 = *(uint8_t*)(__twr_v897);
    __twr_v899 = 3ULL;
    __twr_v900 = __twr_v898 << __twr_v899;
    __twr_v901 = __twr_v894 + __twr_v900;
    __twr_v902 = *(uint64_t*)(__twr_v901);
    ((void (*)())__twr_v902)();
    __twr_l107:;
    __twr_v903 = (uint64_t)(&LexMatchToken);
    __twr_v904 = (uint64_t)(&_mng_token766);
    __twr_v905 = 3ULL;
    __twr_v906 = 0ULL;
    __twr_v907 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v903)(__twr_v904, __twr_v905, __twr_v906);
    if (!(__twr_v907)) { goto __twr_l105; } else { goto __twr_l106; }
    __twr_l106:;
    __twr_v908 = (uint64_t)(&TlInsertHashTable);
    __twr_v909 = (uint64_t)(&BtTargetHashTable);
    __twr_v910 = 64ULL;
    __twr_v911 = _mng_namestring793 + __twr_v910;
    __twr_v912 = *(uint64_t*)(__twr_v911);
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v908)(__twr_v909, _mng_target807, __twr_v912);
    __twr_v913 = 826ULL;
    __twr_v914 = _mng_target807 + __twr_v913;
    __twr_v915 = *(uint8_t*)(__twr_v914);
    if (!(__twr_v915)) { goto __twr_l110; } else { goto __twr_l111; }
    __twr_l111:;
    __twr_v916 = (uint64_t)(&TlInsertDynamicBuffer);
    __twr_v917 = 696ULL;
    __twr_v918 = _mng_target807 + __twr_v917;
    __twr_v919 = 0ULL;
    ((void (*)(uint64_t, uint64_t))__twr_v916)(__twr_v918, __twr_v919);
    __twr_l110:;
    __twr_v920 = 1ULL;
    _jkl_retv = __twr_v920;
    goto _jkl_epilogue;
    __twr_l89:;
    _jkl_epilogue:;
    return _jkl_retv;
}
void BtParse() {
    uint64_t __twr_v921;
    uint64_t __twr_v922;
    uint64_t __twr_v923;
    uint64_t __twr_v924;
    uint64_t __twr_v925;
    uint64_t __twr_v926;
    uint64_t __twr_v927;
    uint64_t __twr_v928;
    uint64_t __twr_v929;
    uint64_t __twr_v930;
    uint64_t _mng_target931;
    uint64_t __twr_v932;
    uint64_t __twr_v933;
    uint64_t __twr_v934;
    uint64_t __twr_v935;
    __twr_v921 = (uint64_t)(&TlInitializeHashTable);
    __twr_v922 = (uint64_t)(&BtTargetHashTable);
    ((void (*)(uint64_t))__twr_v921)(__twr_v922);
    __twr_v923 = (uint64_t)(&BtParseTarget);
    __twr_v924 = ((uint64_t (*)())__twr_v923)();
    if (!(__twr_v924)) { goto __twr_l114; } else { goto __twr_l113; }
    __twr_l113:;
    __twr_l115:;
    __twr_v925 = (uint64_t)(&BtParseTarget);
    __twr_v926 = ((uint64_t (*)())__twr_v925)();
    if (__twr_v926) { goto __twr_l113; } else { goto __twr_l114; }
    __twr_l114:;
    __twr_v927 = (uint64_t)(&TlLookupHashTable);
    __twr_v928 = (uint64_t)(&BtTargetHashTable);
    __twr_v929 = (uint64_t)(&FeTargetName);
    __twr_v930 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v927)(__twr_v928, __twr_v929);
    _mng_target931 = __twr_v930;
    if (_mng_target931) { goto __twr_l116; } else { goto __twr_l117; }
    __twr_l117:;
    __twr_v932 = (uint64_t)(&TlUserError);
    __twr_v933 = (uint64_t)(&"Target not defined");
    __twr_v934 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v932)(__twr_v933, __twr_v934, __twr_v934, __twr_v934);
    __twr_l116:;
    __twr_v935 = (uint64_t)(&BtSelectedTarget);
    *(uint64_t*)(__twr_v935) = _mng_target931;
    __twr_l112:;
    _jkl_epilogue:;
}
void BtLookupConfigMacros() {
    uint64_t __twr_v936;
    uint64_t __twr_v937;
    uint64_t __twr_v938;
    uint64_t __twr_v939;
    uint64_t __twr_v940;
    uint64_t _mng_macro941;
    uint64_t __twr_v942;
    uint64_t __twr_v943;
    uint64_t __twr_v944;
    uint64_t __twr_v945;
    uint64_t __twr_v946;
    uint64_t __twr_v947;
    uint64_t __twr_v948;
    uint64_t __twr_v949;
    uint64_t __twr_v950;
    uint64_t __twr_v951;
    uint64_t __twr_v952;
    uint64_t __twr_v953;
    uint64_t __twr_v954;
    uint64_t __twr_v955;
    uint64_t __twr_v956;
    uint64_t __twr_v957;
    uint64_t __twr_v958;
    uint64_t __twr_v959;
    uint64_t __twr_v960;
    uint64_t __twr_v961;
    uint64_t __twr_v962;
    uint64_t __twr_v963;
    uint64_t __twr_v964;
    uint64_t __twr_v965;
    uint64_t __twr_v966;
    uint64_t __twr_v967;
    uint64_t __twr_v968;
    uint64_t __twr_v969;
    uint64_t __twr_v970;
    uint64_t __twr_v971;
    uint64_t __twr_v972;
    uint64_t __twr_v973;
    uint64_t __twr_v974;
    uint64_t __twr_v975;
    uint64_t __twr_v976;
    uint64_t __twr_v977;
    uint64_t __twr_v978;
    uint64_t __twr_v979;
    uint64_t __twr_v980;
    uint64_t __twr_v981;
    uint64_t __twr_v982;
    uint64_t __twr_v983;
    uint64_t __twr_v984;
    uint64_t __twr_v985;
    uint64_t __twr_v986;
    uint64_t __twr_v987;
    uint64_t __twr_v988;
    uint64_t __twr_v989;
    uint64_t __twr_v990;
    uint64_t __twr_v991;
    uint64_t __twr_v992;
    uint64_t __twr_v993;
    uint64_t __twr_v994;
    uint64_t __twr_v995;
    uint64_t __twr_v996;
    uint64_t __twr_v997;
    uint64_t __twr_v998;
    uint64_t __twr_v999;
    uint64_t __twr_v1000;
    uint64_t __twr_v1001;
    uint64_t __twr_v1002;
    uint64_t __twr_v1003;
    uint64_t __twr_v1004;
    uint64_t __twr_v1005;
    uint64_t __twr_v1006;
    uint64_t __twr_v1007;
    uint64_t __twr_v1008;
    uint64_t __twr_v1009;
    uint64_t __twr_v1010;
    uint64_t __twr_v1011;
    uint64_t __twr_v1012;
    uint64_t __twr_v1013;
    uint64_t __twr_v1014;
    uint64_t __twr_v1015;
    uint64_t __twr_v1016;
    uint64_t __twr_v1017;
    uint64_t __twr_v1018;
    uint64_t __twr_v1019;
    uint64_t __twr_v1020;
    uint64_t __twr_v1021;
    uint64_t __twr_v1022;
    uint64_t __twr_v1023;
    uint64_t __twr_v1024;
    uint64_t __twr_v1025;
    uint64_t __twr_v1026;
    uint64_t __twr_v1027;
    uint64_t __twr_v1028;
    uint64_t __twr_v1029;
    uint64_t __twr_v1030;
    uint64_t __twr_v1031;
    uint64_t __twr_v1032;
    uint64_t __twr_v1033;
    uint64_t __twr_v1034;
    uint64_t __twr_v1035;
    uint64_t __twr_v1036;
    uint64_t __twr_v1037;
    uint64_t __twr_v1038;
    uint64_t __twr_v1039;
    uint64_t __twr_v1040;
    uint64_t __twr_v1041;
    uint64_t __twr_v1042;
    uint64_t __twr_v1043;
    uint64_t __twr_v1044;
    uint64_t __twr_v1045;
    uint64_t __twr_v1046;
    uint64_t __twr_v1047;
    uint64_t __twr_v1048;
    uint64_t __twr_v1049;
    uint64_t __twr_v1050;
    uint64_t __twr_v1051;
    uint64_t __twr_v1052;
    uint64_t __twr_v1053;
    uint64_t __twr_v1054;
    uint64_t __twr_v1055;
    __twr_v936 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v937 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v938 = *(uint64_t*)(__twr_v937);
    __twr_v939 = (uint64_t)(&"ARCHITECTURE");
    __twr_v940 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v936)(__twr_v938, __twr_v939);
    _mng_macro941 = __twr_v940;
    if (_mng_macro941) { goto __twr_l119; } else { goto __twr_l120; }
    __twr_l120:;
    __twr_v942 = (uint64_t)(&TlUserError);
    __twr_v943 = (uint64_t)(&"ARCHITECTURE wasn't defined in the config");
    __twr_v944 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v942)(__twr_v943, __twr_v944, __twr_v944, __twr_v944);
    __twr_l119:;
    __twr_v945 = 264ULL;
    __twr_v946 = _mng_macro941 + __twr_v945;
    __twr_v947 = *(uint8_t*)(__twr_v946);
    if (!(__twr_v947)) { goto __twr_l121; } else { goto __twr_l122; }
    __twr_l122:;
    __twr_v948 = (uint64_t)(&TlUserError);
    __twr_v949 = (uint64_t)(&"ARCHITECTURE is a function macro for some reason");
    __twr_v950 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v948)(__twr_v949, __twr_v950, __twr_v950, __twr_v950);
    __twr_l121:;
    __twr_v951 = (uint64_t)(&TlCopyString);
    __twr_v952 = (uint64_t)(&BtTargetArchitectureName);
    __twr_v953 = 96ULL;
    __twr_v954 = _mng_macro941 + __twr_v953;
    __twr_v955 = *(uint64_t*)(__twr_v954);
    __twr_v956 = 64ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v951)(__twr_v952, __twr_v955, __twr_v956);
    __twr_v957 = (uint64_t)(&TlCompareString);
    __twr_v958 = (uint64_t)(&"CHost");
    __twr_v959 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v957)(__twr_v952, __twr_v958);
    if (__twr_v959) { goto __twr_l123; } else { goto __twr_l124; }
    __twr_l124:;
    __twr_v960 = 1ULL;
    __twr_v961 = (uint64_t)(&BtCHost);
    *(uint64_t*)(__twr_v961) = __twr_v960;
    __twr_l123:;
    __twr_v962 = 1ULL;
    __twr_v963 = (uint64_t)(&BtJobCount);
    *(uint64_t*)(__twr_v963) = __twr_v962;
    __twr_v964 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v965 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v966 = *(uint64_t*)(__twr_v965);
    __twr_v967 = (uint64_t)(&"JOBS");
    __twr_v968 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v964)(__twr_v966, __twr_v967);
    _mng_macro941 = __twr_v968;
    if (!(_mng_macro941)) { goto __twr_l125; } else { goto __twr_l126; }
    __twr_l126:;
    __twr_v969 = 264ULL;
    __twr_v970 = _mng_macro941 + __twr_v969;
    __twr_v971 = *(uint8_t*)(__twr_v970);
    if (!(__twr_v971)) { goto __twr_l127; } else { goto __twr_l128; }
    __twr_l128:;
    __twr_v972 = (uint64_t)(&TlUserError);
    __twr_v973 = (uint64_t)(&"JOBS is a function macro for some reason");
    __twr_v974 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v972)(__twr_v973, __twr_v974, __twr_v974, __twr_v974);
    __twr_l127:;
    __twr_v975 = (uint64_t)(&TlStringToNumber);
    __twr_v976 = 96ULL;
    __twr_v977 = _mng_macro941 + __twr_v976;
    __twr_v978 = *(uint64_t*)(__twr_v977);
    __twr_v979 = 18446744073709551615ULL;
    __twr_v980 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))__twr_v975)(__twr_v978, __twr_v979, (uint64_t)(&__twr_v981));
    __twr_v982 = (uint64_t)(&BtJobCount);
    *(uint64_t*)(__twr_v982) = __twr_v981;
    if (__twr_v980) { goto __twr_l129; } else { goto __twr_l130; }
    __twr_l130:;
    __twr_v983 = (uint64_t)(&TlUserError);
    __twr_v984 = (uint64_t)(&"JOBS wasn't a numeric value");
    __twr_v985 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v983)(__twr_v984, __twr_v985, __twr_v985, __twr_v985);
    __twr_l129:;
    __twr_v986 = (uint64_t)(&BtJobCount);
    __twr_v987 = *(uint64_t*)(__twr_v986);
    if (__twr_v987) { goto __twr_l131; } else { goto __twr_l132; }
    __twr_l132:;
    __twr_v988 = (uint64_t)(&TlUserError);
    __twr_v989 = (uint64_t)(&"Zero JOBS specified");
    __twr_v990 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v988)(__twr_v989, __twr_v990, __twr_v990, __twr_v990);
    __twr_l131:;
    __twr_l125:;
    __twr_v991 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v992 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v993 = *(uint64_t*)(__twr_v992);
    __twr_v994 = (uint64_t)(&"SDK_BASE");
    __twr_v995 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v991)(__twr_v993, __twr_v994);
    _mng_macro941 = __twr_v995;
    if (_mng_macro941) { goto __twr_l133; } else { goto __twr_l134; }
    __twr_l134:;
    __twr_v996 = (uint64_t)(&TlUserError);
    __twr_v997 = (uint64_t)(&"SDK_BASE wasn't defined in the config");
    __twr_v998 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v996)(__twr_v997, __twr_v998, __twr_v998, __twr_v998);
    __twr_l133:;
    __twr_v999 = 264ULL;
    __twr_v1000 = _mng_macro941 + __twr_v999;
    __twr_v1001 = *(uint8_t*)(__twr_v1000);
    if (!(__twr_v1001)) { goto __twr_l135; } else { goto __twr_l136; }
    __twr_l136:;
    __twr_v1002 = (uint64_t)(&TlUserError);
    __twr_v1003 = (uint64_t)(&"SDK_BASE is a function macro for some reason");
    __twr_v1004 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v1002)(__twr_v1003, __twr_v1004, __twr_v1004, __twr_v1004);
    __twr_l135:;
    __twr_v1005 = (uint64_t)(&TlCopyString);
    __twr_v1006 = (uint64_t)(&BtSdkBase);
    __twr_v1007 = 96ULL;
    __twr_v1008 = _mng_macro941 + __twr_v1007;
    __twr_v1009 = *(uint64_t*)(__twr_v1008);
    __twr_v1010 = 64ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v1005)(__twr_v1006, __twr_v1009, __twr_v1010);
    __twr_v1011 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v1012 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v1013 = *(uint64_t*)(__twr_v1012);
    __twr_v1014 = (uint64_t)(&"ARCH_NAME_SUFFIX");
    __twr_v1015 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v1011)(__twr_v1013, __twr_v1014);
    _mng_macro941 = __twr_v1015;
    if (!(_mng_macro941)) { goto __twr_l137; } else { goto __twr_l138; }
    __twr_l138:;
    __twr_v1016 = 264ULL;
    __twr_v1017 = _mng_macro941 + __twr_v1016;
    __twr_v1018 = *(uint8_t*)(__twr_v1017);
    if (!(__twr_v1018)) { goto __twr_l139; } else { goto __twr_l140; }
    __twr_l140:;
    __twr_v1019 = (uint64_t)(&TlUserError);
    __twr_v1020 = (uint64_t)(&"ARCH_NAME_SUFFIX is a function macro for some reason");
    __twr_v1021 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v1019)(__twr_v1020, __twr_v1021, __twr_v1021, __twr_v1021);
    __twr_l139:;
    __twr_v1022 = (uint64_t)(&TlCopyString);
    __twr_v1023 = (uint64_t)(&BtArchNameSuffix);
    __twr_v1024 = 1ULL;
    __twr_v1025 = 96ULL;
    __twr_v1026 = _mng_macro941 + __twr_v1025;
    __twr_v1027 = *(uint64_t*)(__twr_v1026);
    __twr_v1028 = 256ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t))__twr_v1022)(__twr_v1023, __twr_v1027, __twr_v1028);
    __twr_v1029 = (uint64_t)(&BtArchHasSuffix);
    *(uint64_t*)(__twr_v1029) = __twr_v1024;
    __twr_l137:;
    __twr_v1030 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v1031 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v1032 = *(uint64_t*)(__twr_v1031);
    __twr_v1033 = (uint64_t)(&"CLEANUP");
    __twr_v1034 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v1030)(__twr_v1032, __twr_v1033);
    _mng_macro941 = __twr_v1034;
    if (!(_mng_macro941)) { goto __twr_l141; } else { goto __twr_l142; }
    __twr_l142:;
    __twr_v1035 = 264ULL;
    __twr_v1036 = _mng_macro941 + __twr_v1035;
    __twr_v1037 = *(uint8_t*)(__twr_v1036);
    if (!(__twr_v1037)) { goto __twr_l143; } else { goto __twr_l144; }
    __twr_l144:;
    __twr_v1038 = (uint64_t)(&TlUserError);
    __twr_v1039 = (uint64_t)(&"CLEANUP is a function macro for some reason");
    __twr_v1040 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v1038)(__twr_v1039, __twr_v1040, __twr_v1040, __twr_v1040);
    __twr_l143:;
    __twr_v1041 = 1ULL;
    __twr_v1042 = (uint64_t)(&BtCleanUp);
    *(uint64_t*)(__twr_v1042) = __twr_v1041;
    __twr_l141:;
    __twr_v1043 = (uint64_t)(&TlLookupSymbolTable);
    __twr_v1044 = (uint64_t)(&LexCurrentMacroScope);
    __twr_v1045 = *(uint64_t*)(__twr_v1044);
    __twr_v1046 = (uint64_t)(&"VERBOSE");
    __twr_v1047 = ((uint64_t (*)(uint64_t, uint64_t))__twr_v1043)(__twr_v1045, __twr_v1046);
    _mng_macro941 = __twr_v1047;
    if (!(_mng_macro941)) { goto __twr_l145; } else { goto __twr_l146; }
    __twr_l146:;
    __twr_v1048 = 264ULL;
    __twr_v1049 = _mng_macro941 + __twr_v1048;
    __twr_v1050 = *(uint8_t*)(__twr_v1049);
    if (!(__twr_v1050)) { goto __twr_l147; } else { goto __twr_l148; }
    __twr_l148:;
    __twr_v1051 = (uint64_t)(&TlUserError);
    __twr_v1052 = (uint64_t)(&"VERBOSE is a function macro for some reason");
    __twr_v1053 = 0ULL;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))__twr_v1051)(__twr_v1052, __twr_v1053, __twr_v1053, __twr_v1053);
    __twr_l147:;
    __twr_v1054 = 1ULL;
    __twr_v1055 = (uint64_t)(&BtVerbose);
    *(uint64_t*)(__twr_v1055) = __twr_v1054;
    __twr_l145:;
    __twr_l118:;
    _jkl_epilogue:;
}
