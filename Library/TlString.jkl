//
// String helper routines.
//

#INCLUDE "<inc>/Runtime.hjk"

FN TlTokenize (
    IN buffer : ^UBYTE,
    IN tokenbuffer : ^UBYTE,
    IN bufsize : UWORD,
    IN delimiter : UBYTE,
) : ^UBYTE

    // Return the next token from the buffer.

    WHILE buffer^ == delimiter DO
        buffer += 1
    END

    IF NOT buffer^ THEN
        RETURN NULLPTR
    END

    WHILE bufsize - 1 DO
        IF buffer^ == delimiter OR NOT buffer^ THEN
            BREAK
        END

        tokenbuffer^ = buffer^

        tokenbuffer += 1
        buffer += 1
        bufsize -= 1
    END

    tokenbuffer^ = 0

    RETURN buffer
END

FN TlStringToNumber (
    IN src : ^UBYTE,
    IN bufsize : UWORD,
    OUT num : UWORD,
) : UWORD

    IF bufsize < 1 THEN
        RETURN FALSE
    END

    IF src^ == 0 THEN
        RETURN FALSE
    END

    base := 10

    IF src^ == '0' THEN
        // Octal or hex.

        base = 8
        bufsize -= 1
        src += 1

        IF bufsize < 1 THEN
            num = 0

            RETURN TRUE
        END

        IF src^ == 'x' THEN
            // Hex.

            base = 16

            bufsize -= 1
            src += 1

            IF bufsize < 1 OR src^ == 0 THEN
                RETURN FALSE
            END
        END
    END

    num = 0

    WHILE bufsize DO
        byte := src^

        IF byte == 0 THEN
            RETURN TRUE
        END

        num *= base

        IF base == 16 THEN
            IF byte >= '0' AND byte <= '9' THEN
                num += byte - '0'
            
            ELSEIF byte >= 'A' AND byte <= 'F' THEN
                num += byte - 'A' + 10

            ELSEIF byte >= 'a' AND byte <= 'f' THEN
                num += byte - 'a' + 10

            ELSE
                RETURN FALSE
            END

        ELSEIF byte >= '0' AND byte <= '9' THEN
            num += byte - '0'
        
        ELSE
            RETURN FALSE
        END

        src += 1
        bufsize -= 1
    END

    RETURN TRUE
END