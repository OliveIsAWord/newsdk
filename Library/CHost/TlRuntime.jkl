//
// Host-specific runtime functions.
// These are mostly just a bunch of wrapper functions, around libc for the C
// transpilation host, and around Rtl for the MINTIA host.
//

#INCLUDE "<inc>/Runtime.hjk"

EXTERN FN exit (
    IN status : UWORD,
)

EXTERN FN malloc (
    IN size : UWORD,
) : ^VOID

EXTERN FN free (
    IN ptr : ^VOID,
)

EXTERN FN strcmp (
    IN s1 : ^UBYTE,
    IN s2 : ^UBYTE,
) : UWORD

EXTERN FN strncmp (
    IN s1 : ^UBYTE,
    IN s2 : ^UBYTE,
    IN n : UWORD,
) : UWORD

EXTERN FN fopen (
    IN path : ^UBYTE,
    IN mode : ^UBYTE,
) : ^VOID

EXTERN FN fclose (
    IN stream : ^VOID,
) : ^UWORD

EXTERN FN fread (
    IN ptr : ^VOID,
    IN size : UWORD,
    IN nitems : UWORD,
    IN stream : ^VOID,
) : UWORD

EXTERN FN fwrite (
    IN ptr : ^VOID,
    IN size : UWORD,
    IN nitems : UWORD,
    IN stream : ^VOID,
) : UWORD

EXTERN FN fseeko (
    IN stream : ^VOID,
    IN offset : UWORD,
    IN whence : UWORD,
) : UWORD

EXTERN FN memset (
    IN ptr : ^VOID,
    IN c : UWORD,
    IN len : UWORD,
) : ^VOID

EXTERN FN memcpy (
    IN dest : ^VOID,
    IN src : ^VOID,
    IN sz : UWORD,
) : ^VOID

EXTERN FN strlen (
    IN s : ^UBYTE,
) : UWORD

EXTERN FN fileno (
    IN stream : ^VOID,
) : UWORD

EXTERN FN ftruncate (
    IN fd : UWORD,
    IN length : UWORD,
) : UWORD

FN TlFillMemoryWithByte (
    IN ptr : ^VOID,
    IN sz : UWORD,
    IN byte : UWORD,
)

    memset (
        ptr, // ptr
        byte, // c
        sz, // len
    )
END

FN TlCopyMemory (
    IN dest : ^VOID,
    IN src : ^VOID,
    IN sz : UWORD,
)

    memcpy (
        dest, // dst
        src, // src
        sz, // sz
    )
END

FN TlErrorExit ()

    exit ( 1 )
END

TlHeapHits : UWORD = 0

FN TlAlloc (
    IN bytes : UWORD,
    OUT ptr : ^VOID,
) : TlStatus

    TlHeapHits += 1

    ptr = malloc ( bytes )

    IF ptr == 0 THEN
        RETURN TL_NO_MEMORY
    END

    RETURN TL_SUCCESS
END

FN TlFree (
    IN ptr : ^VOID,
)

    free ( ptr )
END

TlBumpPtr := NULLPTR
TlBumpBytesLeft : UWORD = 0
TlBumpBytesUsed : UWORD = 0
TlBumpHits : UWORD = 0

#DEFINE TL_BUMP_EXTEND 65536

FN TlBumpAlloc (
    IN bytes : UWORD,
    OUT ptr : ^VOID,
) : TlStatus

    // Eternal bump allocator for accelerating some stuff.
    // First align to 8 bytes, assuming a 64-bit C host.

    bytes += 7
    bytes &= ~7

    IF bytes <= TlBumpBytesLeft THEN
        ptr = TlBumpPtr

        TlBumpHits += 1
        TlBumpBytesUsed += bytes
        TlBumpPtr += bytes
        TlBumpBytesLeft -= bytes

        RETURN TL_SUCCESS
    END

    TlHeapHits += 1

    IF bytes >= TL_BUMP_EXTEND THEN
        ptr = malloc ( bytes )

        IF ptr == 0 THEN
            RETURN TL_NO_MEMORY
        END

        RETURN TL_SUCCESS
    END

    TlBumpPtr = malloc ( TL_BUMP_EXTEND )

    IF NOT TlBumpPtr THEN
        RETURN TL_NO_MEMORY
    END

    ptr = TlBumpPtr

    TlBumpBytesUsed += bytes
    TlBumpBytesLeft = TL_BUMP_EXTEND - bytes
    TlBumpPtr += bytes

    RETURN TL_SUCCESS
END

FN TlCompareString (
    IN str1 : ^UBYTE,
    IN str2 : ^UBYTE,
) : UWORD

    RETURN strcmp ( str1, str2 )
END

FN TlCompareStringWithMax (
    IN str1 : ^UBYTE,
    IN str2 : ^UBYTE,
    IN count : UWORD,
) : UWORD

    RETURN strncmp ( str1, str2, count )
END

FN TlMeasureString (
    IN str : ^UBYTE,
) : UWORD

    RETURN strlen ( str )
END

FN TlCopyString (
    IN dest : ^UBYTE,
    IN src : ^UBYTE,
    IN bufsize : UWORD,
)
    IF NOT bufsize THEN
        LEAVE
    END

    WHILE bufsize - 1 DO
        dest^ = src^

        dest += 1
        src += 1
        bufsize -= 1

        IF src^ == 0 THEN
            BREAK
        END
    END

    dest^ = 0
END

FN TlOpenSource (
    IN filename : ^UBYTE,
    OUT handle : ^VOID,
) : TlStatus

    handle = fopen ( filename, "r+b" )

    IF handle == 0 THEN
        RETURN TL_COULDNT_OPEN
    END

    RETURN TL_SUCCESS
END

FN TlOpenDestination (
    IN filename : ^UBYTE,
    OUT handle : ^VOID,
) : TlStatus

    handle = fopen ( filename, "w+b" )

    IF handle == 0 THEN
        RETURN TL_COULDNT_OPEN
    END

    RETURN TL_SUCCESS
END

FN TlOpenDestinationAndTruncate (
    IN filename : ^UBYTE,
    IN size : UWORD,
    OUT handle : ^VOID,
) : TlStatus

    handle = fopen ( filename, "w+b" )

    IF handle == 0 THEN
        RETURN TL_COULDNT_OPEN
    END

    fd := fileno ( handle )

    IF ftruncate ( fd, size ) != 0 THEN
        fclose ( handle )

        RETURN TL_COULDNT_OPEN
    END

    RETURN TL_SUCCESS
END

FN TlClose (
    IN handle : ^VOID,
)

    fclose ( handle )
END

FN TlReadFile (
    IN handle : ^VOID,
    IN bytes : UWORD,
    IN buffer : ^VOID,
) : UWORD

    // XXX make sure to check for errors on hosts where that is more
    // applicable.

    RETURN fread ( buffer, 1, bytes, handle )
END

FN TlWriteFile (
    IN handle : ^VOID,
    IN bytes : UWORD,
    IN buffer : ^VOID,
) : UWORD

    // XXX make sure to check for errors on hosts where that is more
    // applicable.

    RETURN fwrite ( buffer, 1, bytes, handle )
END

FN TlSeekFile (
    IN handle : ^VOID,
    IN bytes : UWORD,
)

    fseeko ( handle, bytes, 0 )
END

FN TlpStatFileHelper (
    IN statrecord : ^TlStatRecord,
    IN isdir : UWORD,
    IN mtime : UWORD,
    IN sizebytes : UWORD,
)

    IF isdir THEN
        statrecord^.FileType = TL_FT_DIRECTORY
    ELSE
        statrecord^.FileType = TL_FT_FILE
    END

    statrecord^.ModificationTime = mtime

    statrecord^.SizeInBytes = sizebytes
END