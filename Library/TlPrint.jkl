//
// Implements printing and formatting routines for the Toolchain Library.
//

#INCLUDE "<inc>/Runtime.hjk"

PUBLIC TlProgramName : ^UBYTE = "<unknown>"
PUBLIC TlStdErr : ^VOID = NULLPTR

FNPTR TlpFormatF (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN flag : UWORD,
    IN arg : UWORD,
    IN value : ^VOID,
)

#DEFINE TL_PRINT_ARG_NEG  1
#DEFINE TL_PRINT_ARG_ZERO 2
#DEFINE TL_PRINT_ARG      4
#DEFINE TL_PRINT_UPPER    8

#MACRO TlpPad ( char, callback, context, count ) [
    i := count

    WHILE i DO
        callback ( char, context )

        i -= 1
    END
]

FN (TlpFormatF) TlpFormatS (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN flag : UWORD,
    IN arg : UWORD,
    IN value : ^VOID,
)

    len : UWORD

    IF flag & TL_PRINT_ARG THEN
        len = TlMeasureString ( value )

        IF NOT (flag & TL_PRINT_ARG_NEG) AND arg > len THEN
            // Align to the right.

            TlpPad ( ' ', callback, context, arg - len )
        END
    END

    WHILE (CAST value TO ^UBYTE)^ DO
        callback ( (CAST value TO ^UBYTE)^, context )

        value += 1
    END

    IF flag & TL_PRINT_ARG_NEG AND arg > len THEN
        // Align to the left.

        TlpPad ( ' ', callback, context, arg - len )
    END
END

FN TlpFormatInteger (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN flag : UWORD,
    IN arg : UWORD,
    IN number : UWORD,
    IN signed : UWORD,
    IN base : UBYTE,
)

    log10 := 0
    divisor := 1
    signedbias := 0

    padchar := ' '

    IF flag & TL_PRINT_ARG_ZERO THEN
        padchar = '0'
    END

    IF signed AND
#IF ( == BLD_BITS 32 )
        number & 0x80000000
#ELSE
        number & 0x8000000000000000
#END
        THEN

        number = -number

        signedbias = 1
    END

    IF number == 0 THEN
        log10 = 1

    ELSE
        n := number

        WHILE n >= base DO
            divisor *= base
            n /= base
            log10 += 1
        END

        log10 += 1
    END

    IF flag & TL_PRINT_ARG THEN
        IF NOT (flag & TL_PRINT_ARG_NEG) AND arg > log10 + signedbias THEN
            // Align to the right.

            TlpPad ( padchar, callback, context, arg - (log10 + signedbias) )
        END
    END

    IF signedbias THEN
        callback ( '-', context )
    END

    WHILE log10 DO
        digit := (number / divisor) % base

        IF digit > 9 THEN
            IF flag & TL_PRINT_UPPER THEN
                digit = digit - 10 + 'A'

            ELSE
                digit = digit - 10 + 'a'
            END

        ELSE
            digit += '0'
        END

        callback ( digit, context )

        log10 -= 1
        divisor /= base
    END

    IF flag & TL_PRINT_ARG_NEG AND arg > log10 + signedbias THEN
        // Align to the left.

        TlpPad ( ' ', callback, context, arg - (log10 + signedbias) )
    END
END

FN (TlpFormatF) TlpFormatD (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN flag : UWORD,
    IN arg : UWORD,
    IN value : ^VOID,
)

    TlpFormatInteger (
        callback, // callback
        context, // context
        flag, // flag
        arg, // arg
        CAST value TO UWORD, // number
        TRUE, // signed
        10, // base
    )
END

FN (TlpFormatF) TlpFormatU (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN flag : UWORD,
    IN arg : UWORD,
    IN value : ^VOID,
)

    TlpFormatInteger (
        callback, // callback
        context, // context
        flag, // flag
        arg, // arg
        CAST value TO UWORD, // number
        FALSE, // signed
        10, // base
    )
END

FN (TlpFormatF) TlpFormatX (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN flag : UWORD,
    IN arg : UWORD,
    IN value : ^VOID,
)

    TlpFormatInteger (
        callback, // callback
        context, // context
        flag, // flag
        arg, // arg
        CAST value TO UWORD, // number
        FALSE, // signed
        16, // base
    )
END

FN (TlpFormatF) TlpFormatP (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN flag : UWORD,
    IN arg : UWORD,
    IN value : ^VOID,
)

    IF flag == 0 THEN
#IF ( == BLD_BITS 32 )
        arg = 8
#ELSE
        arg = 16
#END
    END

    TlpFormatInteger (
        callback, // callback
        context, // context
        TL_PRINT_ARG_ZERO | TL_PRINT_ARG, // flag
        arg, // arg
        CAST value TO UWORD, // number
        FALSE, // signed
        16, // base
    )
END

FN (TlpFormatF) TlpFormatC (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN flag : UWORD,
    IN arg : UWORD,
    IN value : ^VOID,
)

    IF flag & TL_PRINT_ARG THEN
        IF NOT (flag & TL_PRINT_ARG_NEG) AND arg > 1 THEN
            // Align to the right.

            TlpPad ( ' ', callback, context, arg - 1 )
        END
    END

    callback ( CAST value TO UBYTE, context )

    IF flag & TL_PRINT_ARG_NEG AND arg > 1 THEN
        // Align to the left.

        TlpPad ( ' ', callback, context, arg - 1 )
    END
END

FN (TlpFormatF) TlpFormatUpperX (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN flag : UWORD,
    IN arg : UWORD,
    IN value : ^VOID,
)

    TlpFormatX (
        callback, // callback
        context, // context
        flag | TL_PRINT_UPPER, // flag
        arg, // arg
        value, // value
    )
END

FN (TlpFormatF) TlpFormatUpperP (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN flag : UWORD,
    IN arg : UWORD,
    IN value : ^VOID,
)

    TlpFormatP (
        callback, // callback
        context, // context
        flag | TL_PRINT_UPPER, // flag
        arg, // arg
        value, // value
    )
END

#SECTION "text"
TlpFormatters : TlpFormatF[128] = {
    ['s'] = &TlpFormatS,
    ['d'] = &TlpFormatD,
    ['u'] = &TlpFormatU,
    ['x'] = &TlpFormatX,
    ['p'] = &TlpFormatP,
    ['c'] = &TlpFormatC,
    ['X'] = &TlpFormatUpperX,
    ['P'] = &TlpFormatUpperP,
}

FN TlPrintByCallbackByVarTable (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN fmt : ^UBYTE,
    IN argv : ^^VOID,
    IN argc : UWORD,
)

    // This is the one that actually does stuff!

    i := 0

    WHILE fmt^ DO
        byte := fmt^

        IF byte != '%' THEN
            callback ( byte, context )

        ELSE
            fmt += 1

            byte = fmt^

            IF NOT byte THEN
                callback ( '?', context )

                LEAVE
            END

            IF byte == '%' THEN
                callback ( '%', context )

                fmt += 1

                CONTINUE
            END

            arg := 0
            flag := 0

            IF byte == '-' THEN
                flag |= TL_PRINT_ARG_NEG

                fmt += 1
                byte = fmt^
            END

            IF byte == '0' THEN
                flag |= TL_PRINT_ARG_ZERO

                fmt += 1
                byte = fmt^
            END

            WHILE byte >= '0' AND byte <= '9' DO
                flag |= TL_PRINT_ARG

                arg *= 10
                arg += byte - '0'

                fmt += 1
                byte = fmt^
            END

            IF byte < 128 AND
                i < argc AND
                TlpFormatters[byte] THEN

                TlpFormatters[byte] (
                    callback, // callback
                    context, // context
                    flag, // flag
                    arg, // arg
                    argv[i], // value
                )

                i += 1

            ELSE
                callback ( '?', context )
            END
        END

        fmt += 1
    END
END

FN TlPrintByCallback (
    IN callback : TlPrintCallbackF,
    IN context : ^VOID,
    IN fmt : ^UBYTE,
    ... argv argc
)

    TlPrintByCallbackByVarTable (
        callback, // callback
        context, // context
        fmt, // fmt
        argv, // argv
        argc, // argc
    )
END

EXTERN FN (TlPrintCallbackF) TlpPrintCallback (
    IN byte : UBYTE,
    IN context : ^VOID,
)

FN TlPrintByVarTable (
    IN handle : ^VOID,
    IN fmt : ^UBYTE,
    IN argv : ^^VOID,
    IN argc : UWORD,
)

    TlPrintByCallbackByVarTable (
        &TlpPrintCallback, // callback
        handle, // context
        fmt, // fmt
        argv, // argv
        argc, // argc
    )
END

FN TlPrintByHandle (
    IN handle : ^VOID,
    IN fmt : ^UBYTE,
    ... argv argc
)

    TlPrintByVarTable (
        handle, // handle
        fmt, // fmt
        argv, // argv
        argc, // argc
    )
END

FN TlPrint (
    IN fmt : ^UBYTE,
    ... argv argc
)

    TlPrintByVarTable (
        NULLPTR, // handle
        fmt, // fmt
        argv, // argv
        argc, // argc
    )
END

STRUCT TlpFormatContext
    BufferLeft : UWORD,
    Buffer : ^UBYTE,
END

FN (TlPrintCallbackF) TlFormatCallback (
    IN byte : UBYTE,
    IN context : ^VOID,
)

    formatcontext := CAST context TO ^TlpFormatContext

    IF NOT formatcontext^.BufferLeft THEN
        LEAVE
    END

    formatcontext^.Buffer^ = byte
    formatcontext^.Buffer += 1
    formatcontext^.BufferLeft -= 1
END

FN TlFormatByVarTable (
    IN dest : ^UBYTE,
    IN bufsize : UWORD,
    IN fmt : ^UBYTE,
    IN argv : ^^VOID,
    IN argc : UWORD,
)

    // Format into the provided buffer.

    IF NOT bufsize THEN
        LEAVE
    END

    context : TlpFormatContext

    context.Buffer = dest
    context.BufferLeft = bufsize - 1

    TlPrintByCallbackByVarTable (
        &TlFormatCallback, // callback
        &context, // context
        fmt, // fmt
        argv, // argv
        argc, // argc
    )

    // Insert null terminator.

    context.Buffer^ = 0
END

FN TlFormat (
    IN dest : ^UBYTE,
    IN bufsize : UWORD,
    IN fmt : ^UBYTE,
    ... argv argc
)

    TlFormatByVarTable (
        dest, // dest
        bufsize, // bufsize
        fmt, // fmt
        argv, // argv
        argc, // argc
    )
END

FN TlError (
    IN fmt : ^UBYTE,
    ... argv argc
)

    TlPrintByHandle (
        TlStdErr, // handle
        "%s: ", // fmt
        TlProgramName,
    )

    TlPrintByVarTable (
        TlStdErr, // handle
        fmt, // fmt
        argv, // argv
        argc, // argc
    )

    TlErrorExit ()
END

FN TlInternalError (
    IN str : ^UBYTE,
    IN err1 : UWORD,
    IN err2 : UWORD,
    IN err3 : UWORD,
)

    TlError ( "Internal tool error: %s (%d %d %d)\n", str, err1, err2, err3 )
END

FN TlUserError (
    IN str : ^UBYTE,
    IN err1 : UWORD,
    IN err2 : UWORD,
    IN err3 : UWORD,
)

    TlError ( "User error: %s (%d %d %d)\n", str, err1, err2, err3 )
END