#IF ( == BITS 64 )
    #DEFINE RTL_MACHINE_WORD_MAX 0xFFFFFFFFFFFFFFFF
    #DEFINE RTL_MACHINE_WORD_WIDTH 64
    #DEFINE RTL_MACHINE_WORD_LOG 3

#ELSEIF ( == BITS 32 )
    #DEFINE RTL_MACHINE_WORD_MAX 0xFFFFFFFF
    #DEFINE RTL_MACHINE_WORD_WIDTH 32
    #DEFINE RTL_MACHINE_WORD_LOG 2

#ELSE
    #ERROR ( STRCAT "[BLD] Bad bitness: " BITS )
#END

#IF ( STRCMP ARCHITECTURE "xr17032" )
    #DEFINE RTL_PAGE_SHIFT 12

#ELSEIF ( STRCMP ARCHITECTURE "fox32" )
    #DEFINE RTL_PAGE_SHIFT 12

#ELSE
    #ERROR ( STRCAT "[BLD] Unknown architecture: " ARCHITECTURE )
#END

#DEFINE RTL_MACHINE_WORD_SIZE ( << 1 RTL_MACHINE_WORD_LOG )

#DEFINE RTL_PAGE_SIZE ( << 1 RTL_PAGE_SHIFT )

#DEFINE RTL_ARCH_STRING ( STRCAT ( STRCAT "\"" ARCHITECTURE ) "\"" )

#MACRO RtlInitializeList ( head ) [
    listhead := (head)

    listhead^.Prev = listhead
    listhead^.Next = listhead
]

#MACRO RtlInsertAtTailList ( head, entry ) [
    listhead := (head)
    listentry := (entry)
    last := listhead^.Prev

    listentry^.Prev = last
    listentry^.Next = listhead
    last^.Next = listentry
    listhead^.Prev = listentry
]

#MACRO RtlInsertAtHeadList ( head, entry ) [
    listhead := (head)
    listentry := (entry)
    first := listhead^.Next

    listentry^.Next = first
    listentry^.Prev = listhead
    first^.Prev = (entry)
    listhead^.Next = (entry)
]

#MACRO RtlRemoveEntryList ( entry ) [
    listentry := (entry)

    prev := listentry^.Prev
    next := listentry^.Next
    prev^.Next = next
    next^.Prev = prev
]

STRUCT RtlListEntry
    Next : ^RtlListEntry,
    Prev : ^RtlListEntry,
END

STRUCT RtlBitmapHeader
    Data : ^UBYTE,
    SizeInBits : UWORD,
END

FNPTR RtlPrintCallbackF (
    IN byte : UBYTE,
    IN context : ^VOID,
)

EXTERN FN RtlFillMemoryWithUlong (
    IN dest : ^VOID,
    IN size : UWORD,
    IN ulong : ULONG,
)

EXTERN FN RtlCopyBytes (
    IN dest : ^VOID,
    IN src : ^VOID,
    IN size : UWORD,
)

EXTERN FN RtlMoveBytes (
    IN dest : ^VOID,
    IN src : ^VOID,
    IN size : UWORD,
)

EXTERN FN RtlPrintByCallbackByVarTable (
    IN callback : RtlPrintCallbackF,
    IN context : ^VOID,
    IN fmt : ^UBYTE,
    IN argv : ^^VOID,
    IN argc : UWORD,
)

EXTERN FN RtlPrintByCallback (
    IN callback : RtlPrintCallbackF,
    IN context : ^VOID,
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN RtlPrintByVarTable (
    IN handle : ^VOID,
    IN fmt : ^UBYTE,
    IN argv : ^^VOID,
    IN argc : UWORD,
)

EXTERN FN RtlPrintByHandle (
    IN handle : ^VOID,
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN RtlPrint (
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN RtlFormatByVarTable (
    IN dest : ^UBYTE,
    IN bufsize : UWORD,
    IN fmt : ^UBYTE,
    IN argv : ^^VOID,
    IN argc : UWORD,
)

EXTERN FN RtlFormat (
    IN dest : ^UBYTE,
    IN bufsize : UWORD,
    IN fmt : ^UBYTE,
    ... argv argc
)

EXTERN FN RtlStringToNumber (
    IN src : ^UBYTE,
    IN bufsize : UWORD,
    OUT num : UWORD,
) : UWORD

EXTERN FN RtlCompareString (
    IN str1 : ^UBYTE,
    IN str2 : ^UBYTE,
) : UWORD

EXTERN FN RtlCompareStringWithMax (
    IN str1 : ^UBYTE,
    IN str2 : ^UBYTE,
    IN count : UWORD,
) : UWORD

EXTERN FN RtlMeasureString (
    IN str : ^UBYTE,
) : UWORD

EXTERN FN RtlCopyString (
    IN dest : ^UBYTE,
    IN src : ^UBYTE,
    IN bufsize : UWORD,
)

EXTERN FN RtlTokenize (
    IN buffer : ^UBYTE,
    IN tokenbuffer : ^UBYTE,
    IN bufsize : UWORD,
    IN delimiter : UBYTE,
) : ^UBYTE

EXTERN FN (RtlPrintCallbackF) RtljPrintCallback (
    IN byte : UBYTE,
    IN context : ^VOID,
)


// Bitmap stuff


EXTERN FN RtlInitializeBitmap (
    IN header : ^RtlBitmapHeader,
    IN sizeinbits : UWORD,
    IN data : ^UBYTE,
)

EXTERN FN RtlDumpBitmap (
    IN header : ^RtlBitmapHeader,
)

EXTERN FN RtlClearBitmap (
    IN header : ^RtlBitmapHeader,
)

EXTERN FN RtlFindRunBitmap (
    IN header : ^RtlBitmapHeader,
    IN runlength : UWORD,
    IN hint : UWORD,
) : UWORD

EXTERN FN RtlSetBitsBitmap (
    IN header : ^RtlBitmapHeader,
    IN index : UWORD,
    IN runlength : UWORD,
)

EXTERN FN RtlClearBitsBitmap (
    IN header : ^RtlBitmapHeader,
    IN index : UWORD,
    IN runlength : UWORD,
)

EXTERN FN RtlGetBitBitmap (
    IN header : ^RtlBitmapHeader,
    IN index : UWORD,
) : UWORD

EXTERN FN RtlCheckClearBitsBitmap (
    IN header : ^RtlBitmapHeader,
    IN index : UWORD,
    IN runlength : UWORD,
) : UWORD


// Path stuff


EXTERN FN RtlGetPathExtension (
    IN path : ^UBYTE,
) : ^UBYTE

EXTERN FN RtlGetFileName (
    IN path : ^UBYTE,
) : ^UBYTE