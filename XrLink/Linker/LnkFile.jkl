//
// Implements support routines for loading and validating an XLO object.
//

#INCLUDE "<inc>/Linker.hjk"

PUBLIC LnkArchitectureType := 0
PUBLIC LnkArchitectureInTokyo := 0
PUBLIC LnkArchitecturePageMask := 0
PUBLIC LnkObjectFileAlignmentMask := 0

LnkArchitectureBitTable : UWORD[XLO_ARCHITECTURE_MAX] = {
    [XLO_ARCHITECTURE_XR17032] = 32,
    [XLO_ARCHITECTURE_FOX32] = 32,
    [XLO_ARCHITECTURE_APHELION] = 64,
    [XLO_ARCHITECTURE_AMD64] = 64,
}

LnkArchitecturePageMaskTable : UWORD[XLO_ARCHITECTURE_MAX] = {
    [XLO_ARCHITECTURE_XR17032] = 0xFFF,
    [XLO_ARCHITECTURE_FOX32] = 0xFFF,
    [XLO_ARCHITECTURE_APHELION] = 0x3FFF,
    [XLO_ARCHITECTURE_AMD64] = 0xFFF,
}

FN LnkLoadXloFile (
    IN filename : ^UBYTE,
) : ^UBYTE

    // First, open the object file.

    handle : ^VOID

    status := TlOpenSource (
        filename, // filename
        OUT handle, // handle
    )

    IF status THEN
        TlError ( "%s: Failed to open object file\n", filename )

    END

    // Now stat the file to acquire the size.

    statrecord : TlStatRecord

    IF TlStatFile (
        filename, // path
        &statrecord, // statrecord
    ) THEN
        TlInternalError ( "Failed to stat object file", 0, 0, 0 )
    END

    // Allocate a buffer to contain the file contents.

    ptr : ^UBYTE

    status = TlAlloc (
        statrecord.SizeInBytes, // bytes
        OUT ptr, // ptr
    )

    // Read the file.

    TlReadFile (
        handle, // handle
        statrecord.SizeInBytes, // bytes
        ptr, // buffer
    )

    // Now basically validate the header.

    header := CAST ptr TO ^XloHeader

    IF header^.Magic != XLO_MAGIC_NUMBER THEN
        TlError ( "%s: Not a valid XLO object file\n", filename )
    END

    IF NOT LnkArchitectureType THEN
        LnkArchitectureType = header^.TargetArchitecture

        IF header^.TargetArchitecture >= XLO_ARCHITECTURE_MAX THEN
            TlError ( "%s: Unknown architecture type (%d)\n",
                filename, header^.TargetArchitecture )
        END

        LnkArchitecturePageMask =
            LnkArchitecturePageMaskTable[LnkArchitectureType]

        LnkArchitectureInTokyo = LnkArchitectureBitTable[LnkArchitectureType]

        IF NOT LnkArchitectureInTokyo THEN
            TlError ( "%s: Unknown architecture type (%d)\n",
                filename, header^.TargetArchitecture )
        END

#IF ( == BLD_BITS 32 )
        IF LnkArchitectureInTokyo == 64 THEN
            TlError ( "%s: Can't link 64-bit files using 32-bit linker build\n",
                filename )
        END
#END

        IF LnkArchitectureInTokyo == 64 THEN
            LnkObjectFileAlignmentMask = 7

        ELSE
            LnkObjectFileAlignmentMask = 3
        END

    ELSEIF LnkArchitectureType != header^.TargetArchitecture THEN
        TlError ( "%s: Architecture incompatible with other object files\n",
            filename )
    END

    RETURN ptr
END