//
// Link stuff.
//

#INCLUDE "<inc>/Linker.hjk"

LnkObjectListHead : TlListEntry
LnkLibListHead : TlListEntry
LnkSectionTable : TlHashTable

STRUCT LnkObject
    Entry : TlListEntry,

    Path : ^UBYTE,
    Data : ^UBYTE,
END

STRUCT LnkLibrary
    Entry : TlListEntry,

    Path : ^UBYTE,
    Data : ^UBYTE,
END

STRUCT LnkSection
    Entry : TlHashTableEntry,

    Name : ^UBYTE,
    Size : UWORD,
    Flags : UWORD,
END

FN LnkFindSection (
    IN name : ^UBYTE,
    IN flags : ^UWORD,
) : ^LnkSection

    // 
END

FN LnkAddStaticObject (
    IN filename : ^UBYTE,
)

    // Allocate an object block.
    // N.B. filename must be in permanent memory.

    object : ^LnkObject

    status := TlBumpAlloc (
        SIZEOF LnkObject, // bytes
        OUT object, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate object block", 0, 0, 0 )
    END

    // Load the static object.

    object^.Data = LnkLoadXloFile ( filename )
    object^.Path = filename

    // Insert in list.

    TlInsertAtTailList (
        &LnkObjectListHead, // head
        &object^.Entry, // entry
    )
END

FN LnkAddDynamicObject (
    IN filename : ^UBYTE,
)

    // Allocate a library block.
    // N.B. filename must be in permanent memory.

    library : ^LnkLibrary

    status := TlBumpAlloc (
        SIZEOF LnkLibrary, // bytes
        OUT library, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate library block", 0, 0, 0 )
    END

    // Load the dynamic library.

    library^.Data = LnkLoadXloFile ( filename )
    library^.Path = filename

    // Insert in list.

    TlInsertAtTailList (
        &LnkLibListHead, // head
        &library^.Entry, // entry
    )
END

FN LnkLinkObject ()

    // Link the final object.

END

FN LnkInitializeDatabase ()

    // Initialize the linker database.

    TlInitializeList ( &LnkObjectListHead )
    TlInitializeList ( &LnkLibListHead )
    TlInitializeHashTable ( &LnkSectionTable )
END