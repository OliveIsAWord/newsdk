//
// Linker initialization.
//

#INCLUDE "<inc>/Linker.hjk"

FN LnkUsage ()
    TlPrintByHandle (
        TlStdErr, // handle
        "Usage: %s <command> <options ...>

Commands:
  info <imagename>: Print miscellaneous information about the image file.
  symbols <imagename>: Dump the symbol table.
  externs <imagename>: Dump the extern table.
  relocs <imagename>: Dump the relocation table for each section.
  fixups <imagename>: Dump the fixup table.
  imports <imagename>: Dump the import table.
  link <outputname> [objects ...] [-d <shared libs ...>]
   [-move:section1=expr,section2=expr,...] XOR [-base:addr] XOR [-mapbase:addr]
   [-keepglobals] [-striprelocs] [-nostubs] [-fragment] [-bin] [-fxf] [-xlo]\n", // fmt
        TlProgramName,
    )

    TlErrorExit ()
END

PUBLIC LnkOutputName : ^UBYTE = NULLPTR
PUBLIC LnkKeepGlobals := FALSE
PUBLIC LnkStripRelocs := FALSE
PUBLIC LnkCreateStubs := TRUE
PUBLIC LnkCreateFragment := FALSE
PUBLIC LnkCreateBin := FALSE
PUBLIC LnkBaseAddress := 0
PUBLIC LnkMoveExpression : ^UBYTE = NULLPTR
PUBLIC LnkMappedBase := FALSE
PUBLIC LnkCreateFxf := FALSE
PUBLIC LnkPageAligned := FALSE

EXTERN FN LnkInitializeDatabase ()

FN LnkLinkStuff (
    IN argc : ULONG,
    IN argv : ^^UBYTE,
)

    // Initialize the linker database.

    LnkInitializeDatabase ()

    // Parse the link command line and then link stuff.

    static := TRUE
    foundoutput := FALSE
    dynamicadded := FALSE
    explicitformat := FALSE

    i := 2

    WHILE i < argc DO
        IF argv[i][0] == '-' THEN
            // It's an option.

            IF TlCompareString ( argv[i], "-keepglobals" ) == 0 THEN
                LnkKeepGlobals = TRUE

            ELSEIF TlCompareString ( argv[i], "-striprelocs" ) == 0 THEN
                LnkStripRelocs = TRUE

            ELSEIF TlCompareString ( argv[i], "-nostubs" ) == 0 THEN
                LnkCreateStubs = FALSE

            ELSEIF TlCompareString ( argv[i], "-fragment" ) == 0 THEN
                LnkCreateFragment = TRUE

            ELSEIF TlCompareString ( argv[i], "-bin" ) == 0 THEN
                LnkCreateBin = TRUE
                explicitformat = TRUE

            ELSEIF TlCompareString ( argv[i], "-fxf" ) == 0 THEN
                LnkCreateBin = TRUE
                LnkCreateFxf = TRUE
                explicitformat = TRUE

            ELSEIF TlCompareString ( argv[i], "-xlo" ) == 0 THEN
                LnkCreateBin = FALSE
                LnkCreateFxf = FALSE
                explicitformat = TRUE

            ELSEIF TlCompareString ( argv[i], "-d" ) == 0 THEN
                static = FALSE

            ELSEIF TlCompareStringWithMax ( argv[i], "-move:", 6 ) == 0 THEN
                IF LnkMappedBase OR LnkBaseAddress THEN
                    LnkUsage ()
                END

                LnkMoveExpression = &argv[i][6]

            ELSEIF TlCompareStringWithMax ( argv[i], "-base:", 6 ) == 0 THEN
                IF LnkMoveExpression OR LnkMappedBase THEN
                    LnkUsage ()
                END

                IF NOT TlStringToNumber (
                    &argv[i][6], // src
                    -1, // bufsize
                    OUT LnkBaseAddress, // num
                ) THEN
                    LnkUsage ()
                END

                LnkPageAligned = FALSE

            ELSEIF TlCompareStringWithMax ( argv[i], "-pabase:", 8 ) == 0 THEN
                IF LnkMoveExpression OR LnkMappedBase THEN
                    LnkUsage ()
                END

                IF NOT TlStringToNumber (
                    &argv[i][8], // src
                    -1, // bufsize
                    OUT LnkBaseAddress, // num
                ) THEN
                    LnkUsage ()
                END

                LnkPageAligned = TRUE

            ELSEIF TlCompareStringWithMax ( argv[i], "-mappedbase:", 12 ) == 0 THEN
                IF LnkMoveExpression OR LnkBaseAddress THEN
                    LnkUsage ()
                END

                IF NOT TlStringToNumber (
                    &argv[i][12], // src
                    -1, // bufsize
                    OUT LnkBaseAddress, // num
                ) THEN
                    LnkUsage ()
                END

                LnkMappedBase = TRUE

            ELSE
                LnkUsage ()
            END

        ELSE
            // It's an object file name.

            IF NOT foundoutput THEN
                // It's the output file.

                LnkOutputName = argv[i]

                foundoutput = TRUE

            ELSEIF static THEN
                // It's one of the statically linked objects.

                LnkAddStaticObject ( argv[i] )

            ELSE
                // It's a dynamic library.

                LnkAddDynamicObject ( argv[i] )

                dynamicadded = TRUE
            END
        END

        i += 1
    END

    // Reject illegal combinations of arguments.

    IF NOT LnkOutputName THEN
        // Must supply an output name.

        LnkUsage ()
    END

    IF NOT LnkArchitectureType THEN
        // No static objects were supplied.

        LnkUsage ()
    END

    IF LnkCreateBin AND (dynamicadded OR LnkCreateFragment) THEN
        // Can't add dynamic libraries or create fragment if -bin specified.

        LnkUsage ()
    END

    IF LnkCreateFragment AND (dynamicadded OR
        LnkMappedBase OR LnkMoveExpression OR LnkBaseAddress) THEN

        // Can't add dynamic libraries or relocate sections if generating a
        // fragment.

        LnkUsage ()
    END

    IF LnkCreateBin AND LnkMappedBase THEN
        // Can't do mappedbase if binary output.

        LnkUsage ()
    END

    IF NOT explicitformat THEN
        // Guess the format by the extension.

        ext := TlGetPathExtension ( LnkOutputName )

        IF TlCompareString ( ext, "bin" ) == 0 THEN
            LnkCreateBin = TRUE

        ELSEIF TlCompareString ( ext, "fxf" ) == 0 THEN
            LnkCreateFxf = TRUE
            LnkCreateBin = TRUE
        END
    END

    // Now call the linker.

    LnkLinkObject ()
END

FN TlMain (
    IN argc : ULONG,
    IN argv : ^^UBYTE,
)

    // Dispatch to the correct command.

    IF argc < 3 THEN
        LnkUsage ()
    END

    cmd := argv[1]

    IF TlCompareString ( cmd, "info" ) == 0 THEN
        LnkDumpInfo ( argv[2] )

    ELSEIF TlCompareString ( cmd, "symbols" ) == 0 THEN
        LnkDumpSymbols ( argv[2] )

    ELSEIF TlCompareString ( cmd, "externs" ) == 0 THEN
        LnkDumpExterns ( argv[2] )

    ELSEIF TlCompareString ( cmd, "relocs" ) == 0 THEN
        LnkDumpRelocs ( argv[2] )

    ELSEIF TlCompareString ( cmd, "fixups" ) == 0 THEN
        LnkDumpFixups ( argv[2] )

    ELSEIF TlCompareString ( cmd, "imports" ) == 0 THEN
        LnkDumpImports ( argv[2] )

    ELSEIF TlCompareString ( cmd, "link" ) == 0 THEN
        LnkLinkStuff ( argc, argv )

    ELSE
        LnkUsage ()
    END
END