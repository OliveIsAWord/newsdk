//
// Resizing array implementation for building byte buffers.
//

#INCLUDE "<inc>/Runtime.hjk"

FN TlInitializeDynamicBuffer (
    IN array : ^TlDynamicBuffer,
)

    array^.Count = 0
    array^.BufferSize = TL_DYNAMIC_BUFFER_INITIAL
    array^.Buffer = &array^.InitialBuffer[0]
END

FN TlUninitializeDynamicBuffer (
    IN array : ^TlDynamicBuffer,
)

    // Free the old buffer if it wasn't the initial inlined one.

    IF array^.BufferSize != TL_DYNAMIC_BUFFER_INITIAL THEN
        TlFree ( array^.Buffer )
    END
END

FN TlInsertDynamicBuffer (
    IN array : ^TlDynamicBuffer,
    IN byte : UBYTE,
)

    IF array^.Count + 1 < array^.BufferSize THEN
        // There's enough space in the buffer already.

        array^.Buffer[array^.Count] = byte
        array^.Count += 1

        LEAVE
    END 

    // There's not enough space. We have to grow the buffer.
    // Grow the buffer by allocating a new one of double the length,
    // copying everything into it, and then freeing the old one.

    newbuffer : ^UBYTE

    status := TlAlloc (
        array^.BufferSize * 2, // bytes
        &newbuffer, // OUT ptr
    )

    IF status THEN
        TlInternalError ( "Failed to grow dynamic buffer", 0, 0, 0 )
    END

    TlCopyMemory (
        newbuffer, // dest
        array^.Buffer, // src
        array^.BufferSize, // sz
    )

    // Free the old buffer if it wasn't the initial inlined one.

    IF array^.BufferSize != TL_DYNAMIC_BUFFER_INITIAL THEN
        TlFree ( array^.Buffer )
    END

    array^.Buffer = newbuffer
    array^.BufferSize *= 2

    array^.Buffer[array^.Count] = byte
    array^.Count += 1
END

FN TlCopyIntoDynamicBuffer (
    IN array : ^TlDynamicBuffer,
    IN srcbuf : ^UBYTE,
    IN length : ULONG,
)

    // Copy from the source buffer into the dynamic buffer.

    IF array^.Count + length < array^.BufferSize THEN
        // There's enough space in the buffer already. Do the copy directly.

        TlCopyMemory (
            &array^.Buffer[array^.Count], // dest
            srcbuf, // src
            length, // sz
        )

        array^.Count += length

        LEAVE
    END

    // There's not enough space. We have to grow the buffer.
    // Grow the buffer by allocating a new one of double the length,
    // copying everything into it, and then freeing the old one.

    newlength := array^.BufferSize * 2

    WHILE array^.Count + length > newlength DO
        // Double until the new length is great enough to contain the string.

        newlength *= 2
    END

    newbuffer : ^UBYTE

    status := TlAlloc (
        newlength, // bytes
        &newbuffer, // OUT ptr
    )

    IF status THEN
        TlInternalError ( "Failed to grow dynamic buffer", 0, 0, 0 )
    END

    TlCopyMemory (
        newbuffer, // dest
        array^.Buffer, // src
        array^.Count, // sz
    )

    // Free the old buffer if it wasn't the initial inlined one.

    IF array^.BufferSize != TL_DYNAMIC_BUFFER_INITIAL THEN
        TlFree ( array^.Buffer )
    END

    array^.Buffer = newbuffer
    array^.BufferSize = newlength

    TlCopyMemory (
        &newbuffer[array^.Count], // dest
        srcbuf, // src
        length, // sz
    )

    array^.Count += length
END

FN TlInsertNumberDynamicBuffer (
    IN array : ^TlDynamicBuffer,
    IN number : ULONG,
    IN base : UBYTE,
)

    IF base != 10 THEN
        TlInternalError ( "Only base 10 supported", 0, 0, 0 )
    END

    IF number == 0 THEN
        TlInsertDynamicBuffer (
            array, // array
            '0', // byte
        )

        LEAVE
    END

    log10 := 0
    divisor := 1
    n := number

    WHILE n >= 10 DO
        divisor *= 10
        n /= 10
        log10 += 1
    END

    log10 += 1

    WHILE log10 DO
        TlInsertDynamicBuffer (
            array, // array
            '0' + (number / divisor) % 10, // byte
        )

        log10 -= 1
        divisor /= 10
    END
END

FN TlPopDynamicBuffer (
    IN array : ^TlDynamicBuffer,
) : UBYTE

    // Pop the last value inserted into the dynamic buffer. Allows abuse of it
    // as a simple stack of bytes.

    IF NOT array^.Count THEN
        RETURN 0
    END

    array^.Count -= 1

    RETURN array^.Buffer[array^.Count]
END