//
// Host-specific runtime functions.
// These are mostly just a bunch of wrapper functions, around libc for the C
// transpilation host, and around Rtl for the MINTIA host.
//

#INCLUDE "<inc>/Runtime.jh"

EXTERN FN exit (
    IN status : _int,
)

EXTERN FN malloc (
    IN size : ULONG,
) : ^VOID

EXTERN FN free (
    IN ptr : ^VOID,
)

EXTERN FN strcmp (
    IN s1 : ^_char,
    IN s2 : ^_char,
) : _int

EXTERN FN strncmp (
    IN s1 : ^_char,
    IN s2 : ^_char,
    IN n : ULONG,
) : _int

EXTERN FN fopen (
    IN path : ^_char,
    IN mode : ^_char,
) : ^VOID

EXTERN FN fclose (
    IN stream : ^VOID,
) : ^_int

EXTERN FN fread (
    IN ptr : ^VOID,
    IN size : ULONG,
    IN nitems : ULONG,
    IN stream : ^VOID,
) : ULONG

EXTERN FN fwrite (
    IN ptr : ^VOID,
    IN size : ULONG,
    IN nitems : ULONG,
    IN stream : ^VOID,
) : ULONG

EXTERN FN memset (
    IN ptr : ^VOID,
    IN c : _int,
    IN len : ULONG,
) : ^VOID

EXTERN FN memcpy (
    IN dest : ^VOID,
    IN src : ^VOID,
    IN sz : ULONG,
) : ^VOID

FN TlFillMemoryWithByte (
    IN ptr : ^VOID,
    IN sz : ULONG,
    IN byte : UBYTE,
)

    memset (
        ptr, // ptr
        byte, // c
        sz, // len
    )
END

FN TlCopyMemory (
    IN dest : ^VOID,
    IN src : ^VOID,
    IN sz : ULONG,
)

    memcpy (
        dest, // dst
        src, // src
        sz, // sz
    )
END

FN TlErrorExit ()

    exit ( 1 )
END

FN TlAlloc (
    IN bytes : ULONG,
    OUT ptr : ^^VOID,
) : TlStatus

    ptr^ = malloc ( bytes )

    IF ptr^ == 0 THEN
        RETURN TL_NO_MEMORY
    END

    RETURN TL_SUCCESS
END

FN TlFree (
    IN ptr : ^VOID,
)

    free ( ptr )
END

TlBumpPtr := NULLPTR
TlBumpBytesLeft : ULONG = 0

CONST TL_BUMP_EXTEND : ULONG = 65536

FN TlBumpAlloc (
    IN bytes : ULONG,
    OUT ptr : ^^VOID,
) : TlStatus

    // Eternal bump allocator for accelerating some stuff.
    // First align to 8 bytes, assuming a 64-bit C host.

    bytes += 7
    bytes &= ~7

    IF bytes <= TlBumpBytesLeft THEN
        ptr^ = TlBumpPtr

        TlBumpPtr += bytes
        TlBumpBytesLeft -= bytes

        RETURN TL_SUCCESS
    END

    IF bytes >= TL_BUMP_EXTEND THEN
        ptr^ = malloc ( bytes )

        IF ptr^ == 0 THEN
            RETURN TL_NO_MEMORY
        END

        RETURN TL_SUCCESS
    END

    TlBumpPtr = malloc ( TL_BUMP_EXTEND )

    IF NOT TlBumpPtr THEN
        RETURN TL_NO_MEMORY
    END

    ptr ^= TlBumpPtr

    TlBumpBytesLeft = TL_BUMP_EXTEND - bytes
    TlBumpPtr += bytes

    RETURN TL_SUCCESS
END

FN TlCompareString (
    IN str1 : ^UBYTE,
    IN str2 : ^UBYTE,
) : ULONG

    RETURN strcmp ( str1, str2 )
END

FN TlCompareStringWithMax (
    IN str1 : ^UBYTE,
    IN str2 : ^UBYTE,
    IN count : ULONG,
) : ULONG

    RETURN strncmp ( str1, str2, count )
END

FN TlCopyString (
    IN dest : ^UBYTE,
    IN src : ^UBYTE,
    IN bufsize : ULONG,
)
    IF NOT bufsize THEN
        LEAVE
    END

    WHILE bufsize - 1 DO
        dest^ = src^

        dest += 1
        src += 1
        bufsize -= 1

        IF src^ == 0 THEN
            BREAK
        END
    END

    dest^ = 0
END

FN TlOpenSource (
    IN filename : ^UBYTE,
    OUT handle : ^^VOID,
) : TlStatus

    handle^ = fopen ( filename, "r" )

    IF handle^ == 0 THEN
        RETURN TL_COULDNT_OPEN
    END

    RETURN TL_SUCCESS
END

FN TlOpenDestination (
    IN filename : ^UBYTE,
    OUT handle : ^^VOID,
) : TlStatus

    handle^ = fopen ( filename, "w" )

    IF handle^ == 0 THEN
        RETURN TL_COULDNT_OPEN
    END

    RETURN TL_SUCCESS
END

FN TlClose (
    IN handle : ^VOID,
)

    fclose ( handle )
END

FN TlReadFile (
    IN handle : ^VOID,
    IN bytes : ULONG,
    IN buffer : ^VOID,
) : ULONG

    // XXX make sure to check for errors on hosts where that is more
    // applicable.

    RETURN fread ( buffer, 1, bytes, handle )
END

FN TlWriteFile (
    IN handle : ^VOID,
    IN bytes : ULONG,
    IN buffer : ^VOID,
) : ULONG

    // XXX make sure to check for errors on hosts where that is more
    // applicable.

    RETURN fwrite ( buffer, 1, bytes, handle )
END