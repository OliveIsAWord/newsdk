//
// Simple hash table implementation for faster symbol lookup.
//

#INCLUDE "<inc>/Runtime.hjk"

FN TlInitializeHashTable (
    IN hashtable : ^TlHashTable,
)

    hashtable^.OrderedListHead = NULLPTR

    TlFillMemoryWithByte (
        &hashtable^.BucketHeads, // ptr
        SIZEOFVALUE hashtable^.BucketHeads, // sz
        0, // byte
    )
END

FN TlSummarizeHashTable (
    IN hashtable : ^TlHashTable,
)

    // Helpful debug function.
    // Prints a summary of the hash table so that we can see the collisions.

    i := 0

    WHILE i < TL_HASH_SIZE DO
        entries := 0

        entry := hashtable^.BucketHeads[i]

        WHILE entry DO
            entries += 1

            entry = entry^.Next
        END

        IF entries THEN
            TlPrintNumber ( i )
            TlPrintString ( ": " )
            TlPrintNumber ( entries )
            TlPrintString ( "\n" )
        END

        i += 1
    END
END

FN TlInsertHashTableByHash (
    IN hashtable : ^TlHashTable,
    IN entry : ^TlHashTableEntry,
    IN key : ^UBYTE,
    IN hash : ULONG,
)

    head := hashtable^.BucketHeads[hash]

    entry^.HashTable = hashtable
    entry^.Key = key
    entry^.Hash = hash

    // Insert entry into doubly linked hash bucket list, at the head.

    entry^.Prev = NULLPTR
    entry^.Next = head

    IF head THEN
        head^.Prev = entry
    END

    hashtable^.BucketHeads[hash] = entry

    // Insert entry into ordered list, at the head.

    head = hashtable^.OrderedListHead

    entry^.PrevOrdered = NULLPTR
    entry^.NextOrdered = head

    IF head THEN
        head^.Prev = entry
    END

    hashtable^.OrderedListHead = entry
END

FN TlInsertHashTable (
    IN hashtable : ^TlHashTable,
    IN entry : ^TlHashTableEntry,
    IN key : ^UBYTE,
)

    // Caller needs to guarantee that the memory in which the key resides sticks
    // around until such time as the entry is removed from the hash table.

    hash := TlHashString ( key )

    TlInsertHashTableByHash (
        hashtable, // hashtable
        entry, // entry
        key, // key
        hash, // hash
    )
END

FN TlLookupOrAllocateEntryHashTable (
    IN hashtable : ^TlHashTable,
    IN entrysize : UWORD,
    IN key : ^UBYTE,
    OUT created : ^UBYTE,
) : ^TlHashTableEntry

    // Look up the key in the hash table. If it's present, return it. Otherwise,
    // insert a new entry. This may seem redundant, but this avoids the cost of
    // a second hash and an extra function call in the insertion case.

    hash := TlHashString ( key )

    head := hashtable^.BucketHeads[hash]
    entry := head

    WHILE entry DO
        IF TlCompareString ( key, entry^.Key ) == 0 THEN
            created^ = FALSE

            RETURN entry
        END

        entry = entry^.Next
    END

    // Not found! Allocate one.

    status := TlBumpAlloc (
        entrysize, // bytes
        &entry, // OUT ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate entry", 0, 0, 0 )
    END

    TlInsertHashTableByHash (
        hashtable, // hashtable
        entry, // entry
        key, // key
        hash, // hash
    )

    created^ = TRUE

    RETURN entry
END

FN TlLookupOrInsertHashTable (
    IN hashtable : ^TlHashTable,
    IN entry : ^TlHashTableEntry,
    IN key : ^UBYTE,
) : ^TlHashTableEntry

    // Look up the key in the hash table. If it's present, return it. Otherwise,
    // insert the provided entry. This may seem redundant, but this avoids the
    // cost of a second hash and an extra function call in the insertion case.

    hash := TlHashString ( key )

    head := hashtable^.BucketHeads[hash]
    oldentry := head

    WHILE oldentry DO
        IF TlCompareString ( key, oldentry^.Key ) == 0 THEN
            RETURN oldentry
        END

        oldentry = oldentry^.Next
    END

    // Not found!

    TlInsertHashTableByHash (
        hashtable, // hashtable
        entry, // entry
        key, // key
        hash, // hash
    )

    RETURN entry
END

FN TlLookupHashTableByHash (
    IN hashtable : ^TlHashTable,
    IN key : ^UBYTE,
    IN hash : ULONG,
) : ^TlHashTableEntry

    entry := hashtable^.BucketHeads[hash]

    WHILE entry DO
        IF TlCompareString ( key, entry^.Key ) == 0 THEN
            RETURN entry
        END

        entry = entry^.Next
    END

    RETURN NULLPTR
END

FN TlLookupHashTable (
    IN hashtable : ^TlHashTable,
    IN key : ^UBYTE,
) : ^TlHashTableEntry

    hash := TlHashString ( key )

    RETURN TlLookupHashTableByHash (
        hashtable, // hashtable
        key, // key
        hash, // hash
    )
END

FN TlRemoveHashTable (
    IN entry : ^TlHashTableEntry,
)

    hashtable := entry^.HashTable
    hash := entry^.Hash

    // Remove entry from doubly linked hash bucket list.

    p := entry^.Prev

    IF p THEN
        p^.Next = entry^.Next
    ELSE // no prev means we were the head
        hashtable^.BucketHeads[hash] = entry^.Next
    END

    p = entry^.Next

    IF p THEN
        p^.Prev = entry^.Prev
    END

    // Remove entry from doubly linked ordered list.

    p = entry^.PrevOrdered

    IF p THEN
        p^.NextOrdered = entry^.NextOrdered
    ELSE // no prev means we were the head
        hashtable^.OrderedListHead = entry^.NextOrdered
    END

    p = entry^.NextOrdered

    IF p THEN
        p^.PrevOrdered = entry^.PrevOrdered
    END
END

FN TlEnumerateHashTable (
    IN hashtable : ^TlHashTable,
    IN enumfunc : TlHashTableEnumeratorF,
)

    entry := hashtable^.OrderedListHead

    WHILE entry DO
        // Capture the next entry now since the enumeration function might
        // destroy this entry.

        nextentry := entry^.Next

        enumfunc ( entry )

        entry = nextentry
    END
END

FN TlHashString (
    IN str : ^UBYTE,
) : ULONG

    hash : ULONG = 0

    WHILE str^ DO
        hash += str^
        hash += hash << 10
        hash $= hash >> 6

        str += 1
    END

    hash += hash << 3
    hash $= hash >> 11
    hash += hash << 15

    hash %= TL_HASH_SIZE

    RETURN hash
END