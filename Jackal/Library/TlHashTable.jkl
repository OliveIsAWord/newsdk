//
// Simple hash table implementation for faster symbol lookup.
//

#INCLUDE "<inc>/Runtime.hjk"

FN TlInitializeHashTable (
    IN hashtable : ^TlHashTable,
)

    TlInitializeList ( &hashtable^.OrderedListHead )

    i := 0

    WHILE i < TL_HASH_SIZE DO
        TlInitializeList ( &hashtable^.BucketHeads[i] )

        i += 1
    END
END

FN TlSummarizeHashTable (
    IN hashtable : ^TlHashTable,
)

    // Helpful debug function.
    // Prints a summary of the hash table so that we can see the collisions.

    i := 0

    WHILE i < TL_HASH_SIZE DO
        entries := 0

        head := &hashtable^.BucketHeads[i]
        listentry := head^.Next

        WHILE listentry != head DO
            entries += 1

            listentry = listentry^.Next
        END

        IF entries THEN
            TlPrintNumber ( i )
            TlPrintString ( ": " )
            TlPrintNumber ( entries )
            TlPrintString ( "\n" )
        END

        i += 1
    END
END

FN TlInsertHashTableByHash (
    IN hashtable : ^TlHashTable,
    IN entry : ^TlHashTableEntry,
    IN key : ^UBYTE,
    IN hash : ULONG,
)

    entry^.HashTable = hashtable
    entry^.Key = key

    // Insert entry into doubly linked hash bucket list, at the head.

    TlInsertAtHeadList (
        &hashtable^.BucketHeads[hash], // head
        &entry^.HashEntry,
    )

    // Insert entry into ordered list, at the head.

    TlInsertAtHeadList (
        &hashtable^.OrderedListHead, // head
        &entry^.OrderedEntry, // entry
    )
END

FN TlInsertHashTable (
    IN hashtable : ^TlHashTable,
    IN entry : ^TlHashTableEntry,
    IN key : ^UBYTE,
)

    // Caller needs to guarantee that the memory in which the key resides sticks
    // around until such time as the entry is removed from the hash table.

    hash := TlHashString ( key )

    TlInsertHashTableByHash (
        hashtable, // hashtable
        entry, // entry
        key, // key
        hash, // hash
    )
END

FN TlLookupOrAllocateEntryHashTable (
    IN hashtable : ^TlHashTable,
    IN entrysize : UWORD,
    IN key : ^UBYTE,
    OUT created : UBYTE,
) : ^TlHashTableEntry

    // Look up the key in the hash table. If it's present, return it. Otherwise,
    // insert a new entry. This may seem redundant, but this avoids the cost of
    // a second hash and an extra function call in the insertion case.

    hash := TlHashString ( key )

    head := &hashtable^.BucketHeads[hash]
    listentry := head^.Next
    entry : ^TlHashTableEntry

    WHILE listentry != head DO
        entry = CONTAINEROF listentry TO TlHashTableEntry.HashEntry

        IF TlCompareString ( key, entry^.Key ) == 0 THEN
            created = FALSE

            RETURN entry
        END

        listentry = listentry^.Next
    END

    // Not found! Allocate one.

    status := TlBumpAlloc (
        entrysize, // bytes
        entry, // OUT ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate entry", 0, 0, 0 )
    END

    TlInsertHashTableByHash (
        hashtable, // hashtable
        entry, // entry
        key, // key
        hash, // hash
    )

    created = TRUE

    RETURN entry
END

FN TlLookupOrInsertHashTable (
    IN hashtable : ^TlHashTable,
    IN entry : ^TlHashTableEntry,
    IN key : ^UBYTE,
) : ^TlHashTableEntry

    // Look up the key in the hash table. If it's present, return it. Otherwise,
    // insert the provided entry. This may seem redundant, but this avoids the
    // cost of a second hash and an extra function call in the insertion case.

    hash := TlHashString ( key )

    head := &hashtable^.BucketHeads[hash]
    listentry := head^.Next

    WHILE listentry != head DO
        oldentry := CONTAINEROF listentry TO TlHashTableEntry.HashEntry

        IF TlCompareString ( key, oldentry^.Key ) == 0 THEN
            RETURN oldentry
        END

        listentry = listentry^.Next
    END

    // Not found!

    TlInsertHashTableByHash (
        hashtable, // hashtable
        entry, // entry
        key, // key
        hash, // hash
    )

    RETURN entry
END

FN TlLookupHashTableByHash (
    IN hashtable : ^TlHashTable,
    IN key : ^UBYTE,
    IN hash : UWORD,
) : ^TlHashTableEntry

    head := &hashtable^.BucketHeads[hash]
    listentry := head^.Next

    WHILE listentry != head DO
        entry := CONTAINEROF listentry TO TlHashTableEntry.HashEntry

        IF TlCompareString ( key, entry^.Key ) == 0 THEN
            RETURN entry
        END

        listentry = listentry^.Next
    END

    RETURN NULLPTR
END

FN TlLookupHashTable (
    IN hashtable : ^TlHashTable,
    IN key : ^UBYTE,
) : ^TlHashTableEntry

    hash := TlHashString ( key )

    RETURN TlLookupHashTableByHash (
        hashtable, // hashtable
        key, // key
        hash, // hash
    )
END

FN TlRemoveHashTable (
    IN entry : ^TlHashTableEntry,
)

    // Remove entry from doubly linked hash bucket list.

    TlRemoveEntryList (
        &entry^.HashEntry, // entry
    )

    // Remove entry from doubly linked ordered list.

    TlRemoveEntryList (
        &entry^.OrderedEntry, // entry
    )
END

FN TlEnumerateHashTable (
    IN hashtable : ^TlHashTable,
    IN enumfunc : TlHashTableEnumeratorF,
)

    head := &hashtable^.OrderedListHead
    listentry := head^.Next

    WHILE listentry != head DO
        // Capture the next entry now since the enumeration function might
        // destroy this entry.

        nextentry := listentry^.Next

        entry := CONTAINEROF listentry TO TlHashTableEntry.OrderedEntry

        enumfunc ( entry )

        listentry = nextentry
    END
END

FN TlHashString (
    IN str : ^UBYTE,
) : UWORD

    hash := 0

    WHILE str^ DO
        hash += str^
        hash += hash << 10
        hash $= hash >> 6

        str += 1
    END

    hash += hash << 3
    hash $= hash >> 11
    hash += hash << 15

    hash %= TL_HASH_SIZE

    RETURN hash
END