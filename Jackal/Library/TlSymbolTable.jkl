//
// Generic scoped symbol table implementation.
// Does not care what the "symbol" structure contains, as long as it has a
// TlHashTableEntry as a header. This is used for both the parser and also for
// macro expansion, where a concept of "scope" is useful for macro function
// arguments and nested expansion.
//

#INCLUDE "<inc>/Runtime.hjk"

TlSymbolTableZone : TlZone

FN TlInitializeSymbolTable (
    IN symboltable : ^TlSymbolTable,
    IN outerscope : ^TlSymbolTable,
    IN deletefunc : TlHashTableEnumeratorF,
)

    symboltable^.PrevScope = outerscope
    symboltable^.DeleteRoutine = deletefunc

    TlInitializeHashTable ( &symboltable^.HashTable )
END

FN TlCreateSymbolTable (
    IN outerscope : ^TlSymbolTable,
    IN deletefunc : TlHashTableEnumeratorF,
) : ^TlSymbolTable

    symboltable := CAST TlAllocateFromZone (
        &TlSymbolTableZone, // zone
    ) TO ^TlSymbolTable

    TlInitializeSymbolTable (
        symboltable, // symboltable
        outerscope, // outerscope
        deletefunc, // deletefunc
    )

    RETURN symboltable
END

FN TlDeleteSymbolTable (
    IN symboltable : ^TlSymbolTable,
) : ^TlSymbolTable

    outerscope := symboltable^.PrevScope

    TlEnumerateHashTable (
        &symboltable^.HashTable, // hashtable
        symboltable^.DeleteRoutine, // deletefunc
    )

    TlFreeToZone (
        &TlSymbolTableZone, // zone
        symboltable, // block
    )

    RETURN outerscope
END

FN TlLookupSymbolTable (
    IN symboltable : ^TlSymbolTable,
    IN name : ^UBYTE,
) : ^TlHashTableEntry

    // Calculate the hash only once.

    hash := TlHashString ( name )

    WHILE symboltable DO
        entry := TlLookupHashTableByHash (
            &symboltable^.HashTable, // hashtable
            name, // key
            hash, // hash
        )

        IF entry THEN
            RETURN entry
        END

        symboltable = symboltable^.PrevScope
    END

    RETURN NULLPTR
END

FN TlInsertSymbolTable (
    IN symboltable : ^TlSymbolTable,
    IN entry : ^TlHashTableEntry,
    IN name : ^UBYTE,
)

    TlInsertHashTable (
        &symboltable^.HashTable, // hashtable
        entry, // entry
        name, // key
    )
END

FN TlRemoveSymbolTable (
    IN entry : ^TlHashTableEntry,
)

    TlRemoveHashTable ( entry )
END