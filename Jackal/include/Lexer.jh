#INCLUDE "<inc>/Runtime.jh"
#INCLUDE "<inc>/Frontend.jh"

CONST LEX_PUTBACK_STACK_DEPTH := 4
CONST LEX_BUFFER_SIZE := 8192

ENUM LexTokenType : UBYTE
	TOKEN_IDENTIFIER, // payload is a symbol table entry pointer
	TOKEN_IF,
END

ENUM LexCharBehavior : UBYTE
	CHAR_NORMAL, // guaranteed to be zero
	CHAR_SPLIT,
	CHAR_COALESCE,
	CHAR_WHITESPACE,
END

STRUCT LexToken
	Payload : ^VOID,
	FileBlock : ^FeFileBlock,
	LineNumber : ULONG,
	Type : LexTokenType,
END

STRUCT LexStream
	Previous : ^LexStream,

	Buffer : ^UBYTE,
	BufferSize : ULONG,
	ValidLength : ULONG,
	BufferPosition : ULONG,

	LineNumber : ULONG,
	LinePosition : ULONG,

	IsMacro : UBYTE,
	LastWasNewline : UBYTE,
END

STRUCT LexFileStream
	Generic : LexStream, // must be at the beginning

	FileBlock : ^FeFileBlock,
END

STRUCT LexMacroStream
	Generic : LexStream, // must be at the beginning
END

EXTERN LexCharTreatment : LexCharBehavior[256]

EXTERN LexCurrentStream : ^LexStream
EXTERN LexCurrentMacroScope : ^TlSymbolTable
EXTERN LexFalseCount : ULONG

EXTERN LexPutbackStack : LexToken[LEX_PUTBACK_STACK_DEPTH]
EXTERN LexPutbackStackPtr : ULONG 

EXTERN FN LexInitialize () : TlStatus

EXTERN FN LexStreamInitialize (
	IN stream : ^LexStream,
	IN ismacro : UBYTE,
) : TlStatus

EXTERN FN LexStreamUninitialize (
	IN stream : ^LexStream,
)

EXTERN FN LexStreamFree (
	IN stream : ^LexStream,
)

EXTERN FN LexStreamPush (
	IN stream : ^LexStream,
)

EXTERN FN LexStreamPop () : ^LexStream

EXTERN FN LexFileStreamInitialize (
	IN filestream : ^LexFileStream,
	IN handle : ^VOID,
	IN filename : ^UBYTE,
) : TlStatus

EXTERN FN LexFileStreamCreate (
	IN handle : ^VOID,
	IN filename : ^UBYTE,
	OUT filestream : ^^LexFileStream,
) : TlStatus

EXTERN FN LexStreamGetLastFileStream () : ^LexFileStream

EXTERN FN LexStreamNextCharacter () : UBYTE

EXTERN FN LexParseDirective ()