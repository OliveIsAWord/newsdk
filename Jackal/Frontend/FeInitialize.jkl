//
// Frontend initialization.
//

#INCLUDE "<inc>/Parser.hjk"

PUBLIC FeLibraryDirectory : UBYTE[FE_PATH_BUFFER_SIZE]
PUBLIC FeIncludeDirectory : UBYTE[FE_PATH_BUFFER_SIZE]
PUBLIC FeInputFile : UBYTE[FE_PATH_BUFFER_SIZE]
PUBLIC FeOutputFile : UBYTE[FE_PATH_BUFFER_SIZE]
PUBLIC FeTargetString : UBYTE[FE_PATH_BUFFER_SIZE]

PUBLIC FeInputFileHandle : ^VOID
PUBLIC FeOutputFileHandle : ^VOID

PUBLIC JklTargetInfo : ^JklTargetInfoRecord = NULLPTR

FeFileBlockHashTable : TlHashTable

FN FeIsMacroArgument (
    IN arg : ^UBYTE,
) : ^UBYTE

    i := 0

    WHILE arg[i] DO
        IF arg[i] == '=' THEN
            RETURN &arg[i]
        END

        i += 1
    END

    RETURN NULLPTR
END

FN FeParseArguments (
    IN argc : ULONG,
    IN argv : ^UBYTE[],
)

    // Find the value of these arguments, if they exist:
    //  libdir=
    //  incdir=
    //  target=
    //
    // Identify the source and destination filenames.

    FeLibraryDirectory[0] = 0
    FeIncludeDirectory[0] = 0

    foundinput := FALSE
    foundoutput := FALSE
    foundtarget := FALSE

    i := 1

    WHILE i < argc DO
        IF TlCompareStringWithMax ( argv[i], "libdir=", 7 ) == 0 THEN
            TlCopyString (
                &FeLibraryDirectory[0], // dest
                &argv[i][7], // src
                FE_PATH_BUFFER_SIZE, // bufsize
            )

        ELSEIF TlCompareStringWithMax ( argv[i], "incdir=", 7 ) == 0 THEN
            TlCopyString (
                &FeIncludeDirectory[0], // dest
                &argv[i][7], // src
                FE_PATH_BUFFER_SIZE, // bufsize
            )

        ELSEIF TlCompareStringWithMax ( argv[i], "target=", 7 ) == 0 THEN
            TlCopyString (
                &FeTargetString[0], // dest
                &argv[i][7], // src
                FE_PATH_BUFFER_SIZE, // bufsize
            )

            foundtarget = TRUE

        ELSEIF FeIsMacroArgument ( argv[i] ) THEN
            LexDefineMacroFromArgumentString ( argv[i] )

        ELSEIF foundinput THEN
            IF foundoutput THEN
                TlUserError ( "Too many arguments specified!", 0, 0, 0 )
            END

            foundoutput = TRUE

            TlCopyString (
                &FeOutputFile[0], // dest
                argv[i], // src
                FE_PATH_BUFFER_SIZE, // bufsize
            )

        ELSE
            foundinput = TRUE

            TlCopyString (
                &FeInputFile[0], // dest
                argv[i], // src
                FE_PATH_BUFFER_SIZE, // bufsize
            )
        END

        i += 1
    END

    IF NOT foundinput THEN
        TlUserError ( "No input file specified.", 0, 0, 0 )
    END

    IF NOT foundoutput THEN
        TlUserError ( "No output file specified.", 0, 0, 0 )
    END

    IF NOT foundtarget THEN
        // Default is XR/17032.

        TlCopyString (
            &FeTargetString[0], // dest
            "XR/17032", // src
            FE_PATH_BUFFER_SIZE, // bufsize
        )
    END
END

FN FeCreateFileBlock (
    IN includename : ^UBYTE,
    OUT created : ^UBYTE,
) : ^FeFileBlock

    fileblock := CAST TlLookupOrAllocateEntryHashTable (
        &FeFileBlockHashTable, // hashtable
        SIZEOF FeFileBlock, // entrysize
        includename, // key
        created, // OUT created
    ) TO ^FeFileBlock

    IF created^ THEN
        // Initialize the file block, since it didn't already exist.

        TlCopyString (
            &fileblock^.IncludeName[0], // dest
            includename, // src
            FE_PATH_BUFFER_SIZE, // bufsize
        )

        // Manually set the key on the hash table entry, because the one we
        // passed in isn't permanent. If we left it like that, it'd try to use
        // random memory as the key for comparison later, which is bad.

        fileblock^.Entry.Key = &fileblock^.IncludeName[0]
    END

    RETURN fileblock
END

FN FeCopyPathFileBlock (
    IN fileblock : ^FeFileBlock,
    IN filepath : ^UBYTE,
)

    TlCopyString (
        &fileblock^.FilePath[0], // dest
        filepath, // src
        FE_PATH_BUFFER_SIZE, // bufsize
    )
END

FN JklCompileProgram (
    IN argc : ULONG,
    IN argv : ^UBYTE[],
)

    // Compile the entire program.

    // Initialize the front-end components.

    FeInitialize (
        argc, // argc
        argv, // argv
    )

    // Parse the program and construct a global symbol table and abstract syntax
    // trees.

    PrsProgram ()

    // Generate IR for each function, in the form of control flow graphs.

    // IrGenerate ()

    // Call the target-specific code to finish compilation.

    // ...
END

TrgCHostInfo : JklTargetInfoRecord

FN TrgInitialize ()
    
    // TEMP: Just point stuff to the C host

    // TODO replace all this stuff with static initialization when we have that

    TrgCHostInfo.PointerAlignment = 8

    TrgCHostInfo.SupportedTypes[PRIM_TYPE_VOID] = TRUE
    TrgCHostInfo.SupportedTypes[PRIM_TYPE_UBYTE] = TRUE
    TrgCHostInfo.SupportedTypes[PRIM_TYPE_UINT] = TRUE
    TrgCHostInfo.SupportedTypes[PRIM_TYPE_ULONG] = TRUE
    TrgCHostInfo.SupportedTypes[PRIM_TYPE_UQUAD] = FALSE
    TrgCHostInfo.SupportedTypes[PRIM_TYPE_BYTE] = TRUE
    TrgCHostInfo.SupportedTypes[PRIM_TYPE_INT] = TRUE
    TrgCHostInfo.SupportedTypes[PRIM_TYPE_LONG] = TRUE
    TrgCHostInfo.SupportedTypes[PRIM_TYPE_QUAD] = FALSE

    TrgCHostInfo.PrimitiveAlignment[PRIM_TYPE_VOID] = 0
    TrgCHostInfo.PrimitiveAlignment[PRIM_TYPE_UBYTE] = 1
    TrgCHostInfo.PrimitiveAlignment[PRIM_TYPE_UINT] = 2
    TrgCHostInfo.PrimitiveAlignment[PRIM_TYPE_ULONG] = 4
    TrgCHostInfo.PrimitiveAlignment[PRIM_TYPE_UQUAD] = 8
    TrgCHostInfo.PrimitiveAlignment[PRIM_TYPE_BYTE] = 1
    TrgCHostInfo.PrimitiveAlignment[PRIM_TYPE_INT] = 2
    TrgCHostInfo.PrimitiveAlignment[PRIM_TYPE_LONG] = 4
    TrgCHostInfo.PrimitiveAlignment[PRIM_TYPE_QUAD] = 8

    TrgCHostInfo.LargestPrimitive = PRIM_TYPE_ULONG
    TrgCHostInfo.LargestSignedPrimitive = PRIM_TYPE_LONG

    JklTargetInfo = &TrgCHostInfo
END

FN FeInitialize (
    IN argc : ULONG,
    IN argv : ^UBYTE[],
)
    
    // Initialize the file block hash table.

    TlInitializeHashTable ( &FeFileBlockHashTable )

    // Initialize the preprocessor.

    LexInitializePreprocessor ()

    // Parse the arguments.

    FeParseArguments ( argc, argv )

    // Open the input and output files.

    status := TlOpenSource (
        &FeInputFile[0], // filename
        &FeInputFileHandle, // OUT handle
    )

    IF status THEN
        TlUserError ( "Failed to open source file.", 0, 0, 0 )
    END

    status = TlOpenDestination (
        &FeOutputFile[0], // filename
        &FeOutputFileHandle, // OUT handle
    )

    IF status THEN
        TlUserError ( "Failed to open destination file.", 0, 0, 0 )
    END

    // Initialize the target.

    TrgInitialize ()

    // Initialize the lexer.

    LexInitialize ()

    // Initialize the parser.

    PrsInitialize ()
END