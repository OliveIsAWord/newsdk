//
// Host-specific entrypoint for the Jackal compiler program.
//

#INCLUDE "<inc>/Frontend.hjk"
#INCLUDE "<inc>/Runtime.hjk"
#INCLUDE "<inc>/Lexer.hjk"

#ASM [

.bytes 4096, 0

la sp, 0x100000
j Main

// a0 - word
// a1 - size
// a2 - ptr
memset:
.global memset
    subi sp, sp, 4
    mov  long [sp], lr

    bne  a1, .gzero

    addi sp, sp, 4
    ret

.gzero:
    xori t1, a2, 3
    addi t1, t1, 1
    andi t1, t1, 3

    beq  t1, .fdone

    mov  t2, a0

    slt  t3, t1, a1
    bne  t3, .goodlen

    mov  t1, a1

.goodlen:
    sub  a1, a1, t1

.fu:
    mov  byte [a2], t2

    rshi t2, t2, 8

    addi a2, a2, 1
    subi t1, t1, 1
    bne  t1, .fu

.fdone:
    // ptr is now aligned

    rshi t1, a1, 6 // do 64 bytes each loop

    beq  t1, .b64done

.b64:
    mov  long [a2], a0
    mov  long [a2 + 4], a0
    mov  long [a2 + 8], a0
    mov  long [a2 + 12], a0
    mov  long [a2 + 16], a0
    mov  long [a2 + 20], a0
    mov  long [a2 + 24], a0
    mov  long [a2 + 28], a0
    mov  long [a2 + 32], a0
    mov  long [a2 + 36], a0
    mov  long [a2 + 40], a0
    mov  long [a2 + 44], a0
    mov  long [a2 + 48], a0
    mov  long [a2 + 52], a0
    mov  long [a2 + 56], a0
    mov  long [a2 + 60], a0

    addi a2, a2, 64
    subi t1, t1, 1
    bne  t1, .b64

.b64done:
    andi t1, a1, 63

    rshi t1, t1, 2 // do 4 bytes each loop

    beq  t1, .b4done

.b4:
    mov  long [a2], a0

    addi a2, a2, 4
    subi t1, t1, 1
    bne  t1, .b4

.b4done:
    andi t1, a1, 3 // do 1 byte each loop

    beq  t1, .b1done

.b1:
    mov  byte [a2], a0

    rshi a0, a0, 8

    addi a2, a2, 1
    subi t1, t1, 1
    bne  t1, .b1

.b1done:
    addi sp, sp, 4
    ret

// a0 - sz
// a1 - src
// a2 - dest
memcpy:
.global memcpy
    subi sp, sp, 4
    mov  long [sp], lr

    beq  a0, .zerosize

    xor  t0, a1, a2

    andi t1, t0, 1
    beq  t1, .aligned_with_eachother

    b    .unaligned

.zerosize:
    addi sp, sp, 4
    ret

.aligned_with_eachother:
    xori t1, a1, 3
    addi t1, t1, 1
    andi t1, t1, 3

    beq  t1, .fdone

    slt  t3, t1, a0
    bne  t3, .goodlen

    mov  t1, a0

.goodlen:
    sub  a0, a0, t1

.fu:
    mov  t2, byte [a1]
    mov  byte [a2], t2

    addi a1, a1, 1
    addi a2, a2, 1
    subi t1, t1, 1
    bne  t1, .fu

.fdone:
    andi t1, t0, 3
    beq  t1, .aligned32

.aligned16:
    rshi t0, a0, 6 // do 64 bytes each loop

    beq  t0, .copy16_by_64done

.copy16_by_64:
    mov  t1, int [a1]
    mov  t2, int [a1 + 2]
    mov  t3, int [a1 + 4]
    mov  t4, int [a1 + 6]

    mov  int [a2], t1
    mov  int [a2 + 2], t2
    mov  int [a2 + 4], t3
    mov  int [a2 + 6], t4

    mov  t1, int [a1 + 8]
    mov  t2, int [a1 + 10]
    mov  t3, int [a1 + 12]
    mov  t4, int [a1 + 14]

    mov  int [a2 + 8], t1
    mov  int [a2 + 10], t2
    mov  int [a2 + 12], t3
    mov  int [a2 + 14], t4

    mov  t1, int [a1 + 16]
    mov  t2, int [a1 + 18]
    mov  t3, int [a1 + 20]
    mov  t4, int [a1 + 22]

    mov  int [a2 + 16], t1
    mov  int [a2 + 18], t2
    mov  int [a2 + 20], t3
    mov  int [a2 + 22], t4

    mov  t1, int [a1 + 24]
    mov  t2, int [a1 + 26]
    mov  t3, int [a1 + 28]
    mov  t4, int [a1 + 30]

    mov  int [a2 + 24], t1
    mov  int [a2 + 26], t2
    mov  int [a2 + 28], t3
    mov  int [a2 + 30], t4

    mov  t1, int [a1 + 32]
    mov  t2, int [a1 + 34]
    mov  t3, int [a1 + 36]
    mov  t4, int [a1 + 38]

    mov  int [a2 + 32], t1
    mov  int [a2 + 34], t2
    mov  int [a2 + 36], t3
    mov  int [a2 + 38], t4

    mov  t1, int [a1 + 40]
    mov  t2, int [a1 + 42]
    mov  t3, int [a1 + 44]
    mov  t4, int [a1 + 46]

    mov  int [a2 + 40], t1
    mov  int [a2 + 42], t2
    mov  int [a2 + 44], t3
    mov  int [a2 + 46], t4

    mov  t1, int [a1 + 48]
    mov  t2, int [a1 + 50]
    mov  t3, int [a1 + 52]
    mov  t4, int [a1 + 54]

    mov  int [a2 + 48], t1
    mov  int [a2 + 50], t2
    mov  int [a2 + 52], t3
    mov  int [a2 + 54], t4

    mov  t1, int [a1 + 56]
    mov  t2, int [a1 + 58]
    mov  t3, int [a1 + 60]
    mov  t4, int [a1 + 62]

    mov  int [a2 + 56], t1
    mov  int [a2 + 58], t2
    mov  int [a2 + 60], t3
    mov  int [a2 + 62], t4

    addi a2, a2, 64
    addi a1, a1, 64
    subi t0, t0, 1
    bne  t0, .copy16_by_64

.copy16_by_64done:
    andi t0, a0, 63

    b    .copy_last_bytes

.aligned32:
    rshi t0, a0, 6 // do 64 bytes each loop

    beq  t0, .copy32_by_64done

.copy32_by_64:
    mov  t1, long [a1]
    mov  t2, long [a1 + 4]
    mov  t3, long [a1 + 8]
    mov  t4, long [a1 + 12]

    mov  long [a2], t1
    mov  long [a2 + 4], t2
    mov  long [a2 + 8], t3
    mov  long [a2 + 12], t4

    mov  t1, long [a1 + 16]
    mov  t2, long [a1 + 20]
    mov  t3, long [a1 + 24]
    mov  t4, long [a1 + 28]

    mov  long [a2 + 16], t1
    mov  long [a2 + 20], t2
    mov  long [a2 + 24], t3
    mov  long [a2 + 28], t4

    mov  t1, long [a1 + 32]
    mov  t2, long [a1 + 36]
    mov  t3, long [a1 + 40]
    mov  t4, long [a1 + 44]

    mov  long [a2 + 32], t1
    mov  long [a2 + 36], t2
    mov  long [a2 + 40], t3
    mov  long [a2 + 44], t4

    mov  t1, long [a1 + 48]
    mov  t2, long [a1 + 52]
    mov  t3, long [a1 + 56]
    mov  t4, long [a1 + 60]

    mov  long [a2 + 48], t1
    mov  long [a2 + 52], t2
    mov  long [a2 + 56], t3
    mov  long [a2 + 60], t4

    addi a2, a2, 64
    addi a1, a1, 64
    subi t0, t0, 1
    bne  t0, .copy32_by_64

.copy32_by_64done:
    andi t0, a0, 63

    b    .copy_last_bytes

.unaligned:
    rshi t0, a0, 5 // do 32 bytes each loop

    beq  t0, .copy8_by_32done

.copy8_by_32:
    mov  t1, byte [a1]
    mov  t2, byte [a1 + 1]
    mov  t3, byte [a1 + 2]
    mov  t4, byte [a1 + 3]

    mov  byte [a2], t1
    mov  byte [a2 + 1], t2
    mov  byte [a2 + 2], t3
    mov  byte [a2 + 3], t4

    mov  t1, byte [a1 + 4]
    mov  t2, byte [a1 + 5]
    mov  t3, byte [a1 + 6]
    mov  t4, byte [a1 + 7]

    mov  byte [a2 + 4], t1
    mov  byte [a2 + 5], t2
    mov  byte [a2 + 6], t3
    mov  byte [a2 + 7], t4

    mov  t1, byte [a1 + 8]
    mov  t2, byte [a1 + 9]
    mov  t3, byte [a1 + 10]
    mov  t4, byte [a1 + 11]

    mov  byte [a2 + 8], t1
    mov  byte [a2 + 9], t2
    mov  byte [a2 + 10], t3
    mov  byte [a2 + 11], t4

    mov  t1, byte [a1 + 12]
    mov  t2, byte [a1 + 13]
    mov  t3, byte [a1 + 14]
    mov  t4, byte [a1 + 15]

    mov  byte [a2 + 12], t1
    mov  byte [a2 + 13], t2
    mov  byte [a2 + 14], t3
    mov  byte [a2 + 15], t4

    mov  t1, byte [a1 + 16]
    mov  t2, byte [a1 + 17]
    mov  t3, byte [a1 + 18]
    mov  t4, byte [a1 + 19]

    mov  byte [a2 + 16], t1
    mov  byte [a2 + 17], t2
    mov  byte [a2 + 18], t3
    mov  byte [a2 + 19], t4

    mov  t1, byte [a1 + 20]
    mov  t2, byte [a1 + 21]
    mov  t3, byte [a1 + 22]
    mov  t4, byte [a1 + 23]

    mov  byte [a2 + 20], t1
    mov  byte [a2 + 21], t2
    mov  byte [a2 + 22], t3
    mov  byte [a2 + 23], t4

    mov  t1, byte [a1 + 24]
    mov  t2, byte [a1 + 25]
    mov  t3, byte [a1 + 26]
    mov  t4, byte [a1 + 27]

    mov  byte [a2 + 24], t1
    mov  byte [a2 + 25], t2
    mov  byte [a2 + 26], t3
    mov  byte [a2 + 27], t4

    mov  t1, byte [a1 + 28]
    mov  t2, byte [a1 + 29]
    mov  t3, byte [a1 + 30]
    mov  t4, byte [a1 + 31]

    mov  byte [a2 + 28], t1
    mov  byte [a2 + 29], t2
    mov  byte [a2 + 30], t3
    mov  byte [a2 + 31], t4

    addi a2, a2, 32
    addi a1, a1, 32
    subi t0, t0, 1
    bne  t0, .copy8_by_32

.copy8_by_32done:
    andi t0, a0, 31 // do 1 byte each loop

.copy_last_bytes:
    beq  t0, .done

.b1:
    mov  t1, byte [a1]
    mov  byte [a2], t1

    addi a2, a2, 1
    addi a1, a1, 1
    subi t0, t0, 1
    bne  t0, .b1

.done:
    addi sp, sp, 4
    ret

testfile:
.incbin "../../bigtest.bin"
testfileend:

]

EXTERN FN memset (
    IN word : ULONG,
    IN sz : ULONG,
    IN ptr : ^UBYTE,
)

EXTERN FN memcpy (
    IN sz : ULONG,
    IN src : ^UBYTE,
    IN dest : ^UBYTE,
)

#DEFINE IO_SERIAL_CMD 0xF8000048
#DEFINE IO_SERIAL_DATA 0xF800004C

FN Putc (
    IN c : UBYTE,
)

    // Write a character to the serial port.

    cmdport := CAST IO_SERIAL_CMD TO ^UBYTE
    dataport := CAST IO_SERIAL_DATA TO ^UBYTE

    WHILE cmdport^ DO
        BARRIER
    END

    IF c == '\n' THEN
        dataport^ = '\r'

        WHILE cmdport^ DO
            BARRIER
        END
    END

    dataport^ = c

    BARRIER
END

FN Puts (
    IN str : ^UBYTE,
)

    i := 0

    WHILE str[i] DO
        Putc ( str[i] )

        i += 1
    END
END

EXTERN testfile : UBYTE
EXTERN testfileend : UBYTE

Pos : ^UBYTE = NULLPTR
EndFile : ^UBYTE = NULLPTR

FN TlReadFile (
    IN handle : ^VOID,
    IN bytes : UWORD,
    IN buffer : ^VOID,
) : UWORD

    IF Pos >= EndFile THEN
        RETURN 0
    END

    IF Pos + bytes > EndFile THEN
        bytes = CAST EndFile - Pos TO UWORD
    END

    memcpy (
        bytes, // sz
        Pos, // src
        buffer, // dest
    )

    Pos += bytes

    RETURN bytes
END

TlBumpPtr : ^VOID = NULLPTR

EXTERN _data : UBYTE
EXTERN _data_size : UBYTE
EXTERN _text_size : UBYTE

TlBumpBytesLeft : UWORD = 0
TlBumpBytesUsed : UWORD = 0
TlBumpHits : UWORD = 0

FN Main ()
    TlPrintString ( "reset " )

    memcpy (
        CAST &_data_size TO UWORD, // sz
        &_text_size + 0xFFF00000, // src
        &_data, // dest
    )

    Pos = &testfile
    EndFile = &testfileend
    TlBumpPtr = CAST 0x800000 TO ^VOID

    TlInitialize ()

    args : ^UBYTE[5]
    args[1] = "target=fox32"
    args[2] = "kitsunebit.jkl"
    args[3] = "kitsunebit.s"
    args[4] = "BITS=32"

    TlMain ( 5, &args[0] )

    TlPrintString ( "Bump allocator bytes usage: " )
    TlPrintNumber ( TlBumpBytesUsed )
    TlPrintString ( "\n" )

    WHILE TRUE DO END
END

FN TlErrorExit ()
    Puts ( "Error" )

    WHILE TRUE DO END
END

FN TlPrintNumber (
    IN num : UWORD,
)

    IF num == 0 THEN
        Putc ( '0' )

        LEAVE
    END

    log10 := 0
    divisor := 1
    n := num

    WHILE n >= 10 DO
        divisor *= 10
        n /= 10
        log10 += 1
    END

    log10 += 1

    WHILE log10 DO
        Putc ( '0' + (num / divisor) % 10 )

        log10 -= 1
        divisor /= 10
    END
END

FN TlPrintString (
    IN str : ^UBYTE,
)

    Puts ( str )
END

FN TlFillMemoryWithByte (
    IN ptr : ^VOID,
    IN sz : UWORD,
    IN byte : UWORD,
)

    word := (byte << 24) | (byte << 16) | (byte << 8) | byte

    memset (
        word, // word
        sz, // sz
        ptr, // ptr
    )
END

FN TlCopyMemory (
    IN dest : ^VOID,
    IN src : ^VOID,
    IN sz : UWORD,
)

    memcpy (
        sz, // sz
        src, // src
        dest, // dst
    )
END

FN TlBumpAlloc (
    IN bytes : UWORD,
    OUT ptr : ^VOID,
) : TlStatus

    // Eternal bump allocator for accelerating some stuff.
    // First align to 8 bytes, assuming a 64-bit C host.

    bytes += 3
    bytes &= ~3

    ptr = TlBumpPtr

    TlBumpHits += 1
    TlBumpBytesUsed += bytes
    TlBumpPtr += bytes
    TlBumpBytesLeft -= bytes

    RETURN TL_SUCCESS
END

FN TlFree (
    IN ptr : ^VOID,
)

    // free ( ptr )
END

FN TlAlloc (
    IN bytes : UWORD,
    OUT ptr : ^VOID,
) : TlStatus
    
    bytes += 3
    bytes &= ~3

    ptr = TlBumpPtr

    TlBumpPtr += bytes

    RETURN TL_SUCCESS
END

FN TlCompareString (
    IN str1 : ^UBYTE,
    IN str2 : ^UBYTE,
) : UWORD

    i := 0

    WHILE TRUE DO
        IF NOT str1[i] AND NOT str2[i] THEN
            RETURN 0
        END

        IF str1[i] != str2[i] THEN
            RETURN 1
        END

        i += 1
    END
END

FN TlCompareStringWithMax (
    IN str1 : ^UBYTE,
    IN str2 : ^UBYTE,
    IN count : UWORD,
) : UWORD

    i := 0

    WHILE i < count DO
        IF NOT str1[i] AND NOT str2[i] THEN
            RETURN 0
        END

        IF str1[i] != str2[i] THEN
            RETURN 1
        END

        i += 1
    END

    RETURN 0
END

FN TlMeasureString (
    IN str : ^UBYTE,
) : UWORD

    cnt := 0

    WHILE str[cnt] DO
        cnt += 1
    END

    RETURN cnt
END

FN TlCopyString (
    IN dest : ^UBYTE,
    IN src : ^UBYTE,
    IN bufsize : UWORD,
)
    IF NOT bufsize THEN
        LEAVE
    END

    WHILE bufsize - 1 DO
        dest^ = src^

        dest += 1
        src += 1
        bufsize -= 1

        IF src^ == 0 THEN
            BREAK
        END
    END

    dest^ = 0
END

FN TlOpenSource (
    IN filename : ^UBYTE,
    OUT handle : ^VOID,
) : TlStatus

    RETURN TL_SUCCESS
END

FN TlOpenDestination (
    IN filename : ^UBYTE,
    OUT handle : ^VOID,
) : TlStatus

    RETURN TL_SUCCESS
END

FN TlClose (
    IN handle : ^VOID,
)

END

FN TlWriteFile (
    IN handle : ^VOID,
    IN bytes : UWORD,
    IN buffer : ^VOID,
) : UWORD

    WHILE bytes DO
        Putc ( (CAST buffer TO ^UBYTE)^ )

        buffer += 1
        bytes -= 1
    END
END