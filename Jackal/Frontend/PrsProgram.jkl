//
// Parses Jackal programs and constructs an abstract syntax tree.
//

#INCLUDE "<inc>/Parser.hjk"

PUBLIC PrsGlobalListHead : ^LexSymbol = NULLPTR
PUBLIC PrsGlobalListTail : ^LexSymbol = NULLPTR

CONST VAR_FLAG_EXTERN := 1
CONST VAR_FLAG_PUBLIC := 2
CONST VAR_FLAG_EXPORT := 4

FN PrsVariableDeclaration (
    IN token : ^LexToken,
    IN flags : ULONG,
    IN global : UBYTE,
)

    // Parse a variable declaration of one of the following forms:
    //
    //  name : type = initial
    //  name : = initial
    //  name : type
    //
    // Non-extern declarations may override extern declarations.
    // Extern declarations must not have an initial value, just a name and type.
    // The passed in token contains the relevant symbol already.
    // For local declarations, we should generate an AST assignment node.
    // For globals, we should just associate the initial value with the symbol,
    // and add the symbol to a list of globals for the whole program. The
    // initial value AST node is interpreted in the next phase of the compiler.

    symbol := CAST token^.Payload TO ^LexSymbol

    IF token^.Subtype == TOKEN_IDENTIFIER_FOUND THEN
        // This symbol has already appeared, so we want to find out if this is
        // a valid override.

        IF symbol^.Type != SYM_VAR THEN
            // This symbol isn't even a variable.

            LexTokenError ( token, "Symbol name already in use.", 0, 0, 0 )
        END

        IF NOT (symbol^.Flags & VAR_FLAG_EXTERN) THEN
            // Can only override externs.

            LexTokenError ( token, "Variable already declared.", 0, 0, 0 )
        END
    ELSE
        // Initialize the symbol.

        symbol^.Type = SYM_VAR

        IF global THEN
            // Add it to the list of globals, at the tail.

            tail := PrsGlobalListTail

            symbol^.Next = NULLPTR
            symbol^.Prev = tail

            IF tail THEN
                tail^.Next = symbol
            ELSE
                PrsGlobalListHead = symbol
            END

            PrsGlobalListTail = symbol
        END
    END

    symbol^.Flags = flags

    // ...

    IF NOT global THEN
        // Create an AST node for the assignment of the initial value.
        // We can place it directly in the statement list for the current block
        // because the existence of a block is implied by the fact this is a
        // local declaration.

    END
END

FN PrsDeclaration () : UBYTE

    // Parse the next global declaration. Return FALSE on EOF.

    token : LexToken

    LexGetToken ( &token )

    IF token.Type == TOKEN_EOF THEN
        RETURN FALSE
    END

    IF token.Type != TOKEN_IDENTIFIER AND token.Type != TOKEN_DECL THEN
        LexTokenError ( &token,
            "Expected identifier or declarative keyword", 0, 0, 0 )
    END

    IF token.Type == TOKEN_IDENTIFIER THEN
        // This is a non-public, non-extern variable declaration.
        // It may be overriding an extern declaration.

        PrsVariableDeclaration (
            &token, // token
            0, // flags
            TRUE, // global
        )

        RETURN TRUE
    END

    // This is a declarative keyword of some variety.

    RETURN TRUE
END

FN PrsProgram ()

    // Parse a program. This consists of a sequence of global declarations. We
    // also want to place these global declarations on lists so the subsequent
    // phases can use them appropriately, linked via the symbol table entry
    // given to us by the lexer.

    WHILE PrsDeclaration () DO
        // Keep going...
    END
END