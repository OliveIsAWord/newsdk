//
// Disk Update Tool initialization.
//

#INCLUDE "Dut.hjk"

FN DutUsage ()
    TlPrintByHandle (
        TlStdErr, // handle
        "Usage: %s <command> <options ...>

Commands:
  info <imagename>:
    Print miscellaneous information about the disk image.

  create <imagename> <sectors>
  [-apt:disklabel,label1:sectors1,label2:sectors2,... [-boot:bootfile]]
  [-fs:part,fsname[,srcbase,manifest1,manifest2,...]]:
    Create a disk image with the given name, size in sectors, partition layout,
    boot sector, and initialize with one or more filesystems. Source base is
    ignored for manifest file paths prefixed with a dash '-' character.

  writesectors <imagename> <partition> <sector> <file>:
    Write a file directly to the specified partition, starting at the specified
    sector.

  updatehierarchy <imagename> <partition> <manifestfile> [base]:
    Update all recursive subdirectories indicated by manifest file.

  updatefiles <imagename> <partition> <listfile>:
    Update all files indicated by list file.

  ls <imagename> <partition> <path>:
    List the contents of the specified filesystem directory.

  read <imagename> <partition> <path>:
    Read the contents of the specified file to stdout.

  write <imagename> <partition> <path> <hostpath>:
    Write the contents of the specified file from another file.

  delete <imagename> <partition> <path>:
    Delete the specified file.\n", // fmt
        TlProgramName,
    )

    TlErrorExit ()
END

DutBuffer1 : UBYTE[DUT_LABEL_MAX]
DutBuffer2 : UBYTE[DUT_LABEL_MAX]

STRUCT DutManifest
    Entry : TlListEntry,

    PathBuffer : TlDynamicBuffer,
END

STRUCT DutFsDescription
    Entry : TlListEntry,

    PartId : UWORD,
    FsName : UBYTE[DUT_LABEL_MAX],

    SrcBaseBuffer : TlDynamicBuffer,
    ManifestListHead : TlListEntry,
END

STRUCT DutOsDescription
    Entry : TlListEntry,

    PartId : UWORD,
    LabelFile : ^VOID,
    BootstrapFile : ^VOID,
    BootstrapSector : UWORD,

    LabelFileName : TlDynamicBuffer,
    BootstrapFileName : TlDynamicBuffer,
END


FN DutCopyFileIntoVolume (
    IN srcpath : ^UBYTE,
    IN destpath : ^UBYTE,
    IN mount : ^DutMount,
    IN uid : UWORD,
    IN gid : UWORD,
) : UWORD

    // Copy a file into the volume at the specified path.

    // Open the source file.

    handle : ^VOID

    status := TlOpenSource (
        srcpath, // path
        OUT handle, // handle
    )

    IF status THEN
        RETURN FALSE
    END

    // Open the destination file on the disk image.

    error : ^UBYTE

    destfile := DutOpenFileSetPermissions (
        mount, // mount
        destpath, // path
        TRUE, // create
        -1, // permissions
        uid, // uid
        gid, // gid
        OUT error, // error
    )

    IF NOT destfile THEN
        TlError ( "%s: %s\n", destpath, error )
    END

    // Write the contents.

    DutTruncateFile ( destfile )

    offset := 0

    WHILE TRUE DO
        len := TlReadFile (
            handle, // handle
            4096, // bytes
            &DutTemporaryBuffer[0], // buffer
        )

        IF len == 0 THEN
            BREAK
        END

        wrotelen := DutWriteFile (
            destfile, // file
            offset, // offset
            len, // len
            &DutTemporaryBuffer[0], // buf
        )

        IF wrotelen == -1 THEN
            TlError ( "I/O error\n" )
        END

        offset += 4096
    END

    DutCloseFile ( destfile )

    TlClose ( handle )

    RETURN TRUE
END

FN DutVolumeFromImageAndPart (
    IN imagename : ^UBYTE,
    IN partition : ^UBYTE,
) : ^DutDiskCommon

    partid : UWORD

    IF NOT TlStringToNumber (
        partition, // src
        -1, // bufsize
        OUT partid, // num
    ) THEN
        TlError ( "Bad partition number\n" )
    END

    di := DutOpenDiskImage (
        imagename, // filename
        FALSE, // create
        0, // sectors
    )

    IF partid != -1 THEN
        DutParsePartitionTable ( di )
    END

    volume := CAST DutFindPartitionById (
        di, // image
        partid, // id
    ) TO ^DutDiskCommon

    IF NOT volume THEN
        TlError ( "No such partition %d\n", partid )
    END

    RETURN volume
END

FN DutMountFromImageAndPart (
    IN imagename : ^UBYTE,
    IN partition : ^UBYTE,
) : ^DutMount

    volume := DutVolumeFromImageAndPart (
        imagename, // imagename
        partition, // partition
    )

    mount := DutMountUnknownFilesystem ( volume )

    IF NOT mount THEN
        TlError ( "Failed to mount filesystem\n" )
    END

    RETURN mount
END

FN DutLoadFileData (
    IN filename : ^UBYTE,
) : ^UBYTE

    handle : ^VOID

    status := TlOpenSource (
        filename, // path
        OUT handle, // handle
    )

    IF status THEN
        TlError ( "%s: failed to open\n", filename )
    END

    stat : TlStatRecord

    status = TlStatFile (
        filename, // path
        &stat, // statrecord
    )

    IF status THEN
        TlInternalError ( "Failed to stat file", 0, 0, 0 )
    END

    buf : ^UBYTE

    status = TlAlloc (
        stat.SizeInBytes + 1, // bytes
        OUT buf, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate file data", 0, 0, 0 )
    END

    TlReadFile (
        handle, // handle
        stat.SizeInBytes, // bytes
        buf, // buf
    )

    buf[stat.SizeInBytes] = 0

    RETURN buf
END

FNPTR DutCallbackPerLineF (
    IN buf : ^UBYTE,
    IN context : ^VOID,
    IN linenum : UWORD,
)

STRUCT DutUpdateFilesContext
    Mount : ^DutMount,
    SourceBase : ^UBYTE,
    SrcBaseLen : UWORD,
    FileName : ^UBYTE,
    Uid : UWORD,
    Gid : UWORD,
    DestPath : ^UBYTE,
    DestPathLen : UWORD,
END

FN (TlIterateDirectoryCallbackF) DutUpdateHierarchyDirCallback (
    IN fullpath : ^UBYTE,
    IN filename : ^UBYTE,
    IN context : ^VOID,
)

    ctx := CAST context TO ^DutUpdateFilesContext

    dest : TlDynamicBuffer

    TlInitializeDynamicBuffer ( &dest )

    IF ctx^.DestPathLen THEN
        TlCopyIntoDynamicBuffer (
            &dest, // array
            ctx^.DestPath, // srcbuf
            ctx^.DestPathLen, // length
        )

        IF dest.Buffer[dest.Count - 1] != '/' THEN
            TlInsertDynamicBuffer (
                &dest, // array
                '/', // byte
            )
        END
    END

    TlCopyIntoDynamicBuffer (
        &dest, // array
        filename, // srcbuf
        TlMeasureString ( filename ) + 1, // length
    )

    IF TlIsPathDirectory ( fullpath ) THEN
        // Recurse.

        innerctx : DutUpdateFilesContext

        innerctx.Mount = ctx^.Mount
        innerctx.Uid = ctx^.Uid
        innerctx.Gid = ctx^.Gid
        innerctx.DestPath = dest.Buffer
        innerctx.DestPathLen = dest.Count - 1

        IF TlIterateDirectory (
            fullpath, // path
            &DutUpdateHierarchyDirCallback, // callback
            &innerctx, // context
        ) THEN
            TlPrintByHandle (
                TlStdErr, // handle
                "%s: %s: WARNING: Failed to iterate directory\n", // fmt
                TlProgramName,
                fullpath,
            )
        END

        TlUninitializeDynamicBuffer ( &dest )

        LEAVE
    END

    // TlPrint ( "Writing %s to %s\n", fullpath, dest.Buffer )

    DutCopyFileIntoVolume (
        fullpath, // srcpath
        dest.Buffer, // destpath
        ctx^.Mount, // mount
        ctx^.Uid, // uid
        ctx^.Gid, // gid
    )

    TlUninitializeDynamicBuffer ( &dest )
END

FN DutTokenizeIntoDynamicBuffer (
    IN array : ^TlDynamicBuffer,
    IN buf : ^UBYTE,
) : ^UBYTE

    // Read the next whitespace delineated token into the dynamic buffer.

    WHILE buf^ == ' ' OR buf^ == '\t' DO
        // Skip whitespace.

        buf += 1
    END

    IF buf^ == 0 OR buf^ == '#' THEN
        // Nothing relevant on this line.

        RETURN NULLPTR
    END

    WHILE TRUE DO
        IF buf^ == ' ' OR
            buf^ == '\t' OR
            buf^ == 0 OR
            buf^ == '#' THEN

            TlInsertDynamicBuffer (
                array, // array
                0, // byte
            )

            RETURN buf
        END

        TlInsertDynamicBuffer (
            array, // array
            buf^, // byte
        )

        buf += 1
    END
END

FN (DutCallbackPerLineF) DutUpdateFilesCallback (
    IN buf : ^UBYTE,
    IN context : ^VOID,
    IN linenum : UWORD,
)

    ctx := CAST context TO ^DutUpdateFilesContext

    srcpath : TlDynamicBuffer
    destpath : TlDynamicBuffer

    TlInitializeDynamicBuffer ( &destpath )

    next := DutTokenizeIntoDynamicBuffer (
        &destpath, // array
        buf, // buf
    )

    IF NOT next THEN
        // Nothing here.

        TlUninitializeDynamicBuffer ( &destpath )

        LEAVE
    END

    TlInitializeDynamicBuffer ( &srcpath )

    next = DutTokenizeIntoDynamicBuffer (
        &srcpath, // array
        next, // buf
    )

    IF NOT next THEN
        TlError ( "%s:%d: Expected source path\n", ctx^.FileName, linenum )
    END

    // Copy the file in.

    IF NOT DutCopyFileIntoVolume (
        srcpath.Buffer, // srcpath
        destpath.Buffer, // destpath
        ctx^.Mount, // mount
        -1, // uid
        -1, // gid
    ) THEN

        TlPrintByHandle (
            TlStdErr, // handle
            "%s: %s: Warning: Failed to update\n", // fmt
            TlProgramName,
            srcpath.Buffer,
        )
    END

    TlUninitializeDynamicBuffer ( &srcpath )
    TlUninitializeDynamicBuffer ( &destpath )
END

FN (DutCallbackPerLineF) DutUpdateHierarchyCallback (
    IN buf : ^UBYTE,
    IN context : ^VOID,
    IN linenum : UWORD,
)

    ctx := CAST context TO ^DutUpdateFilesContext

    srcpath : TlDynamicBuffer
    destpath : TlDynamicBuffer
    uidstr : TlDynamicBuffer
    gidstr : TlDynamicBuffer

    TlInitializeDynamicBuffer ( &destpath )

    next := DutTokenizeIntoDynamicBuffer (
        &destpath, // array
        buf, // buf
    )

    IF NOT next THEN
        // Nothing here.

        TlUninitializeDynamicBuffer ( &destpath )

        LEAVE
    END

    TlInitializeDynamicBuffer ( &srcpath )
    TlInitializeDynamicBuffer ( &uidstr )
    TlInitializeDynamicBuffer ( &gidstr )

    // Pre-pend the source base.

    IF ctx^.SrcBaseLen THEN
        TlCopyIntoDynamicBuffer (
            &srcpath, // array
            ctx^.SourceBase, // srcbuf
            ctx^.SrcBaseLen, // count
        )

        IF srcpath.Buffer[srcpath.Count - 1] != '/' THEN
            TlInsertDynamicBuffer (
                &srcpath, // array
                '/', // byte
            )
        END
    END

    next = DutTokenizeIntoDynamicBuffer (
        &srcpath, // array
        next, // buf
    )

    IF NOT next THEN
        TlError ( "%s:%d: Expected source path\n", ctx^.FileName, linenum )
    END

    next = DutTokenizeIntoDynamicBuffer (
        &uidstr, // array
        next, // buf
    )

    IF NOT next THEN
        TlError ( "%s:%d: Expected UID\n", ctx^.FileName, linenum )
    END

    next = DutTokenizeIntoDynamicBuffer (
        &gidstr, // array
        next, // buf
    )

    IF NOT next THEN
        TlError ( "%s:%d: Expected GID\n", ctx^.FileName, linenum )
    END

    uid : UWORD
    gid : UWORD

    IF NOT TlStringToNumber (
        uidstr.Buffer, // src
        -1, // bufsize
        OUT uid, // num
    ) THEN
        TlError ( "%s:%d: Bad UID number\n", ctx^.FileName, linenum )
    END

    IF NOT TlStringToNumber (
        gidstr.Buffer, // src
        -1, // bufsize
        OUT gid, // num
    ) THEN
        TlError ( "%s:%d: Bad GID number\n", ctx^.FileName, linenum )
    END

    TlUninitializeDynamicBuffer ( &uidstr )
    TlUninitializeDynamicBuffer ( &gidstr )

    ctx^.Uid = uid
    ctx^.Gid = gid
    ctx^.DestPath = destpath.Buffer
    ctx^.DestPathLen = destpath.Count - 1

    IF TlIterateDirectory (
        srcpath.Buffer, // path
        &DutUpdateHierarchyDirCallback, // callback
        ctx, // context
    ) THEN
        TlPrintByHandle (
            TlStdErr, // handle
            "%s: %s: WARNING: Failed to iterate directory\n", // fmt
            TlProgramName,
            srcpath.Buffer
        )
    END

    TlUninitializeDynamicBuffer ( &destpath )
    TlUninitializeDynamicBuffer ( &srcpath )
END

FN DutCallbackPerLine (
    IN buf : ^UBYTE,
    IN callback : DutCallbackPerLineF,
    IN context : ^VOID,
)

    // For each line in the buffer, call the callback function.

    innl := TRUE
    linestart := buf
    linenum := 1

    WHILE TRUE DO
        c := buf^

        IF c == 0 OR c == '\n' THEN
            // Close the buffer.

            buf^ = 0

            // Callback.

            callback (
                linestart, // buf
                context, // context
                linenum, // linenum
            )

            IF c == 0 THEN
                BREAK
            END

            // Replace the newline.

            linenum += 1
            buf^ = '\n'

            innl = TRUE

            linestart = buf + 1

        ELSEIF innl THEN
            linestart = buf

            innl = FALSE
        END

        buf += 1
    END
END

FN DutCreateFilesystems (
    IN image : ^DutDiskImage,
    IN fslisthead : ^TlListEntry,
)

    // Create filesystems on the image as specified.

    listentry := fslisthead^.Next

    WHILE listentry != fslisthead DO
        fs := CONTAINEROF listentry TO DutFsDescription.Entry

        volume : ^DutDiskCommon

        IF fs^.PartId == -1 THEN
            // -1 means to use the entire disk image.

            volume = CAST image TO ^DutDiskCommon

        ELSE
            volume = CAST DutFindPartitionById (
                image, // image
                fs^.PartId, // id
            ) TO ^DutDiskCommon

            IF NOT volume THEN
                TlError ( "No such partition %d\n", fs^.PartId )
            END
        END

        // Now look up the filesystem name.

        fsd := DutLookupFilesystem ( &fs^.FsName[0] )

        IF NOT fsd THEN
            TlError ( "No such filesystem %s\n", &fs^.FsName[0] )
        END

        // Call the filesystem's format routine with the volume handle we just
        // acquired.

        fsd^.Format ( volume )

        IF &fs^.ManifestListHead != fs^.ManifestListHead.Next THEN
            // There are manifest files specified, so mount the filesystem.

            mount := DutMountFilesystem (
                volume, // volume
                fsd, // fs
            )

            IF NOT mount THEN
                TlError ( "Failed to mount filesystem\n" )
            END

            srcbaselen := TlMeasureString ( fs^.SrcBaseBuffer.Buffer )

            // Now initialize the filesystem hierarchy using the manifest files.

            mfsthead := &fs^.ManifestListHead
            mfstentry := mfsthead^.Next

            WHILE mfstentry != mfsthead DO
                manifest := CONTAINEROF mfstentry TO DutManifest.Entry

                mfstpath := manifest^.PathBuffer.Buffer

                context : DutUpdateFilesContext

                IF mfstpath[0] == '-' THEN
                    // Source base disabled.

                    mfstpath += 1

                    context.SourceBase = ""
                    context.SrcBaseLen = 0

                ELSE
                    context.SourceBase = fs^.SrcBaseBuffer.Buffer
                    context.SrcBaseLen = srcbaselen
                END

                context.Mount = mount
                context.FileName = mfstpath

                buf := DutLoadFileData ( mfstpath )

                DutCallbackPerLine (
                    buf, // buf
                    &DutUpdateHierarchyCallback, // callback
                    &context, // context
                )

                TlFree ( buf )

                mfstentry = mfstentry^.Next
            END

            // Unmount the filesystem.

            DutUnmountFilesystem ( mount )
        END

        listentry = listentry^.Next
    END
END

FN DutCreateImage (
    IN argc : ULONG,
    IN argv : ^^UBYTE,
)

    // Parse the arguments and generate a disk image as specified.

    imagename := argv[2]

    sectors : UWORD

    IF NOT TlStringToNumber (
        argv[3], // src
        -1, // bufsize
        OUT sectors, // num
    ) THEN
        DutUsage ()
    END

    i := 4
    j : UWORD
    apt := FALSE
    status : TlStatus
    desclisthead : TlListEntry
    fslisthead : TlListEntry
    bootfilehandle := NULLPTR
    fs : ^DutFsDescription
    manifest : ^DutManifest

    TlInitializeList ( &fslisthead )

    WHILE i < argc DO
        arg := argv[i]

        IF arg[0] != '-' THEN
            DutUsage ()
        END

        IF TlCompareStringWithMax ( arg, "-apt:", 5 ) == 0 THEN
            // Parse APT partition table specifiers.

            apt = TRUE

            arg += 5

            // First component is disk label.

            j = 0

            WHILE arg^ != ',' AND arg^ != 0 DO
                IF j == DUT_LABEL_MAX - 1 THEN
                    TlError ( "-apt: Too many characters in disk label\n" )
                END

                DutBuffer2[j] = arg^

                j += 1
                arg += 1
            END

            DutBuffer2[j] = 0

            IF NOT DutBuffer2[0] THEN
                TlError ( "-apt: Disk label must be at least 1 character\n" )
            END

            IF arg^ == ',' THEN
                arg += 1

                // Parse the partition list.

                TlInitializeList ( &desclisthead )

                currentpart : ^DutPartitionDescription = NULLPTR
                label := FALSE

                WHILE TRUE DO
                    IF NOT currentpart THEN
                        status = TlBumpAlloc (
                            SIZEOF DutPartitionDescription, // bytes
                            OUT currentpart, // ptr
                        )

                        IF status THEN
                            TlInternalError (
                                "Failed to allocate part", 0, 0, 0 )
                        END

                        j = 0
                        label = TRUE
                    END

                    IF arg^ == ':' THEN
                        IF NOT label THEN
                            TlError ( "Syntax error\n" )
                        END

                        currentpart^.Label[j] = 0

                        IF currentpart^.Label[0] == 0 THEN
                            TlError (
                            "-apt: Part label must be at least 1 character\n" )
                        END

                        label = FALSE
                        j = 0

                    ELSEIF arg^ == ',' OR arg^ == 0 THEN
                        IF label THEN
                            TlError ( "Syntax error\n" )
                        END

                        DutBuffer1[j] = 0

                        IF NOT TlStringToNumber (
                            &DutBuffer1[0], // src
                            -1, // bufsize
                            OUT currentpart^.SectorCount, // num
                        ) THEN
                            TlError ( "Syntax error\n" )
                        END

                        TlInsertAtTailList (
                            &desclisthead, // head
                            &currentpart^.Entry, // entry
                        )

                        label = TRUE
                        currentpart = NULLPTR

                        IF arg^ == 0 THEN
                            BREAK
                        END

                    ELSEIF label THEN
                        IF j == DUT_LABEL_MAX - 1 THEN
                            TlError (
                                "-apt: Too many characters in part label\n" )
                        END

                        currentpart^.Label[j] = arg^
                        j += 1

                    ELSE
                        IF j == DUT_LABEL_MAX - 1 THEN
                            TlError (
                                "-apt: Too many characters in part size\n" )
                        END

                        DutBuffer1[j] = arg^
                        j += 1
                    END

                    arg += 1
                END
            END

        ELSEIF TlCompareStringWithMax ( arg, "-boot:", 6 ) == 0 THEN
            IF NOT apt THEN
                TlError ( "-boot: only relevant when APT partitioning\n" )
            END

            IF bootfilehandle THEN
                TlClose ( bootfilehandle )
            END

            status = TlOpenSource (
                &arg[6], // filename
                OUT bootfilehandle, // handle
            )

            IF status THEN
                TlError ( "-boot: Failed to open '%s'\n", &arg[6] )
            END

        ELSEIF TlCompareStringWithMax ( arg, "-fs:", 4 ) == 0 THEN
            arg += 4

            j = 0

            // Allocate fs block.

            status = TlBumpAlloc (
                SIZEOF DutFsDescription, // bytes
                OUT fs, // ptr
            )

            IF status THEN
                TlInternalError ( "Failed to allocate fs", 0, 0, 0 )
            END

            TlInitializeDynamicBuffer ( &fs^.SrcBaseBuffer )

            TlInitializeList ( &fs^.ManifestListHead )

            // Collect partition number.

            WHILE arg^ AND arg^ != ',' DO
                IF j == DUT_LABEL_MAX - 1 THEN
                    TlError ( "-fs: Too many characters in part number\n" )
                END

                DutBuffer1[j] = arg^

                j += 1
                arg += 1
            END

            DutBuffer1[j] = 0

            IF NOT TlStringToNumber (
                &DutBuffer1[0], // src
                -1, // bufsize
                OUT fs^.PartId, // num
            ) THEN
                TlError ( "-fs: Bad partition number\n" )
            END

            // Collect fs name.

            IF arg[0] != ',' THEN
                TlError ( "-fs: Syntax error\n" )
            END

            arg += 1

            j = 0

            WHILE arg^ AND arg^ != ',' DO
                IF j == DUT_LABEL_MAX - 1 THEN
                    TlError ( "-fs: Too many characters in fs name\n" )
                END

                fs^.FsName[j] = arg^

                j += 1
                arg += 1
            END

            fs^.FsName[j] = 0

            IF fs^.FsName[0] == 0 THEN
                TlError ( "-fs: Syntax error\n" )
            END

            IF arg^ == ',' THEN
                // Collect source base.

                arg += 1

                WHILE arg^ AND arg^ != ',' DO
                    TlInsertDynamicBuffer (
                        &fs^.SrcBaseBuffer, // array
                        arg^, // byte
                    )

                    arg += 1
                END

                TlInsertDynamicBuffer (
                    &fs^.SrcBaseBuffer, // array
                    0, // byte
                )
            END

            // Collect manifest names.

            WHILE arg^ == ',' DO
                arg += 1

                status = TlBumpAlloc (
                    SIZEOF DutManifest, // bytes
                    OUT manifest, // ptr
                )

                IF status THEN
                    TlInternalError ( "Failed to allocate manifest", 0, 0, 0 )
                END

                TlInitializeDynamicBuffer ( &manifest^.PathBuffer )

                WHILE arg^ AND arg^ != ',' DO
                    TlInsertDynamicBuffer (
                        &manifest^.PathBuffer, // array
                        arg^, // byte
                    )

                    arg += 1
                END

                IF manifest^.PathBuffer.Count == 0 THEN
                    TlError ( "-fs: Syntax error 1\n" )
                END

                TlInsertDynamicBuffer (
                    &manifest^.PathBuffer, // array
                    0, // byte
                )

                TlInsertAtTailList (
                    &fs^.ManifestListHead, // head
                    &manifest^.Entry, // entry
                )
            END

            TlInsertAtTailList (
                &fslisthead, // head
                &fs^.Entry, // entry
            )

        ELSE
            DutUsage ()
        END

        i += 1
    END

    di := DutOpenDiskImage (
        imagename, // filename
        TRUE, // create
        sectors, // sectors
    )

    IF apt THEN
        DutPartitionDisk (
            di, // image
            &desclisthead, // desclisthead
            &DutBuffer2[0], // label
            bootfilehandle, // handle
        )

        IF NOT DutParsePartitionTable ( di ) THEN
            TlInternalError (
                "Failed to parse partition table we just made", 0, 0, 0 )
        END
    END

    IF fslisthead.Next != &fslisthead THEN
        // Create filesystems.

        DutCreateFilesystems (
            di, // image
            &fslisthead, // fslisthead
        )
    END
END

FN DutDumpInfo (
    IN imagename : ^UBYTE,
)

    di := DutOpenDiskImage (
        imagename, // filename
        FALSE, // create
        0, // sectors
    )

    TlPrint ( "Disk Size: %d sectors\n", di^.Common.SectorCount )

    IF NOT DutParsePartitionTable ( di ) THEN
        TlError ( "%s: No partition table\n", imagename )
    END

    TlPrint ( "Disk Label: %s\n", &di^.Common.Label[0] )

    TlPrint ( "Partitions:\n" )

    head := &di^.PartitionListHead
    listentry := head^.Next

    WHILE head != listentry DO
        part := CONTAINEROF listentry TO DutPartition.Entry

        TlPrint ( "  '%s': %d to %d (%d sectors)\n",
            &part^.Common.Label[0],
            part^.SectorOffset,
            part^.SectorOffset + part^.Common.SectorCount - 1,
            part^.Common.SectorCount )

        // Try to mount a filesystem.

        mount := DutMountUnknownFilesystem ( CAST part TO ^DutDiskCommon )

        IF mount THEN
            TlPrint ( "       Formatted as %s\n", mount^.Fs^.Name )

            DutUnmountFilesystem ( mount )
        END

        listentry = listentry^.Next
    END
END

FN DutUpdateHierarchy (
    IN imagename : ^UBYTE,
    IN partition : ^UBYTE,
    IN manifest : ^UBYTE,
    IN sourcebase : ^UBYTE,
)

    mount := DutMountFromImageAndPart (
        imagename, // imagename
        partition, // partition
    )

    context : DutUpdateFilesContext

    context.Mount = mount
    context.SourceBase = sourcebase
    context.SrcBaseLen = TlMeasureString ( sourcebase )
    context.FileName = manifest

    buf := DutLoadFileData ( manifest )

    DutCallbackPerLine (
        buf, // buf
        &DutUpdateHierarchyCallback, // callback
        &context, // context
    )

    DutUnmountFilesystem ( mount )
END

FN DutUpdateFiles (
    IN imagename : ^UBYTE,
    IN partition : ^UBYTE,
    IN listfile : ^UBYTE,
)

    mount := DutMountFromImageAndPart (
        imagename, // imagename
        partition, // partition
    )

    context : DutUpdateFilesContext

    context.Mount = mount
    context.FileName = listfile

    buf := DutLoadFileData ( listfile )

    DutCallbackPerLine (
        buf, // buf
        &DutUpdateFilesCallback, // callback
        &context, // context
    )

    DutUnmountFilesystem ( mount )
END

FN DutList (
    IN imagename : ^UBYTE,
    IN partition : ^UBYTE,
    IN path : ^UBYTE,
)

    mount := DutMountFromImageAndPart (
        imagename, // imagename
        partition, // partition
    )

    error : ^UBYTE

    file := DutOpenFile (
        mount, // mount
        path, // path
        FALSE, // create
        OUT error, // error
    )

    IF NOT file THEN
        TlError ( "%s: %s\n", path, error )
    END

    DutListFiles ( file )
END

FN DutRead (
    IN imagename : ^UBYTE,
    IN partition : ^UBYTE,
    IN path : ^UBYTE,
)

    mount := DutMountFromImageAndPart (
        imagename, // imagename
        partition, // partition
    )

    error : ^UBYTE

    file := DutOpenFile (
        mount, // mount
        path, // path
        FALSE, // create
        OUT error, // error
    )

    IF NOT file THEN
        TlError ( "%s: %s\n", path, error )
    END

    offset := 0

    WHILE TRUE DO
        len := DutReadFile (
            file, // file
            offset, // offset
            4096, // len
            &DutTemporaryBuffer[0], // buf
        )

        IF len == -1 THEN
            TlError ( "I/O error\n" )
        END

        i := 0

        WHILE i < len DO
            TlPrint ( "%c", DutTemporaryBuffer[i] )
            i += 1
        END

        IF len < 4096 THEN
            BREAK
        END

        offset += 4096
    END

    DutCloseFile ( file )

    DutUnmountFilesystem ( mount )
END

FN DutWrite (
    IN imagename : ^UBYTE,
    IN partition : ^UBYTE,
    IN path : ^UBYTE,
    IN hostpath : ^UBYTE,
)

    mount := DutMountFromImageAndPart (
        imagename, // imagename
        partition, // partition
    )

    IF NOT DutCopyFileIntoVolume (
        hostpath, // srcpath
        path, // destpath
        mount, // mount
        -1, // uid
        -1, // gid
    ) THEN

        TlError ( "%s: Failed to open host file\n", hostpath )
    END

    DutUnmountFilesystem ( mount )
END

FN DutDelete (
    IN imagename : ^UBYTE,
    IN partition : ^UBYTE,
    IN path : ^UBYTE,
)

    mount := DutMountFromImageAndPart (
        imagename, // imagename
        partition, // partition
    )

    error : ^UBYTE

    status := DutDeleteFile (
        mount, // mount
        path, // path
        OUT error, // error
    )

    IF NOT status THEN
        TlError ( "%s: %s\n", path, error )
    END

    DutUnmountFilesystem ( mount )
END

FN DutWriteSectors (
    IN imagename : ^UBYTE,
    IN partition : ^UBYTE,
    IN sector : ^UBYTE,
    IN file : ^UBYTE,
)

    volume := DutVolumeFromImageAndPart (
        imagename, // imagename
        partition, // partition
    )

    sectornum : UWORD

    IF NOT TlStringToNumber (
        sector, // src
        -1, // bufsize
        OUT sectornum, // num
    ) THEN
        TlError ( "Bad sector number\n" )
    END

    handle : ^VOID

    status := TlOpenSource (
        file, // filename
        OUT handle, // handle
    )

    IF status THEN
        TlError ( "%s: Failed to open\n", file )
    END

    i := 0

    WHILE TRUE DO
        len := TlReadFile (
            handle, // handle
            1 << volume^.SectorLog, // bytes
            &DutTemporaryBuffer[0], // buffer
        )

        IF len == 0 THEN
            BREAK
        END

        IF len < (1 << volume^.SectorLog) THEN
            // Zero out the upper part.

            TlFillMemoryWithByte (
                &DutTemporaryBuffer[len], // ptr
                (1 << volume^.SectorLog) - len, // sz
                0, // byte
            )
        END

        DutWriteSector (
            volume, // volume
            &DutTemporaryBuffer[0], // buffer
            sectornum + i, // sector
        )

        i += 1
    END
END

FN TlMain (
    IN argc : ULONG,
    IN argv : ^^UBYTE,
)

    // Dispatch to the correct command.

    IF argc < 2 THEN
        DutUsage ()
    END

    cmd := argv[1]

    IF TlCompareString ( cmd, "info" ) == 0 THEN
        DutDumpInfo ( argv[2] )

    ELSEIF TlCompareString ( cmd, "create" ) == 0 THEN
        IF argc < 4 THEN
            DutUsage ()
        END

        DutCreateImage ( argc, argv )

    ELSEIF TlCompareString ( cmd, "writesectors") == 0 THEN
        IF argc != 6 THEN
            DutUsage ()
        END

        DutWriteSectors (
            argv[2], // imagename
            argv[3], // partition
            argv[4], // sector
            argv[5], // file
        )

    ELSEIF TlCompareString ( cmd, "updatehierarchy" ) == 0 THEN
        IF argc != 6 AND argc != 5 THEN
            DutUsage ()
        END

        srcbase := ""

        IF argc == 6 THEN
            srcbase = argv[5]
        END

        DutUpdateHierarchy (
            argv[2], // imagename
            argv[3], // partition
            argv[4], // manifest
            srcbase, // srcbase
        )

    ELSEIF TlCompareString ( cmd, "updatefiles" ) == 0 THEN
        IF argc != 5 THEN
            DutUsage ()
        END

        DutUpdateFiles (
            argv[2], // imagename
            argv[3], // partition
            argv[4], // listfile
        )

    ELSEIF TlCompareString ( cmd, "ls" ) == 0 THEN
        IF argc != 5 THEN
            DutUsage ()
        END

        DutList (
            argv[2], // imagename
            argv[3], // partition
            argv[4], // path
        )

    ELSEIF TlCompareString ( cmd, "read" ) == 0 THEN
        IF argc != 5 THEN
            DutUsage ()
        END

        DutRead (
            argv[2], // imagename
            argv[3], // partition
            argv[4], // path
        )

    ELSEIF TlCompareString ( cmd, "write" ) == 0 THEN
        IF argc != 6 THEN
            DutUsage ()
        END

        DutWrite (
            argv[2], // imagename
            argv[3], // partition
            argv[4], // path
            argv[5], // hostpath
        )

    ELSEIF TlCompareString ( cmd, "delete" ) == 0 THEN
        IF argc != 5 THEN
            DutUsage ()
        END

        DutDelete (
            argv[2], // imagename
            argv[3], // partition
            argv[4], // path
        )

    ELSE
        DutUsage ()
    END
END