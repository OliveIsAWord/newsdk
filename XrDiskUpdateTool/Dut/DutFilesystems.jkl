//
// Generic filesystems support.
//

#INCLUDE "Dut.hjk"

EXTERN DutAisixFs : DutFilesystem

DutFilesystemTable : ^DutFilesystem[] = {
    &DutAisixFs,
    NULLPTR, // MUST be here, as a sentinel
}

FN DutLookupFilesystem (
    IN fsname : ^UBYTE,
) : ^DutFilesystem

    fs := &DutFilesystemTable[0]

    WHILE fs^ DO
        IF TlCompareString ( fs^^.Name, fsname ) == 0 THEN
            RETURN fs^
        END

        fs += SIZEOF ^VOID
    END

    RETURN NULLPTR
END

FN DutMountFilesystem (
    IN volume : ^DutDiskCommon,
    IN fs : ^DutFilesystem,
) : ^DutMount

    // Allocate a mount block.

    mount : ^DutMount

    status := TlAlloc (
        SIZEOF DutMount, // bytes
        OUT mount, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate mount block", 0, 0, 0 )
    END

    mount^.Volume = volume
    mount^.Cache = DutCreateCache ( volume )
    mount^.Fs = fs

    // Call the filesystem.

    IF fs^.Mount ( mount ) THEN
        RETURN mount
    END

    DutDeleteCache (
        mount^.Cache, // cache
        FALSE, // doflush
    )

    TlFree ( mount )

    RETURN NULLPTR
END

FN DutMountUnknownFilesystem (
    IN volume : ^DutDiskCommon,
) : ^DutMount

    // Try each filesystem in order.

    fs := &DutFilesystemTable[0]

    WHILE fs^ DO
        mount := DutMountFilesystem (
            volume, // volume
            fs^, // fs
        )

        IF mount THEN
            RETURN mount
        END

        fs += SIZEOF ^VOID
    END

    RETURN NULLPTR
END

FN DutUnmountFilesystem (
    IN mount : ^DutMount,
)

    // Call the filesystem.

    IF mount^.Fs^.Unmount THEN
        mount^.Fs^.Unmount ( mount )
    END

    // Flush and destroy the mount cache.

    DutDeleteCache (
        mount^.Cache, // cache
        TRUE, // doflush
    )

    // Deallocate the mount block.

    TlFree ( mount )
END

FN DutOpenFile (
    IN mount : ^DutMount,
    IN path : ^UBYTE,
    IN create : UWORD,
    OUT error : ^UBYTE,
) : ^DutFile

    // Allocate a file block.

    file : ^DutFile

    status := TlAlloc (
        SIZEOF DutFile, // bytes
        OUT file, // ptr
    )

    IF status THEN
        TlInternalError ( "Failed to allocate file block", 0, 0, 0 )
    END

    file^.Mount = mount
    file^.Size = -1

    // Call the filesystem to fill in the file block.

    IF mount^.Fs^.Open (
        file, // file
        path, // path
        create, // create
        OUT error, // error
    ) THEN
        RETURN file
    END

    TlFree ( file )

    RETURN NULLPTR
END

FN DutCloseFile (
    IN file : ^DutFile,
)

    file^.Mount^.Fs^.Close ( file )

    TlFree ( file )
END

FN DutReadFile (
    IN file : ^DutFile,
    IN offset : UWORD,
    IN len : UWORD,
    IN buf : ^VOID,
) : UWORD

    RETURN file^.Mount^.Fs^.Read (
        file, // file
        offset, // offset
        len, // len
        buf, // buf
    )
END

FN DutWriteFile (
    IN file : ^DutFile,
    IN offset : UWORD,
    IN len : UWORD,
    IN buf : ^VOID,
) : UWORD

    RETURN file^.Mount^.Fs^.Write (
        file, // file
        offset, // offset
        len, // len
        buf, // buf
    )
END

FN DutListFiles (
    IN file : ^DutFile,
) : UWORD

    RETURN file^.Mount^.Fs^.List ( file )
END

FN DutTruncateFile (
    IN file : ^DutFile,
) : UWORD

    RETURN file^.Mount^.Fs^.Truncate ( file )
END